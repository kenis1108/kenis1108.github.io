<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>域名、子域名、IP地址与服务器端口之间的关系以及子域名和反向代理的区别</title>
      <link href="/posts/7f872e8a.html"/>
      <url>/posts/7f872e8a.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在互联网架构中，域名、子域名、IP地址与服务器端口共同构成了网站和服务的访问路径。理解它们之间的关系，有助于更好地管理和部署网络服务。</p><h2 id="1-域名"><a href="#1-域名" class="headerlink" title="1. 域名"></a>1. 域名</h2><ul><li><strong>定义</strong>：域名是一个人类可读的地址，用于识别互联网上的网站，例如 <code>example.com</code>。</li><li><strong>功能</strong>：<ul><li><strong>识别网站</strong>：帮助用户轻松记忆和访问网站。</li><li><strong>DNS解析</strong>：通过域名系统（DNS）将域名解析为对应的IP地址，便于计算机定位和访问网站。</li></ul></li></ul><h2 id="2-子域名"><a href="#2-子域名" class="headerlink" title="2. 子域名"></a>2. 子域名</h2><ul><li><strong>定义</strong>：子域名是主域名的扩展部分，用于组织或分类网站的不同部分，例如 <code>blog.example.com</code> 或 <code>shop.example.com</code>。</li><li><strong>功能</strong>：<ul><li><strong>服务分类</strong>：将不同的服务或功能模块区分开，例如博客、商店、API等。</li><li><strong>灵活部署</strong>：可以指向与主域名相同的服务器，也可以配置指向不同的服务器，实现服务的分离和独立管理。</li><li><strong>更高层级的域名</strong>：（三级或者四级域名 <code>extra.sub.blog.example.com</code>）也是可行的，主要用于进一步的组织和分类</li></ul></li></ul><h2 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h2><ul><li><strong>定义</strong>：IP地址（如 <code>192.168.1.1</code> 或 <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code>）是分配给网络上每个设备的数字标签。</li><li><strong>功能</strong>：<ul><li><strong>设备识别</strong>：用于唯一标识网络中的每个设备。</li><li><strong>数据传输</strong>：指导数据在互联网上的传输路径，确保数据准确到达目标设备。</li></ul></li></ul><h2 id="4-服务器端口"><a href="#4-服务器端口" class="headerlink" title="4. 服务器端口"></a>4. 服务器端口</h2><ul><li><strong>定义</strong>：端口是服务器上用于通信的逻辑端点，每个端口号对应一个特定的服务。</li><li><strong>常用端口</strong>：<ul><li><strong>端口 80</strong>：HTTP（网页服务）</li><li><strong>端口 443</strong>：HTTPS（加密网页服务）</li><li><strong>端口 22</strong>：SSH（安全远程访问）</li><li><strong>端口 25</strong>：SMTP（电子邮件发送）</li></ul></li><li><strong>功能</strong>：<ul><li><strong>服务区分</strong>：通过不同的端口号，服务器可以同时运行多个服务而互不干扰。</li><li><strong>访问控制</strong>：控制不同服务的访问权限和安全性。</li></ul></li></ul><h2 id="5-它们如何协同工作"><a href="#5-它们如何协同工作" class="headerlink" title="5. 它们如何协同工作"></a>5. 它们如何协同工作</h2><p>当用户在浏览器中输入 <code>www.example.com</code> 时，以下过程发生：</p><ol><li><strong>DNS查询</strong>：浏览器通过DNS查询，将 <code>www.example.com</code> 解析为对应的IP地址。</li><li><strong>连接端口</strong>：浏览器连接到该IP地址上的相关端口（例如端口80用于HTTP）。</li><li><strong>服务响应</strong>：服务器监听该端口，并提供请求的服务（如网页内容）。</li></ol><p><strong>子域名的作用</strong>：</p><ul><li>可以将流量引导到不同的IP地址或端口，实现同一域名下不同服务的分离和独立管理。</li></ul><h2 id="6-反向代理与子域名的区别"><a href="#6-反向代理与子域名的区别" class="headerlink" title="6. 反向代理与子域名的区别"></a>6. 反向代理与子域名的区别</h2><h3 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h3><ul><li><strong>服务分离</strong>：二者都可以实现不同服务之间的分离。</li><li><strong>流量分发</strong>：都能将流量分发到不同的服务器或服务。</li></ul><h3 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h3><ul><li><strong>分发机制</strong>：<ul><li><strong>反向代理</strong>：基于URL路由（如路径或查询参数）来区分服务。例如，<code>/api/</code> 路径的请求转发到API服务器，<code>/static/</code> 转发到静态资源服务器。</li><li><strong>子域名</strong>：基于不同的域名来区分服务。例如，<code>api.example.com</code> 和 <code>www.example.com</code> 分别指向不同的服务器或服务。</li></ul></li><li><strong>配置层级</strong>：<ul><li><strong>反向代理</strong>：在服务器配置层面进行设置，需要配置代理服务器（如Nginx、HAProxy等）。</li><li><strong>子域名</strong>：在DNS配置层面进行设置，通过DNS记录将不同域名指向不同的IP地址或服务器。</li></ul></li></ul><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><ul><li><strong>反向代理</strong>：<ul><li>适用于在同一域名下提供多种服务，尤其需要隐藏服务器架构或进行流量分配时。</li><li>常用于微服务架构，通过路径路由将请求分发到不同的服务。</li></ul></li><li><strong>子域名</strong>：<ul><li>适用于区分完全不同的服务或应用，尤其希望为每个服务提供独立的域名时。</li><li>常用于大型网站，将不同功能模块（如博客、商店、论坛）分配到不同的二级域名。</li></ul></li></ul><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>域名、子域名、IP地址与服务器端口共同构建了互联网服务的访问架构。理解它们之间的关系和区别，有助于更高效地设计和管理网络服务。反向代理和二级域名虽然在服务分离和流量分发上有相似之处，但它们在实现机制和适用场景上有所不同。根据具体需求选择合适的方法，可以优化服务性能和管理效率。</p>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2+mongodb搭建后端api项目</title>
      <link href="/posts/80d480ac.html"/>
      <url>/posts/80d480ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用koa2-mongodb搭建后端api项目"><a href="#使用koa2-mongodb搭建后端api项目" class="headerlink" title="使用koa2+mongodb搭建后端api项目"></a>使用koa2+mongodb搭建后端api项目</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自行安装 node + npm</span><br></pre></td></tr></table></figure><h2 id="二、安装脚手架并创建项目"><a href="#二、安装脚手架并创建项目" class="headerlink" title="二、安装脚手架并创建项目"></a>二、安装脚手架并创建项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g koa-generator</span><br><span class="line">koa2 &lt;pro_name&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122113926.png"></p><h2 id="三、安装依赖并启动项目"><a href="#三、安装依赖并启动项目" class="headerlink" title="三、安装依赖并启动项目"></a>三、安装依赖并启动项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm i koa2-cors mongoose (跨域还有操作数据库的库)</span><br><span class="line">npm dev (启动命令自行查看package.json)</span><br></pre></td></tr></table></figure><h2 id="四、数据库操作-模块化开发"><a href="#四、数据库操作-模块化开发" class="headerlink" title="四、数据库操作(模块化开发)"></a>四、数据库操作(模块化开发)</h2><h3 id="脚手架生成的初始文件目录结构"><a href="#脚手架生成的初始文件目录结构" class="headerlink" title="脚手架生成的初始文件目录结构"></a>脚手架生成的初始文件目录结构</h3><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122114218.png"></p><h3 id="创建mongodb文件夹"><a href="#创建mongodb文件夹" class="headerlink" title="创建mongodb文件夹"></a>创建mongodb文件夹</h3><h4 id="mongodb文件夹结构"><a href="#mongodb文件夹结构" class="headerlink" title="mongodb文件夹结构"></a>mongodb文件夹结构</h4><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122114700.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">controller文件夹: 存放对数据库增删改查的函数的文件,文件名对应数据库中的一个表(集合);</span><br><span class="line">models文件夹: 存放由schemas生成的表,文件名同理;</span><br><span class="line">schemas文件夹: 存放schemas文件</span><br></pre></td></tr></table></figure><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><ol><li>先创建mongodb&#x2F;index.js文件,再在app.js中导入,导入时注意模块导入顺序<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/index.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span> 连接数据库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">kenis</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://192.168.43.158:27017/car&quot;</span>);</span><br><span class="line">mongoose.<span class="property">Promise</span> = <span class="variable language_">global</span>.<span class="property">Promise</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听打开成功还是失败</span></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 链接失败</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&quot;链接失败&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;connected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 链接成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;链接成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;disconnected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 断开链接</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;断开链接&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * app.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="comment">// const views = require(&quot;koa-views&quot;);</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&quot;koa-json&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> onerror = <span class="built_in">require</span>(<span class="string">&quot;koa-onerror&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&quot;koa-logger&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&quot;./mongodb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line"><span class="title function_">onerror</span>(app);</span><br><span class="line"></span><br><span class="line"><span class="comment">// middlewares</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">bodyparser</span>(&#123;</span><br><span class="line">    <span class="attr">enableTypes</span>: [<span class="string">&quot;json&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;text&quot;</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>)(__dirname + <span class="string">&quot;/public&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域处理</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa2-cors&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图配置</span></span><br><span class="line"><span class="comment">// app.use(</span></span><br><span class="line"><span class="comment">//   views(__dirname + &quot;/views&quot;, &#123;</span></span><br><span class="line"><span class="comment">//     extension: &quot;pug&quot;,</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="keyword">new</span> <span class="title class_">Date</span>() - start;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router 修改路由的注册方式，通过遍历routes文件夹读取文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;./routes&quot;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> api = <span class="built_in">require</span>(<span class="string">`./routes/<span class="subst">$&#123;route&#125;</span>`</span>);</span><br><span class="line">  app.<span class="title function_">use</span>(api.<span class="title function_">routes</span>(), api.<span class="title function_">allowedMethods</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error-handling</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;server error&quot;</span>, err, ctx);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库集合的模板类型和模型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/schemas/car.js</span></span><br><span class="line"><span class="comment"> * 创建模板类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sportsCarSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="comment">// 说明集合中要存储的字段，字段类型</span></span><br><span class="line">  <span class="attr">name_zh_CN</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">name_en_US</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; sportsCarSchema &#125;;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/models/car.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; sportsCarSchema &#125; = <span class="built_in">require</span>(<span class="string">&quot;../schemas/car&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SportsCarModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;SportsCar&quot;</span>, sportsCarSchema);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="title class_">SportsCarModel</span> &#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建操作数据库的控制器文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/controller/car.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SportsCarModel</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;../mongodb/models/car&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">findAll</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">find</span>(&#123;&#125;);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;查找成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;查找失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">deleteOne</span>(ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">create</span>(ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;添加成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;添加失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id修改数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, update &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">findByIdAndUpdate</span>(id, update);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;修改成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;修改失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; findAll, delOne, addOne, updateOne &#125;;</span><br></pre></td></tr></table></figure></li><li><p>创建路由文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * routes/cars.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  findAll,</span><br><span class="line">  delOne,</span><br><span class="line">  addOne,</span><br><span class="line">  updateOne,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;../mongodb/controller/car&quot;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">prefix</span>(<span class="string">&quot;/cars&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/list&quot;</span>, findAll);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/del&quot;</span>, delOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>, addOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/update&quot;</span>, updateOne);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular</title>
      <link href="/posts/b93d4cd8.html"/>
      <url>/posts/b93d4cd8.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://angular.cn/">Angular中文官网</a></p><h2 id="AngularJS-和-Angualr-的区别"><a href="#AngularJS-和-Angualr-的区别" class="headerlink" title="AngularJS 和 Angualr 的区别"></a>AngularJS 和 Angualr 的区别</h2><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210804085948.png" alt="AngularJS 和 Angualr 的区别"></p><h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2><ol><li>安装CLI<br><code>npm install -g @angular/cli</code></li><li>创建新项目<br><code>ng new demo --skip-install</code></li><li>安装依赖<br><code>cd Demo &amp;&amp; yarn</code></li><li>启动应用<br><code>yarn start</code></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><ul><li>使用CLI创建组件<ul><li><code>ng g component path/componentName</code></li><li>path &#x3D;&#x3D;&gt; 组件存放的路径</li><li>componentName &#x3D;&#x3D;&gt; 组件的名称</li><li>运行成功后会在src&#x2F;app下创建path文件夹,path文件夹下创建componentName文件夹,componentName文件夹里面有四个文件(.ts、.html、.css、.spec.ts)</li></ul></li><li>手动创建组件<ul><li>创建一个componentName.component.ts<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-componentName&#x27;</span>,</span><br><span class="line">  <span class="comment">// template: &#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;,</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./componentName.component.html&#x27;</span>,</span><br><span class="line">  <span class="comment">// styles: [&#x27;h1 &#123; font-weight: normal; &#125;&#x27;],</span></span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./componentName.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ComponentOverviewComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210804094515.png" alt="生命周期顺序"></p><h3 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h3><h4 id="特殊的选择器"><a href="#特殊的选择器" class="headerlink" title="特殊的选择器"></a>特殊的选择器</h4><h5 id="host"><a href="#host" class="headerlink" title=":host"></a>:host</h5><blockquote><p><code>使用 :host 伪类选择器，用来选择组件宿主元素中的元素（相对于组件模板内部的元素）。要把宿主样式作为条件，就要像函数一样把其它选择器放在 :host 后面的括号中。</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;// 把宿主元素作为目标，但是只有当它同时带有 active CSS 类的时候才会生效</span><br><span class="line">&gt;<span class="selector-pseudo">:host</span>(<span class="selector-class">.active</span>) &#123; <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="host-context"><a href="#host-context" class="headerlink" title=":host-context()"></a>:host-context()</h5><blockquote><p><code>:host-context()在当前组件宿主元素的祖先节点中查找 CSS 类， 直到文档的根节点为止。</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;// 只有当某个祖先元素有 CSS 类 `theme-light` 时，才会把 `<span class="attribute">background-color</span>` 样式应用到组件内部的所有 `&lt;<span class="selector-tag">h2</span>&gt;` 元素中。</span><br><span class="line">&gt;<span class="selector-pseudo">:host-context</span>(<span class="selector-class">.theme-light</span>) <span class="selector-tag">h2</span> &#123; <span class="attribute">background-color</span>: <span class="number">#eef</span>; &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h3><h4 id="父传子（-Input装饰器）"><a href="#父传子（-Input装饰器）" class="headerlink" title="父传子（@Input装饰器）"></a>父传子（@Input装饰器）</h4><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">app-son</span> [<span class="attr">name</span>]=<span class="string">&quot;sonName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   name为子组件接受的变量名</span></span><br><span class="line"><span class="comment">   sonName为父组件传的值 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 子组件</span></span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> &gt;<span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Component</span>(&#123;</span><br><span class="line"> <span class="attr">selector</span>: <span class="string">&#x27;app-son&#x27;</span>,</span><br><span class="line"> <span class="attr">templateUrl</span>: <span class="string">&#x27;./son.component.html&#x27;</span>,</span><br><span class="line"> <span class="attr">styleUrls</span>: [<span class="string">&#x27;./son.component.less&#x27;</span>]</span><br><span class="line">&gt;&#125;)</span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TopComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"> <span class="comment">// 接受父组件传的值</span></span><br><span class="line"> <span class="meta">@Input</span>() name;</span><br><span class="line"> </span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="通过-setter-截听输入属性值的变化"><a href="#通过-setter-截听输入属性值的变化" class="headerlink" title="通过 setter 截听输入属性值的变化"></a>通过 setter 截听输入属性值的变化</h4><h4 id="通过ngOnChanges-来截听输入属性值的变化"><a href="#通过ngOnChanges-来截听输入属性值的变化" class="headerlink" title="通过ngOnChanges()来截听输入属性值的变化"></a>通过ngOnChanges()来截听输入属性值的变化</h4><h4 id="子传父-Output装饰器"><a href="#子传父-Output装饰器" class="headerlink" title="子传父 (@Output装饰器)"></a>子传父 (@Output装饰器)</h4><blockquote><ol><li>在子组件中引入<code>import &#123; Output, EventEmitter &#125; from &#39;@angular/core&#39;;</code></li><li>在子组件定义自定义事件<code>@Output() newItemEvent = new EventEmitter&lt;string&gt;();</code></li><li>在子组件中定义触发事件的方法<code>addNewItem(value: string) &#123;this.newItemEvent.emit(value);&#125;</code></li><li>子组件模板中添加按钮来触发自定义事件</li><li>父组件中定义触发自定义事件的处理函数来接收数据</li><li>在父组件模板中子组件标签上绑定自定义事件<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//子组件</span></span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">Component</span> <span class="title class_">OnInit</span>, <span class="title class_">Output</span>, <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">&gt;<span class="meta">@Component</span>(&#123;</span><br><span class="line"> <span class="attr">selector</span>: <span class="string">&#x27;app-son&#x27;</span>,</span><br><span class="line"> <span class="attr">templateUrl</span>: <span class="string">&#x27;./son.component.html&#x27;</span>,</span><br><span class="line"> <span class="attr">styleUrls</span>: [<span class="string">&#x27;./son.component.less&#x27;</span>]</span><br><span class="line">&gt;&#125;)</span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TopComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"> <span class="comment">// new EventEmitter&lt;string&gt;()使用 Angular 来创建一个新的事件发射器，它发出的数据是 string 类型的。</span></span><br><span class="line"> <span class="meta">@Output</span>() newItemEvent = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 定义触发事件的方法</span></span><br><span class="line"> <span class="title function_">addNewItem</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">newItemEvent</span>.<span class="title function_">emit</span>(value);</span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">app-son</span> (<span class="attr">newItemEvent</span>)=<span class="string">&quot;父组件接收方法(接收的数据$event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="跨组件-服务-Subject"><a href="#跨组件-服务-Subject" class="headerlink" title="跨组件 (服务&amp;&amp;Subject)"></a>跨组件 (服务&amp;&amp;Subject)</h4><h3 id="内容投影-插槽"><a href="#内容投影-插槽" class="headerlink" title="内容投影(插槽)"></a>内容投影(插槽)</h3><h4 id="单插槽内容投影-ng-content"><a href="#单插槽内容投影-ng-content" class="headerlink" title="单插槽内容投影(ng-content)"></a>单插槽内容投影(ng-content)</h4><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><h4 id="纯管道和非纯管道"><a href="#纯管道和非纯管道" class="headerlink" title="纯管道和非纯管道"></a>纯管道和非纯管道</h4><blockquote><p>纯管道:<br>Angular只有检查到输入值发生纯变更时，才会执行纯管道。纯变更指的是，原始类型值(String,Number,Boolean,Symbol)的改变，或者对象引用的改变(对象值改变不是纯变更，不会执行)。</p><p>非纯管道:<br>Angular会在每个组件的变更检测周期执行非纯管道。所以，如果使用非纯管道，我们就得注意性能问题了。</p></blockquote><blockquote><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210805162221.png"></p></blockquote><h4 id="自定义管道"><a href="#自定义管道" class="headerlink" title="自定义管道"></a>自定义管道</h4><blockquote><p>第一步：CLI创建管道<code>ng g pipe path/pipeName</code>会生成.pipe.ts文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="title class_">Pipe</span>(&#123;</span><br><span class="line"><span class="comment">// 模板中 | 后使用的名称</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;format&#x27;</span></span><br><span class="line">&gt;)</span><br><span class="line">&gt;xport <span class="keyword">class</span> <span class="title class_">FormatPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">transform</span>(<span class="attr">value</span>: <span class="built_in">number</span>, ...<span class="attr">args</span>: <span class="built_in">number</span>[]): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, b] = args</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + a - b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第二步：在.module.ts文件里导入，在@NgModule的declarations里引入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/home/home.component&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">TopComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/home/top/top.component&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">FooterComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/home/footer/footer.component&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">CenterComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/home/center/center.component&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">FormatPipe</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./pipes/format.pipe&#x27;</span>;</span><br><span class="line">&gt;<span class="keyword">import</span> &#123; <span class="title class_">FormatChPipe</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./pipes/format-ch.pipe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@NgModule</span>(&#123;</span><br><span class="line"> <span class="attr">declarations</span>: [</span><br><span class="line">   <span class="title class_">AppComponent</span>,</span><br><span class="line">   <span class="title class_">HomeComponent</span>,</span><br><span class="line">   <span class="title class_">TopComponent</span>,</span><br><span class="line">   <span class="title class_">FooterComponent</span>,</span><br><span class="line">   <span class="title class_">CenterComponent</span>,</span><br><span class="line">   <span class="title class_">FormatPipe</span>,</span><br><span class="line">   <span class="title class_">FormatChPipe</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">imports</span>: [</span><br><span class="line">   <span class="title class_">BrowserModule</span>,</span><br><span class="line">   <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">   <span class="title class_">FormsModule</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">providers</span>: [],</span><br><span class="line"> <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&gt;&#125;)</span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第三步：模板中使用，若需传递参数使用:隔开，若需串联之间|后继续写下去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">   &#123;&#123;1000|format:1:2|formatCh&#125;&#125;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro安装tomcat8</title>
      <link href="/posts/399136aa.html"/>
      <url>/posts/399136aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><p><code>yay -S jdk8-openjdk</code></p><h2 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h2><p><code>yay -S tomcat</code></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210730091658.png"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol><li>修改文件夹权限 <code>sudo chmod 777 -R /etc/tomcat8</code></li><li>修改<code>/etc/tomcat8/tomcat-users.xml</code>文件,解开user和role标签的注释<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  By default, no user is included in the &quot;manager-gui&quot; role required</span></span><br><span class="line"><span class="comment">  to operate the &quot;/manager/html&quot; web application.  If you wish to use this app,</span></span><br><span class="line"><span class="comment">  you must define such a user - the username and password are arbitrary.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Built-in Tomcat manager roles:</span></span><br><span class="line"><span class="comment">    - manager-gui    - allows access to the HTML GUI and the status pages</span></span><br><span class="line"><span class="comment">    - manager-script - allows access to the HTTP API and the status pages</span></span><br><span class="line"><span class="comment">    - manager-jmx    - allows access to the JMX proxy and the status pages</span></span><br><span class="line"><span class="comment">    - manager-status - allows access to the status pages only</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The users below are wrapped in a comment and are therefore ignored. If you</span></span><br><span class="line"><span class="comment">  wish to configure one or more of these users for use with the manager web</span></span><br><span class="line"><span class="comment">  application, do not forget to remove the &lt;!.. ..&gt; that surrounds them. You</span></span><br><span class="line"><span class="comment">  will also need to set the passwords to something appropriate.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;robot&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The sample user and role entries below are intended for use with the</span></span><br><span class="line"><span class="comment">  examples web application. They are wrapped in a comment and thus are ignored</span></span><br><span class="line"><span class="comment">  when reading this file. If you wish to configure these users for use with the</span></span><br><span class="line"><span class="comment">  examples web application, do not forget to remove the &lt;!.. ..&gt; that surrounds</span></span><br><span class="line"><span class="comment">  them. You will also need to set the passwords to something appropriate.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;tomcat&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;role1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;tomcat&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;both&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;tomcat,role1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;role1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;role1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>sudo systemctl start tomcat8</code></p><h2 id="浏览器访问http-127-0-0-1-8080"><a href="#浏览器访问http-127-0-0-1-8080" class="headerlink" title="浏览器访问http://127.0.0.1:8080"></a>浏览器访问<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></h2>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+selenium webdriver自动化测试</title>
      <link href="/posts/730667ac.html"/>
      <url>/posts/730667ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装selenium和浏览器驱动"><a href="#安装selenium和浏览器驱动" class="headerlink" title="安装selenium和浏览器驱动"></a>安装selenium和浏览器驱动</h2><p><code>pip install selenium</code></p><p>Linux:<br>下载各浏览器驱动然后解压到<code>/usr/bin/</code>下即可或者配置环境变量<br>eg:<code>/usr/bin/chromedriver</code></p><h2 id="各浏览器驱动下载地址-根据浏览器的版本下载对应驱动"><a href="#各浏览器驱动下载地址-根据浏览器的版本下载对应驱动" class="headerlink" title="各浏览器驱动下载地址(根据浏览器的版本下载对应驱动)"></a>各浏览器驱动下载地址(根据浏览器的版本下载对应驱动)</h2><ul><li><a href="http://npm.taobao.org/mirrors/chromedriver/">chrome:http://npm.taobao.org/mirrors/chromedriver/</a></li><li><a href="http://npm.taobao.org/mirrors/geckodriver/">firefox:http://npm.taobao.org/mirrors/geckodriver/</a></li></ul><h2 id="selenium使用"><a href="#selenium使用" class="headerlink" title="selenium使用"></a>selenium使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用chrome浏览器</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开浏览器并跳转到百度</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 找到搜索框输入selenium</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="comment"># 10秒后关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron</title>
      <link href="/posts/ccd37491.html"/>
      <url>/posts/ccd37491.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>设置镜像 <code>npm config set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</code></li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="electron-packager"><a href="#electron-packager" class="headerlink" title="electron-packager"></a>electron-packager</h3><p>打包全平台 <code>electron-packager ./ --all</code></p><h3 id="nativefier"><a href="#nativefier" class="headerlink" title="nativefier"></a>nativefier</h3><p>介绍: 基于electron的一键封装url为桌面应用的工具<br>使用: <code>nativefier url</code><br>例子: <code>nativefier https://www.baidu.com</code></p><h2 id="替代品-tauri"><a href="#替代品-tauri" class="headerlink" title="替代品 tauri"></a>替代品 <strong>tauri</strong></h2><p><a href="https://www.cnblogs.com/Grewer/p/12789261.html">参考</a><br><a href="https://tauri.studio/en/docs/usage/development/integration/">官网</a></p><ul><li>官网说tauri原始程序打包后比electron小140多MB</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> 软件使用和配置 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuepress的使用</title>
      <link href="/posts/f93195bc.html"/>
      <url>/posts/f93195bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i -g vuepress</code></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir vuepress_blog &amp;&amp; <span class="built_in">cd</span> vuepress<span class="literal">-blog</span></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">yarn init</span><br><span class="line"><span class="comment"># 安装项目依赖</span></span><br><span class="line">yarn add <span class="literal">-D</span> vuepress</span><br></pre></td></tr></table></figure><h2 id="新建md文档"><a href="#新建md文档" class="headerlink" title="新建md文档"></a>新建md文档</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir docs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Hello VuePress&#x27;</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>vuepress dev docs</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建<code>docs/.vuepress/config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Hello VuePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Just playing around&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ng-alain的使用</title>
      <link href="/posts/44d63540.html"/>
      <url>/posts/44d63540.html</url>
      
        <content type="html"><![CDATA[<h1 id="NG-ALAIN"><a href="#NG-ALAIN" class="headerlink" title="NG-ALAIN"></a>NG-ALAIN</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h2 id="ng-g"><a href="#ng-g" class="headerlink" title="ng g"></a>ng g</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng g ng<span class="literal">-alain</span>:module xxx</span><br><span class="line">ng g ng<span class="literal">-alain</span>:empty yyy <span class="literal">-m</span>=xxx</span><br></pre></td></tr></table></figure><h2 id="使用iconfont"><a href="#使用iconfont" class="headerlink" title="使用iconfont"></a>使用iconfont</h2><blockquote><p>第一步：iconfont 生成js在线链接</p><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210713143820.png"></p></blockquote><blockquote><p>第二步：在startup.service.ts中引入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// src/app/core/startup/startup.service.ts</span></span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">StartupService</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">   <span class="attr">iconSrv</span>: <span class="title class_">NzIconService</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">menuService</span>: <span class="title class_">MenuService</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">translate</span>: <span class="title class_">TranslateService</span>,</span></span><br><span class="line"><span class="params">   <span class="meta">@Inject</span>(ALAIN_I18N_TOKEN) <span class="keyword">private</span> <span class="attr">i18n</span>: I18NService,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">settingService</span>: <span class="title class_">SettingsService</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">aclService</span>: <span class="title class_">ACLService</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">titleService</span>: <span class="title class_">TitleService</span>,</span></span><br><span class="line"><span class="params">   <span class="meta">@Inject</span>(DA_SERVICE_TOKEN) <span class="keyword">private</span> <span class="attr">tokenService</span>: <span class="title class_">ITokenService</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">httpClient</span>: <span class="title class_">HttpClient</span>,</span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> <span class="attr">injector</span>: <span class="title class_">Injector</span></span></span><br><span class="line"><span class="params"> </span>) &#123;</span><br><span class="line">   iconSrv.<span class="title function_">addIcon</span>(...<span class="variable constant_">ICONS_AUTO</span>, ...<span class="variable constant_">ICONS</span>);</span><br><span class="line">   <span class="comment">// 使用iconfont</span></span><br><span class="line">   iconSrv.<span class="title function_">fetchFromIconfont</span>(&#123;</span><br><span class="line">     <span class="attr">scriptUrl</span>: <span class="string">&#x27;https://at.alicdn.com/t/font_2670501_nkbj7jrr0sp.js&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>第三步：在组件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzIconfont</span>=<span class="string">&quot;icon-tubiaozhizuomoban-09&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   nz-icon</span></span><br><span class="line"><span class="comment">   nzIconfont</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="自定义管道"><a href="#自定义管道" class="headerlink" title="自定义管道"></a>自定义管道</h2><p>运行<code>ng g pipe pipes/xxx -m=shared</code></p><h2 id="delon-mock"><a href="#delon-mock" class="headerlink" title="@delon&#x2F;mock"></a>@delon&#x2F;mock</h2><p>数据存放位置<code>_mock/_user.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">USERS</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;/user&#x27;</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">MockRequest</span></span>) =&gt;</span> <span class="title function_">genData</span>(req.<span class="property">queryString</span>),</span><br><span class="line">  <span class="string">&#x27;/user/:id&#x27;</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">MockRequest</span></span>) =&gt;</span> list.<span class="title function_">find</span>(<span class="function">(<span class="params">w</span>) =&gt;</span> w.<span class="property">id</span> === +req.<span class="property">params</span>.<span class="property">id</span>),</span><br><span class="line">  <span class="string">&#x27;POST /user/:id&#x27;</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">MockRequest</span></span>) =&gt;</span> <span class="title function_">saveData</span>(+req.<span class="property">params</span>.<span class="property">id</span>, req.<span class="property">body</span>),</span><br><span class="line">  <span class="string">&#x27;/user/current&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cipchk&#x27;</span>,</span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&#x27;https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png&#x27;</span>,</span><br><span class="line">    <span class="attr">userid</span>: <span class="string">&#x27;00000001&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;cipchk@qq.com&#x27;</span>,</span><br><span class="line">    <span class="attr">signature</span>: <span class="string">&#x27;海纳百川，有容乃大&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;交互专家&#x27;</span>,</span><br><span class="line">    <span class="attr">group</span>: <span class="string">&#x27;蚂蚁金服－某某某事业群－某某平台部－某某技术部－UED&#x27;</span>,</span><br><span class="line">    <span class="attr">tags</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;很有想法的&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;专注撩妹&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;帅~&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;通吃&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;专职后端&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;海纳百川&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">notifyCount</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">country</span>: <span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">    <span class="attr">geographic</span>: &#123;</span><br><span class="line">      <span class="attr">province</span>: &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;330000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">city</span>: &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;市辖区&#x27;</span>,</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;330100&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;XX区XXX路 XX 号&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;你猜-你猜你猜猜猜&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;POST /user/avatar&#x27;</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;POST /login/account&#x27;</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">MockRequest</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(data.<span class="property">userName</span> === <span class="string">&#x27;admin&#x27;</span> || data.<span class="property">userName</span> === <span class="string">&#x27;user&#x27;</span>) || data.<span class="property">password</span> !== <span class="string">&#x27;ng-alain.com&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">`Invalid username or password（admin/ng-alain.com）`</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">      <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">token</span>: <span class="string">&#x27;123456789&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: data.<span class="property">userName</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">`<span class="subst">$&#123;data.userName&#125;</span>@qq.com`</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10000</span>,</span><br><span class="line">        <span class="attr">time</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;POST /register&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;GET /fruit&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ellipsis-文本自动省略号组件"><a href="#ellipsis-文本自动省略号组件" class="headerlink" title="ellipsis 文本自动省略号组件"></a>ellipsis 文本自动省略号组件</h2><p><a href="https://ng-alain.com/components/ellipsis/zh#API">API</a></p><blockquote><p>功能:</p><ol><li>按行数省略</li><li>按字符数省略</li><li>自定义省略显示字符</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/posts/b9f20a20.html"/>
      <url>/posts/b9f20a20.html</url>
      
        <content type="html"><![CDATA[<h1 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>官网：<a href="https://webpack.js.org/">https://webpack.js.org</a></p><p>中文网：<a href="https://www.webpackjs.com/">https://www.webpackjs.com</a></p><p>目的：</p><ul><li>为了react的学习</li><li>为了了解vue的脚手架的2个命令操作的实现<ul><li>npm run serve（启动开发服务器）</li><li>npm run build（打包上线的代码）</li></ul></li></ul><h2 id="1、webpack是什么？"><a href="#1、webpack是什么？" class="headerlink" title="1、webpack是什么？"></a>1、webpack是什么？</h2><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/45b0f95bb1c04f3f8c5c2d3f16bcea63c0dd1170.gif?sign=0d1284b61f08ec87b1f742c3e170a432&t=5f8d1bd4"></p><p>webpack是<strong>一种前端资源构建（打包）工具（npm run build）</strong>，一个静态模块打包器。在webpack看来，前端的所有资源文件（js&#x2F;json&#x2F;css&#x2F;image&#x2F;less&#x2F;sass…）都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源。webpack可以解决当前web开发中所面临的困境，webpack提供了：</p><ul><li>友好的模块化支持</li><li>代码压缩混淆</li><li>处理js兼容问题</li><li>性能优化</li></ul><p>目前绝大多数企业中的前端项目，都是基于webpack进行打包构建的。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/3ed87fed6859579595666cc45aabe79a5b41bce1.png?sign=d9bb626d5bf10643dc0625447a0b6312&t=5f436a97" alt="webpack"></p><p><strong>示例：使用&#x3D;&#x3D;模块化开发思想（能拆就拆原则）&#x3D;&#x3D;创建一个隔行换色的效果</strong></p><p>先初始化一个空项目<code>npm init -y</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第1个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第2个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第3个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第4个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第5个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第6个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第7个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先需要安装jQuery，npm i -S jquery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;li:odd&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;li:even&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器中执行的时候会报错，需要注意，代码是没有问题的，问题是浏览器不兼容（浏览器不认识模块化的语法，需要使用特定的工具进行转化）。</p><h2 id="2、webpack的核心概念"><a href="#2、webpack的核心概念" class="headerlink" title="2、webpack的核心概念"></a>2、webpack的核心概念</h2><p>核心概念即webpack的<strong>五个核心配置项</strong>。</p><ul><li><strong>entry入口</strong></li></ul><p>本项目应该使用哪个模块来作为构建其内部依赖图的开始（指定打包入口文件）。<strong>打包入口文件默认为<code>src/index.js</code></strong></p><ul><li><strong>output输出</strong></li></ul><p>在哪里输出它所创建的 bundles，以及如何命名这些文件，<strong>打包输出文件默认值为<code>dist/main.js</code></strong></p><ul><li><strong>loader加载器</strong></li></ul><p>loader让webpack能够去处理那些非js文件（webpack自身只理解js并且是非高级语法）</p><ul><li><strong>plugins插件</strong></li></ul><p>插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><ul><li><strong>mode 模式</strong></li></ul><p>通过选择 development（打包出来的代码是没有经过压缩的） 或 production（默认值，代码经过压缩的） 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化</p><h1 id="二、webpack的使用"><a href="#二、webpack的使用" class="headerlink" title="二、webpack的使用"></a>二、webpack的使用</h1><blockquote><p>webpack学习的时候很多包都指定了版本，都是被<code>webpack-dev-server</code>包给害的。被指定版本号的包新的大版本都不兼容老的<code>webpack-dev-server</code>包。如果不采用低版本号安装其它的包，安装<code>webpack-dev-server</code>包的时候就会报错。</p></blockquote><h2 id="1、基本的安装与配置"><a href="#1、基本的安装与配置" class="headerlink" title="1、基本的安装与配置"></a>1、基本的安装与配置</h2><p>webpack是运行在node环境中的，需要Node&gt;&#x3D; 8.10和npm&gt;&#x3D;5.6的版本支持。在项目中安装webpack的方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack@4 webpack-cli@3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于目前这个2个工具大版本号已经升级，并且不兼容后续使用的工具，所以这边使用指定的低版本号</span></span><br></pre></td></tr></table></figure><p>安装好后可以通过先前提及过的<code>npx</code>命令来检查webpack的版本以确定是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npx可以帮助我们快速执行一些模块内部的命令</span></span><br></pre></td></tr></table></figure><p>确认能够通过上述命令输出<code>webpack</code>的版本信息后，再在package.json文件中的<code>scripts</code>节点配置webpack运行脚本命令（**&#x3D;&#x3D;指令名称自行决定&#x3D;&#x3D;**）：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/7cf1f69b852d4fb5fb1762fe90d4bc977df70b79.png?sign=27c5dfa96c85c20a85be0ea5533135d0&t=5f8d5e64"></p><p>此时，我们可以在终端中运行自定义命令<code>npm run compact</code>来对项目使用webpack打包，例如打包之前写的<code>隔行换色</code>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run compact</span><br></pre></td></tr></table></figure><p>打包完毕后会在当前项目目录下产生<code>dist</code>目录，里面会包含一个<code>main.js</code>文件，修改<code>src/index.html</code>文件，将原先的JavaScript文件引入修改为打包好的文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果如下（说明先前写的代码已经生效）：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/a5e76f3aed14e3d9a3ccb5b40501e3f5fb7b8f48.png?sign=dbe83f863acf3e3d6d494fc4d574c2c9&t=5f8d4e65"></p><h2 id="2、webpack的配置文件"><a href="#2、webpack的配置文件" class="headerlink" title="2、webpack的配置文件"></a>2、webpack的配置文件</h2><h3 id="2-1、基本配置"><a href="#2-1、基本配置" class="headerlink" title="2.1、基本配置"></a>2.1、基本配置</h3><p>我们在第一节的概述中提及了webpack的五个核心概念，这五个核心概念都属于webpack的配置，因此，如果需要更好的运用webpack，我们需要掌握其配置文件的相关知识点。</p><p>配置的方式有两种：单配置文件形式、<strong>多配置文件形式</strong>。（<strong>二选一即可</strong>）</p><p>首先来看单配置文件方式：在<strong>项目根目录下面创建一个webpack.config.js文件</strong>，webpack运行的环境为nodejs环境，所以此文件中的模块化规范为commonjs规范写法。<strong>该配置文件创建好后会被webpack在打包时自动使用（因此，文件名不能写错）。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 打包模式  development |  production</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="comment">// 项目入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 项目出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="comment">// [name]默认的名称为main（如果需要分目录，可以在名字前加文件夹名字）</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一种配置方式是：在项目根目录中创建一个config目录（为了便于后期管理，提前预设两套或多套webpack配置），专门用于存放webpack的相关配置文件：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/ed0eb82cb3084bd87c4529e898190cc6d1546296.png?sign=70a8523c5a74e2b889f1595aaeddcb47&t=5f8d5069"></p><p>由于这两个文件不似<code>/webpack.config.js</code>文件会被webpack自动使用，因此需要在<code>package.json</code>文件中进行分别引入指定：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/b08ecfb54a5a2ab474e11d0873764f03e26cbe14.png?sign=bdee15a05acace3d9606539902b6e7c9&t=5f8d6a12"></p><p>这样一来，后续如果需要将项目打包成开发环境需要的代码则执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run compact:dev</span><br></pre></td></tr></table></figure><p>如果需要将项目打包成生产环境需要的代码则执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run compact:pro</span><br></pre></td></tr></table></figure><p>注意：由于在config下面的配置文件中指定了输出的路径，此时路径也需要做一下修改，否则打包的dist目录就会在”config&#x2F;dist”这个位置。只需要给“dist”加上“..&#x2F;”即可：&#x3D;&#x3D;该路径一定要求是绝对路径&#x3D;&#x3D;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path: path.resolve(__dirname, &quot;../dist&quot;),</span><br></pre></td></tr></table></figure><p><strong>在实际开发的时候推荐使用多套配置文件的方案，便于管理不同环境下需要的打包的配置，避免来回切换配置。</strong></p><h3 id="2-2、配置默认预览页"><a href="#2-2、配置默认预览页" class="headerlink" title="2.2、配置默认预览页"></a>2.2、配置默认预览页</h3><p>问题：在打包好的代码中并没有index.html，还需要手动在src目录中将html代码复制到dist目录中（或者可以在index.html中修改js脚本文件的引入路径），这个操作比较麻烦，能不能像vue项目一样，直接将html复制过去？</p><p>答：有</p><p>首先需要安装一个扩展模块，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin@4</span><br></pre></td></tr></table></figure><p>然后修改webpack的配置文件（此时需要注意你使用的是哪种配置文件方式，单一or多个，并做对应的修改），增加以下配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// template是必须的</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该款插件后，会自动在视图中去帮我们引入打包好的文件<code>main.js</code>：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/050e6d3f07322775279da4f5fc783d703e004db7.png?sign=1bd7a3d7bfaa2b99b4c787b41870fbea&t=5f9131f3"></p><p>这款插件在工作的时候帮我们实现了2个操作：</p><ul><li>复制对应的template模版文件到dist目录下</li><li>将打包好的js文件，自动引入到模板文件中<ul><li>需注意：<strong>最好将自己原先在html中引入的外部文件给去掉</strong>，因为它会自己加，自己写的不去除会出现以下两种情况之一：<ul><li>重复引入（无意义）</li><li>引入文件出现404情况</li></ul></li></ul></li></ul><h3 id="2-3、配置实时打包预览"><a href="#2-3、配置实时打包预览" class="headerlink" title="2.3、配置实时打包预览"></a>2.3、配置实时打包预览</h3><p>通过上一节，我们已经可以使用打包工具去将写好的代码进行打包了，但是在操作的过程中大家可能会发现有一个比较麻烦的地方：修改一次代码就得重新打包一次，这种感觉有点类似于之前的<code>node xxx.js</code>一样，那么在webpack这里是否有类似于<code>nodemon</code>那么好用的自动化工具能帮助我们自动检测文件的变化并自动执行呢？答案是有的，它就是<code>webpack-dev-server</code>自动化打包工具。</p><blockquote><p>类似于：</p><p>在vue中，我们并不是每次改完代码都打包看效果，而是在开发过程中有一个测试服务器，自动帮我们产生预览效果，但是并会真的去打包，只有等上线的时候我们才去打包。实时预览服务器可以通过工具webpack-dev-server。</p></blockquote><p><code>webpack-dev-server</code>的安装指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-dev-server@3.11.0</span><br></pre></td></tr></table></figure><p>自动打包服务支持一系列配置选项，可以根据以下代码取所需的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// 运行web根目录</span></span><br><span class="line">        <span class="attr">contentBase</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">        <span class="comment">// 监视目录下的所有文件，一旦文件有变化则就会reload重载</span></span><br><span class="line">        <span class="attr">watchContentBase</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">            <span class="comment">// 忽略文件</span></span><br><span class="line">            <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// gzip压缩</span></span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="comment">// 域名</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 不要显示启动服务器的日志信息</span></span><br><span class="line">        <span class="attr">clientLogLevel</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="comment">// 除了一些基本的启动信息以外，其他的内容都不要显示</span></span><br><span class="line">        <span class="attr">quiet</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 如果出错，不要全屏提示</span></span><br><span class="line">        <span class="attr">overlay</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 服务器代理 --&gt; 解决开发环境跨域问题</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 一旦devServer服务器接受到 /api开头的请求，就会把请求转发到另一个服务器</span></span><br><span class="line">            <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">                <span class="comment">// 发送请求时，请求路径重写: 将/api 去除</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>安装好后同样也需要在<code>package.json</code>中配置自定义执行的指令：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/2b624dae8885d4b490f34b55d272ce5cd5787de4.png?sign=3b529b1657fa01d85095207dcfcb531a&t=5ff1e553"></p><p>随后即可通过自定义指令来运行自动打包服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令执行完后命令行会如同执行`nodemon`一样处于实时检测的状态</span></span><br><span class="line">npm run compact</span><br></pre></td></tr></table></figure><p>启动打包服务后，即可通过浏览器访问<a href="http://127.0.0.1:8080来浏览自动打包好的项目。">http://127.0.0.1:8080来浏览自动打包好的项目。</a></p><blockquote><p><strong>注意点</strong></p><ul><li>上述过程中，会自动产生并运行一个临时性的服务器供我们预览，访问地址是：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></li><li>上述过程中，<strong>打包生成的输出文件会托管在项目根下</strong>，但文件是虚拟的，是<strong>无法看见</strong>的，也就是说该操作并不会产生前面所谓的<code>dist</code>目录，如果需要得到打包好的目录，还是得运行之前的打包命令</li><li>在此处系统会自动引入需要的外部文件，如果此前我们自己已经引入了，则需要去除自己引入的外部文件</li></ul></blockquote><h2 id="3、加载器"><a href="#3、加载器" class="headerlink" title="3、加载器"></a>3、加载器</h2><h3 id="3-1、加载器概述"><a href="#3-1、加载器概述" class="headerlink" title="3.1、加载器概述"></a>3.1、加载器概述</h3><p>在实际开发中，webpack只能打包处理以<code>.js</code>为后缀的模块（并且是其中一部分比较简单的JavaScript代码），其他非<code>.js</code>后缀的模块webpack默认处理不了，而需要调用loader加载器才能正常打包，否则会报错！</p><p>loader加载器可以协助webpack打包处理特定的文件模块了，例如：</p><ul><li>less-loader可以打包处理<code>.less</code>相关的文件</li><li>sass-loader可以打包处理<code>.scss</code>相关的文件</li><li>…</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/5177ca4ed032a9d921e0a89019cae57688b548af.jpeg?sign=c490e9acb5a3903e934656c30956c3ac&t=5f4385a2" alt="loader调用过程"></p><h3 id="3-2、处理样式"><a href="#3-2、处理样式" class="headerlink" title="3.2、处理样式"></a>3.2、处理样式</h3><h4 id="3-2-1、处理css文件"><a href="#3-2-1、处理css文件" class="headerlink" title="3.2.1、处理css文件"></a>3.2.1、处理css文件</h4><p>正如前面所说，webpack默认不能打包css文件，如果在没有安装css加载器的时候打包包含css文件的项目则会报错：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/559ee2aeb72b89df60471e0f3b74c72b50f3c908.png?sign=9ca06130d30cfb12403a245b0d8f9b9a&t=5f8e53fa"></p><p>根据报错提示，我们需要安装一个合适的加载器才能继续。</p><p>所以要想打包css文件，则需要安装css加载器，该加载器的安装命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D style-loader css-loader</span><br></pre></td></tr></table></figure><p>安装好需要的加载器后需要对webpack进行配置，告诉webpack当遇到css后缀的文件应该交由哪个加载器去处理。在webpack打包命令<strong>对应</strong>的<code>module</code>的<code>rules</code>数组中添加css-loader规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>] &#125;],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在写加载器<code>use</code>的时候，需要注意：</p><ul><li><p>use数组中指定的加载器顺序是<strong>固定</strong>的，&#x3D;&#x3D;顺序不能随意调换&#x3D;&#x3D;</p></li><li><p>多个加载器调用的顺序是：<strong>从后往前、从下往上</strong>调用（倒序执行）</p></li></ul><p>在配置好对应的css加载器后，webpack才能打包对应的css文件（提醒：配置好之后需要重新启动自动打包服务让配置文件生效）。</p><h4 id="3-2-2、处理less文件"><a href="#3-2-2、处理less文件" class="headerlink" title="3..2.2、处理less文件"></a>3..2.2、处理less文件</h4><p>要想通过webpack打包less文件，同样需要安装对应的加载器：</p><blockquote><p>受webpack-dev-server包的影响，less-loader包只能安装7.x。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D less-loader@7 less</span><br></pre></td></tr></table></figure><p>安装好后也需要在对应的webpack配置文件中配置针对less文件打包的规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>,<span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>,<span class="string">&quot;less-loader&quot;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是一样，需要注意顺序问题。</p><h4 id="3-2-3、处理scss文件"><a href="#3-2-3、处理scss文件" class="headerlink" title="3.2.3、处理scss文件"></a>3.2.3、处理scss文件</h4><p>同上，打包scss文件也是需要进行对应加载器安装与配置的。</p><p>首先需要安装对应的加载器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D sass-loader@10 node-sass</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在安装sass加载器的时候，需要使用到Windows的vs环境（C++桌面开发环境），届时可能会卡住或者直接报错，如果出现报错，则根据命令行的提示去解决（耐心去看英文报错），如果只是卡住了，则稍等片刻。Python2.7</p></blockquote><p>安装好之后再在webpack的配置文件中配置打包规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,<span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>,<span class="string">&quot;sass-loader&quot;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4、抽取css（优化）"><a href="#3-2-4、抽取css（优化）" class="headerlink" title="3.2.4、抽取css（优化）"></a>3.2.4、抽取css（优化）</h4><p>通过前面的学习，细心的同学会发现，打包好的html文件在浏览器运行时，“审查元素”时 能够看到所有的样式代码都以“style”标签写入了html，这些样式都是由JavaScript动态生成的，每次都这样动态生成：</p><ul><li>消耗性能<ul><li>在html中本身是没有style代码的，而是通过js后续生成的，再塞入到html中</li></ul></li><li>无法做静态资源加速（CDN）</li></ul><p>因此，此处可以对该部分进行改善操作。我们可以让webpack在打包时直接将这些样式抽成一个样式文件。步骤如下：</p><ul><li><p>安装插件</p><ul><li>npm i -D mini-css-extract-plugin</li></ul></li><li><p>导入插件</p><ul><li>const MiniCssExtractPlugin &#x3D; require(‘mini-css-extract-plugin’)</li></ul></li><li><p>配置插件</p><ul><li><pre><code class="javascript">new MiniCssExtractPlugin(&#123;    filename: &quot;css/[name]_[hash:6].css&quot;,&#125;),<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用插件</span><br><span class="line"></span><br><span class="line">  - MiniCssExtractPlugin.loader（使用它去**替换**之前的“style-loader”）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.3、处理图片</span><br><span class="line"></span><br><span class="line">如果在样式表/视图中使用了图片（远程图片不受影响，本地图片受加载器的影响），则也需要配置对应的加载器才能进行正确的打包操作。加载器的安装命令如下：</span><br><span class="line"></span><br><span class="line">~~~shell</span><br><span class="line">npm i -D url-loader file-loader html-loader@1</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>安装好后也需要在webpack配置文件中进行对应的规则配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpeg|jpg|gif)$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="comment">// 图片小于8kb，就会被base64处理</span></span><br><span class="line">                        <span class="comment">// 优点: 减少请求数量(减轻服务器压力)</span></span><br><span class="line">                        <span class="comment">// 缺点：图片体积会更大(文件请求速度更慢)</span></span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                        <span class="comment">// 打包后的路径和文件名称 [ext]扩展名</span></span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&quot;img/[name].[ext]&quot;</span>,</span><br><span class="line">                        <span class="comment">// 打包后的文件指定访问路径前缀</span></span><br><span class="line">                        <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            <span class="comment">// 处理html中的img(负责引入img,从而能被url-loader进行处理)</span></span><br><span class="line">            <span class="attr">loader</span>: [<span class="string">&quot;html-loader&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、处理js文件高级语法"><a href="#3-4、处理js文件高级语法" class="headerlink" title="3.4、处理js文件高级语法"></a>3.4、处理js文件高级语法</h3><p>webpack在不需要引入任何loader不可以对于js进行打包处理，但是它不会对于js兼容性进行任务的处理，而我们编写的项目是需要在不同的浏览器中运行的，此时就需要对于js的兼容性在打包过程中进行对应的处理。我们可以使用babel来完成对应的js兼容处理。</p><p>首先先需要去安装babel转换器相关的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-loader @babel/core @babel/runtime</span><br></pre></td></tr></table></figure><p>再去安装babel语法插件相关的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties</span><br></pre></td></tr></table></figure><p>然后再去在项目根目录下创建babel配置文件babel.config.js并初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再在webpack的配置文件中设置打包规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完毕后，webpack即支持打包处理js中的高级语法。</p><p>常见的加载器就介绍到这里，如果后续其他文件加载器的需求，请百度解决！</p><h2 id="4、webpack的其他细节"><a href="#4、webpack的其他细节" class="headerlink" title="4、webpack的其他细节"></a>4、webpack的其他细节</h2><blockquote><p><strong>该章节需要产生实际打包的结果以观察细节，所以不能使用自动打包服务器的命令，建议新建一个自定义命令用于区别自动打包指令。</strong></p></blockquote><h3 id="4-1、entry多入口"><a href="#4-1、entry多入口" class="headerlink" title="4.1、entry多入口"></a>4.1、entry多入口</h3><p>前面我所使用webpack打包方式是针对单一入口的项目，那么如果项目中有多个入口需要处理该如何进行打包呢？</p><p>如果有类似的情况，只需要将webpack的入口配置配置成多入口的形式即可。</p><p>例如，我们有<code>index.js</code>和<code>login.js</code>两个入口，则需要将entry入口配置写成以下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">login</span>: <span class="string">&quot;./src/login.js&quot;</span>,</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="4-2、路径别名与默认后缀（优化）"><a href="#4-2、路径别名与默认后缀（优化）" class="headerlink" title="4.2、路径别名与默认后缀（优化）"></a>4.2、路径别名与默认后缀（优化）</h3><p>在先前学习Vue的时候提及并使用过<code>@</code>，当时说<code>@</code>表示<code>src</code>目录，这样一来，在我们自己写的代码中作文件导入的时候路径写起来比较轻松，但是当前的项目中如果使用<code>@</code>导入在打包时就会出现类似如下的错误：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/e4a3ceb328a3125e9036d3673132ca3db05967af.png?sign=ba05f1ab98d80657d5f387fb091e9bae&t=5f9158f8"></p><p>这就说明，当前项目并不支持我们在导入路径中使用<code>@</code>符号，如果想要支持之前的这种简化写法，需要我们配置解析规则（vue项目中是工具已经帮我们配置好了，所以当时可以直接使用）。</p><p><strong>配置方式如下：</strong>修改webpack的配置文件，在配置选项中添加<code>resolve</code>选项，增加别名配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名：优点简写路径，缺点路径没有提示</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="comment">// 定义一个@，可在import引入时使用</span></span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置可以忽略不写的后缀</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这时，再写模块导入路径的时候即可简化路径写法。</p><h3 id="4-3、忽略打包（优化）"><a href="#4-3、忽略打包（优化）" class="headerlink" title="4.3、忽略打包（优化）"></a>4.3、忽略打包（优化）</h3><p>webpack中的<code>externals</code>选项提供了不从bundle捆绑中使用依赖的方式。</p><p>在开发项目时，有些外部模块通过<code>CDN链接</code>使用<code>script</code>标签引入到页面中可能要比通过打包使用更加方便，例如jQuery库。此时就可以使用<code>externals</code>忽略打包的方式去指定哪些库不需要webpack进行打包。</p><p>请注意，不被webpack打包的外部依赖，后期依旧可以通过以下方式在项目中使用：</p><ul><li><code>script</code>标签链入远程&#x2F;本地js文件（推荐）</li><li>import导入<ul><li><code>import ... from &#39;xxx&#39;</code></li><li><code>import &#123; a,b,c &#125; from &#39;xxx&#39;</code></li></ul></li></ul><p><code>externals</code>选项指定实现的方式比较简单，<strong>只需要在webpack配置文件中添加externals选项指定需要忽略的包信息即可</strong>。</p><p>例如，需要忽略对jQuery的打包，则可以写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span>,</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式有2个好处：</p><ul><li>有些模块，script标签引入可能比通过打包导入来的效率更高、更简单；</li><li>模块不参与打包，会相对减小打包结果的体积，这样上线之后，用户访问效率会得到提高；</li></ul><h3 id="4-4、打包处理vue文件"><a href="#4-4、打包处理vue文件" class="headerlink" title="4.4、打包处理vue文件"></a>4.4、打包处理vue文件</h3><p>与前面的css、less、scss等文件一样，webpack默认是不能处理vue后缀的文件的，如果需要让其支持打包处理vue文件，也需要安装和配置对应的loader加载器。</p><p>可以先在项目中安装vue，随后写一个vue文件供测试使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S vue</span><br></pre></td></tr></table></figure><p>所提供的demo测试vue文件代码<code>/src/vue/h5.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &quot;你好世界！&quot;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>再去创建vue的访问入口文件<code>/src/vue/app.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;@/vue/h5.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不要忘记在html文件中写上渲染的容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在打包入入口中指定vue文件的入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">h5</span>: <span class="string">&quot;./src/vue/app.js&quot;</span>,</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果在打包时出错，则需要安装对应的loader并且配置，安装指定如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p>安装好对应的加载器后需要进一步配置打包规则，首先需要在webpack的配置文件中引入vue-loader的插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">VueLoaderPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/lib/plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux</title>
      <link href="/posts/cb417bc6.html"/>
      <url>/posts/cb417bc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2013年Facebook提出了Flux架构的思想，引发了很多的实现。2015年，Redux出现，将Flux与函数式编程结合一起，很短时间内就成为了最热门的前端架构。</p><p>简单说，如果你的UI层非常简单，没有很多互动，Redux就是不必要的，用了反而增加复杂性。</p><p>如果你的项目的迭代变得越来越复杂，组件的数量和层级也变得越来越多，越来越深，此时组件间的数据通信就变得异常的复杂和低效，为了解决这个问题，引入了状态管理（<strong>redux</strong>）从而很好的解决多组件之间的通信问题。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/a6087b34b9f365ef23b0a53fb6ca225099d5cfb6.png?sign=fbbd37dae9446bbcef3b79c60c2d31e3&t=5f99a237"></p><p>如果需要使用Redux请先进行安装：</p><p>网址：<a href="https://redux.js.org/introduction/getting-started">https://redux.js.org/introduction/getting-started</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S redux</span><br></pre></td></tr></table></figure><blockquote><p>与vuex的区别：</p><ul><li>代码书写上vuex的代码会比redux的感觉简单一些</li><li>两者在模块化上的实现也有区别，redux的模块化分的文件会更多，但是redux在命名空间层面的操作比vuex简单</li></ul></blockquote><h2 id="三大原则（重点）"><a href="#三大原则（重点）" class="headerlink" title="三大原则（重点）"></a>三大原则（重点）</h2><ul><li>单一数据源<ul><li>整个应用的<code>state</code>（这个state不是组件中的state，请不要混淆）被储存在一棵对象结构树中，并且这个对象结构只存在于唯一一个store中</li></ul></li><li>State是只读的<ul><li>唯一改变state的方法就是触发dispatch+action，action是一个用于描述已发生事件的<strong>普通对象</strong>（action普通对象必须要有<code>type</code>属性，值是什么无所谓，其余属性也无所谓）。</li></ul></li><li>（最终修改数据的方法）使用<strong>纯函数</strong>（一个函数的返回结果只受到其形参的影响，则其就是纯函数）来执行修改<ul><li>为了描述action如何改变state tree ，我们需要编写reducer，&#x3D;&#x3D;reducer必须是纯函数&#x3D;&#x3D;，它接收先前的state和action，并返回<strong>新的</strong>state（不会合并的，自行注意这个坑）</li></ul></li></ul><p><strong>操作原理图</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/c2b874cdd9bc6f0579afebeedc5f958131a78040.png?sign=ec995f5c878596b98a9e1b3827aa4c4c&t=5f99b163"></p><p>a. store通过reducer创建了初始状态</p><p>b. view通过store.getState()获取到了store中保存的state挂载在了自己的状态上</p><p>c. 用户产生了操作（事件），调用了actions 的方法</p><p>d. actions的方法被调用，创建了带有标示性信息的action（描述对象，描述如何修改数据）</p><p>e. actions将action通过调用store.dispatch方法发送到了reducer中</p><p>f. reducer接收到action并根据标识信息判断之后返回了新的state（自己注意合并的问题）</p><p>g. store的state被reducer更改为新state的时候，store.subscribe方法里的回调函数会执行，此时就可以通知view去重新获取state</p><ul><li>store.getState()：用于获取仓库中初始的数据（一次性）</li><li>store.dispatch()：用于派发修改数据的任务，参数是action普通对象</li><li>store.subscribe(callback)：视图组件用于订阅新数据的方法（二次及以后的数据更新，使之产生类似于vue的响应式store数据）</li></ul><blockquote><p>纯函数是函数式编程的概念，必须遵守以下一些约束。</p><ul><li><p>不得改写参数</p></li><li><p>不能调用系统 I&#x2F;O 的API</p></li><li><p>不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果</p></li></ul></blockquote><p>请注意：由于reducer被要求是纯函数，所以reducer函数里面不能改变State，必须返回一个全新的数据（不会自动合并原始数据的，因此一定要注意：别把原始数据搞丢了）。</p><h2 id="redux的使用"><a href="#redux的使用" class="headerlink" title="redux的使用"></a>redux的使用</h2><p><strong>案例：在组件中展示一个按钮，点按钮后给redux中的数字+9，数字初始为0。实现一个计数器的效果</strong></p><p>步骤：</p><ul><li>创建store</li><li>创建视图组件（展示store中的数据）</li><li>修改</li><li>回显数据到视图组件</li></ul><p><strong>实现步骤</strong></p><p>a. 创建默认数据源：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 这是仓库store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a. 导入需要使用的成员</span></span><br><span class="line"><span class="comment">// createStore方法，作用用于产生仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b. 创建数据源</span></span><br><span class="line"><span class="comment">// 默认数据源是一个普通对象，可以有很多的数据</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="comment">// 定义初始化的数据</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. 创建纯函数reducer（方法名叫什么无所谓）</span></span><br><span class="line"><span class="comment">// 作用：负责返回state（可能是直接返回state，也可能是返回修改后的state）</span></span><br><span class="line"><span class="comment">// 语法：reducer(state = defaultState,actions)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = defaultState, actions</span>) &#123;</span><br><span class="line">    <span class="comment">// 在返回之前写修改数据源的操作</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d. 产生仓库</span></span><br><span class="line"><span class="comment">// 产生仓库的时候需要往仓库中存放数据源，因此需要传递reducer过去</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// e. 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了方便调试redux（可选安装），建议去谷歌商店安装<code>redux dev tools</code>，在使用的时候需要参考其<a href="https://github.com/zalmoxisus/redux-devtools-extension#usage">说明页面</a></p><blockquote><p>redux工具条在安装好之后不能直接使用，需要配置仓库代码，然后才能使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// d. 产生仓库</span></span><br><span class="line"><span class="comment">// 产生仓库的时候需要往仓库中存放数据源，因此需要传递reducer过去</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="comment">// 必须要加上一段插件的配置工具，才能在浏览器中使用redux扩展</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION__</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/8a98ff5a63061eb039045fe1c42cd955d518311c.png?sign=7f00fc5ce078fb8192e4014f51649cb6&t=600a9550"></p><p>b. 建立视图组件并且展示数据源</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 需要导入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store/index&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 在constructor中获取store中的数据</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="comment">// 获取store数据（一次性，不具备响应式）</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = store.<span class="title function_">getState</span>();</span><br><span class="line">        <span class="comment">// 订阅数据的更新</span></span><br><span class="line">        store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">() =&gt;</span> store.<span class="title function_">getState</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前Store中的数据是：&#123;this.state.reducer.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addCount.bind(this)&#125;</span>&gt;</span>点击+9<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前Store中的数据是：&#123;this.state.reducer2.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addAge.bind(this)&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击+9</span></span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 描述数据如何更改的对象，其必须有type属性</span></span><br><span class="line">        <span class="keyword">let</span> action = &#123; <span class="attr">type</span>: <span class="string">&quot;mod_count&quot;</span>, <span class="attr">payload</span>: <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="comment">// 通过store.dispatch去派发action（会将该action派发给所有的reducer，每个reducer都会被执行，因此一定要注意type的取值）</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击+1</span></span><br><span class="line">    <span class="title function_">addAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> action = &#123; <span class="attr">type</span>: <span class="string">&quot;mod_age&quot;</span>, <span class="attr">payload</span>: <span class="number">1</span> &#125;;</span><br><span class="line">        store.<span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure><p>c. 修改操作</p><p>视图组件中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3. +9这个修改操作需要通过普通对象去描述（actions）</span></span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">        <span class="comment">// type是用于在reducer方法中做条件判断用的</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>,</span><br><span class="line">        <span class="comment">// 另一个属性用于声明本次修改具体的值是多少</span></span><br><span class="line">        <span class="attr">payload</span>: <span class="number">9</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 派发修改任务</span></span><br><span class="line">    store.<span class="title function_">dispatch</span>(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仓库文件的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = defaultState, actions</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(actions);</span><br><span class="line">    <span class="comment">//判断是否是加法操作</span></span><br><span class="line">    <span class="keyword">if</span> (actions.<span class="property">type</span> === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + actions.<span class="property">payload</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在返回之前写修改数据源的操作</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d. 回显新的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// 2. 在视图组件中获取初始的仓库数据</span></span><br><span class="line">    <span class="comment">// getState()方法是store对象内置的方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = store.<span class="title function_">getState</span>();</span><br><span class="line">    <span class="comment">// 4. 订阅新的数据</span></span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取新数据修改当前的state</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">() =&gt;</span> store.<span class="title function_">getState</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个reducer，需要通过<code>combineReducers</code>方法进行合并，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并reducer</span></span><br><span class="line"><span class="comment">// 有点类似于vuex的命名空间</span></span><br><span class="line"><span class="keyword">const</span> reducers = <span class="title function_">combineReducers</span>(&#123; reducer, reducer2 &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. 创建store对象（通过createStore方法），目前（后续有变）其参数就是reducer</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducers, <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION__</span>());</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>针对redux的模块化，在一个常规项目中会将其代码拆分成以下几个部分：</p><ul><li><p>States：建立同名目录，存放模块化之后的state（默认数据源）</p></li><li><p>Reducers，建立同名目录，存放模块化之后的reducer</p></li><li><p>Actions：建立同名目录，存放模块化之后的action</p></li><li><p>Type（可选）：建立同名目录，存放独立的type声明</p><ul><li>注意：在整个项目中，<strong>对于不同数据源的更改时使用的type名称不能重复</strong>，这个一定要注意。（原因redux在做修改数据的时候，<strong>其原理是依据type的值去循环每个reducer，找到匹配的去执行</strong>，为了避免出现同名，建议type集中书写）</li></ul></li></ul><p>具体实现，以项目的代码为准。</p><blockquote><p>由于代码已经经过模块化，在获取redux中的数据的时候需要更改获取方式，比如说之前获取count是写成：this.state.count，模块化之后需要写成：this.state.counter.count，比之前多了一个模块化的模块名称（等同于vuex中命名空间）</p></blockquote><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>网址：<a href="https://react-redux.js.org/">https://react-redux.js.org/</a></p><p>React-Redux是Redux的官方针对React开发的扩展库，默认没有在React项目中安装，需要手动来安装。react-redux是依赖于redux，所以必须先安装redux。</p><p>我们可以理解为react-redux就是redux给我们提供一些高阶组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react-redux</span><br></pre></td></tr></table></figure><p>React-redux所能解决的问题是：</p><ul><li>使用它以后我们不需要在每个组件中再去 手动订阅数据的更新了。</li><li>没有了数据的初始化state赋值，当前组件自身state和这个redux不冲突了</li><li>使用本节的react-redux与下一节的redux-thunk并不是为了简化代码的，它们存在的意义是解决前面所遇到的问题</li></ul><p><strong>使用步骤</strong></p><ul><li><p>在项目入口文件中定义Provider</p><ul><li><p>该步骤的操作有点类似于之前组件通信中的context那块的操作</p></li><li><p>将整个仓库作为商品提供给App根组件，后续的所有的组件都可以获取到仓库store中的数据</p></li><li><p>注意：与context不一样，这里绑定数据使用的属性是“store”</p></li><li><p>src&#x2F;index.js文件中的示例代码：</p></li><li><pre><code class="js">// 导入import React from &quot;react&quot;;import ReactDOM from &quot;react-dom&quot;;// 导入providerimport &#123; Provider &#125; from &quot;react-redux&quot;;import store from &quot;./store/index&quot;;// 导入需要展示的组件import App from &quot;./Login&quot;;// 渲染视图// 在展示app组件的时候需要按照组件的形式进行操作ReactDOM.render(    &lt;Provider store=&#123;store&#125;&gt;        &lt;App&gt;&lt;/App&gt;    &lt;/Provider&gt;,    document.getElementById(&quot;root&quot;));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在需要使用redux的组件中使用</span><br><span class="line"></span><br><span class="line">  - 这个步骤与vuex中map系列函数（mapState，mapMutations，mapActions、mapGetters）的思想是一样的</span><br><span class="line"></span><br><span class="line">  - 思想：将仓库中的属性和方法映射成当前组件自身的属性和方法</span><br><span class="line"></span><br><span class="line">  - 在实际使用的时候组件中不再需要使用store对象了（包括初始的获取数据：store.getState()、store.dispatch(）、store.subscribe()）</span><br><span class="line"></span><br><span class="line">  - 步骤</span><br><span class="line"></span><br><span class="line">    - 在需要使用reudx的组件前面导入react-redux提供的高阶组件：connect</span><br><span class="line"></span><br><span class="line">    - 编写映射方法（请注意，这个方法映射不是类组件的方法，而是在类组件外写的方法）</span><br><span class="line"></span><br><span class="line">      - mapStateToProps(state)</span><br><span class="line">        - 作用：将仓库中的state数据源映射成本组件的属性props，返回一个props对象</span><br><span class="line">        - 参数：仓库中的state</span><br><span class="line">      - mapDispatchToProps(dispatch)</span><br><span class="line">        - 作用：将派发action的方法映射成当前组件自身的属性，该方法也要求返回一个对象，该对象中存放的就是派发action的方法集合</span><br><span class="line">        - 参数：dispatch如同之前的store.dispatch()</span><br><span class="line">      - 编写时，可以写箭头函数，也可以写常规函数</span><br><span class="line"></span><br><span class="line">    - 应用高阶组件connect，写法是固定的</span><br><span class="line"></span><br><span class="line">      - ~~~js</span><br><span class="line">        // 在组件最后导出的时候改写成如下：</span><br><span class="line">        export default connect(mapStateToProps,mapDispatchToProps)(ComponentName)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>组件中实际使用时的参考代码：以jsx为例</p></li><li><pre><code class="react">import React, &#123; Component &#125; from &quot;react&quot;;// 需要导入store// import store from &quot;../store/index&quot;;// 导入action创建模块（导出里面全部的方法）import * as actionCreate from &quot;../store/actions/index&quot;;// 导入typeimport &#123; MOD_COUNT, MOD_AGE &#125; from &quot;../store/types/index&quot;;// import * as types from &quot;../store/types/index&quot;;// 第一步：在需要使用redux组件中导入一个由react-redux提供的hocimport &#123; connect &#125; from &quot;react-redux&quot;;class Counter extends Component &#123;    // 在constructor中获取store中的数据    constructor(props) &#123;        super(props);        // 获取store数据（一次性，不具备响应式）        // this.state = store.getState();        // 订阅数据的更新        // store.subscribe(() =&gt; this.setState(() =&gt; store.getState()));    &#125;    render() &#123;        console.log(this.state);        return (            &lt;div&gt;                &lt;div&gt;当前Store中的数据是：&#123;this.props.tool.count&#125;&lt;/div&gt;                &lt;button onClick=&#123;this.props.addCount&#125;&gt;点击+9&lt;/button&gt;                &lt;hr /&gt;                &lt;div&gt;当前Store中的数据是：&#123;this.props.user.age&#125;&lt;/div&gt;                &lt;button onClick=&#123;this.props.addAge&#125;&gt;点击+1&lt;/button&gt;            &lt;/div&gt;        );    &#125;&#125;// 第二步：在类外面定义俩个映射方法// 将redux中的state数据源映射到本组件自身的props中function mapStateToProps(state) &#123;    // return state.user;    // return state.tool;    return state;&#125;// 将dispatch映射成自身组件的propsfunction mapDispatchToProps(dispatch) &#123;    // 该方法返回一个对象，对象中都是方法    return &#123;        addCount() &#123;            dispatch(actionCreate.createAction(MOD_COUNT, 9));        &#125;,        addAge() &#123;            dispatch(actionCreate.createAction(MOD_AGE, 1));        &#125;,    &#125;;&#125;// 第三步：应用HOC// connect函数的俩个参数顺序不能颠倒export default connect(mapStateToProps, mapDispatchToProps)(Counter);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## redux-thunk（中间件）</span><br><span class="line"></span><br><span class="line">通常情况下，action只是一个对象，不能包含异步操作，这导致了很多创建action的逻辑只能写在组件中，代码量较多也不便于复用，同时对该部分代码测试的时候也比较困难，**组件的业务逻辑也不清晰**，使用中间件了之后，可以通过actionCreator异步编写action，这样代码就会拆分到actionCreator中，可维护性大大提高，可以方便于测试、复用，同时actionCreator还集成了异步操作中不同的action派发机制，减少编码过程中的代码量。</span><br><span class="line"></span><br><span class="line">![](https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/f602da4624bbd2d6a94f60659d3425c6c718a225.png?sign=c2ad92a84b02dd359e3433318d1e6317&amp;t=600e8805)</span><br><span class="line"></span><br><span class="line">常见的异步库：</span><br><span class="line"></span><br><span class="line">- **Redux-thunk**</span><br><span class="line">- Redux-saga</span><br><span class="line">- Redux-effects</span><br><span class="line">- Redux-side-effects</span><br><span class="line">- Redux-loop</span><br><span class="line">- Redux-observable</span><br><span class="line">- …</span><br><span class="line"></span><br><span class="line">基于Promise的异步库：</span><br><span class="line"></span><br><span class="line">- Redux-promise</span><br><span class="line">- Redux-promises</span><br><span class="line">- Redux-simple-promise</span><br><span class="line">- Redux-promise-middleware</span><br><span class="line">- …</span><br><span class="line"></span><br><span class="line">这里我们使用一个Redux官方出品的中间件库：**redux-thunk**</span><br><span class="line"></span><br><span class="line">![](https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/19a9bd4441389b0de7378dbc88bd09cd43df515d.png?sign=befc0a76a6388904b5ec3cfb90add605&amp;t=5f99b565)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在使用前需要先安装这个中间件：</span><br><span class="line"></span><br><span class="line">~~~shell</span><br><span class="line">npm i -S redux-thunk</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>步骤：</p><ul><li><p>在仓库的创建文件<code>store/index.js</code>文件中导入中间件的应用方法，再去导入redux-thunk，并且应用</p><ul><li>导入redux提供的中间件使用的方法：applyMiddleware</li></ul></li><li><p>会产生报错（浏览器的redux调试工具的报错）需要解决</p><ul><li><p>解决思路：查看</p><p>，找解决办法</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/6e50a16108fda29d18af71d2cc157474c33df8de.png?sign=2532a8ce08844760f0e65ef26eabe329&t=600e8b12"></p><p>修改为的配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决插件报错的操作</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    <span class="comment">// 合并多个reducer（整合数据源）,不合并会报错</span></span><br><span class="line">    <span class="title function_">combineReducers</span>(&#123; counter, <span class="variable language_">global</span> &#125;),</span><br><span class="line">    <span class="comment">// 应用中间件</span></span><br><span class="line">    <span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line">    <span class="comment">// 必须要加上一段插件的配置工具，才能在浏览器中使用redux扩展</span></span><br><span class="line">    <span class="comment">// window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>去需要做异步处理的action的位置去使用异步实现（通过dispatch派发action）</p><ul><li><pre><code class="js">// - 异步方法（载荷可能是异步获取的数据）export const createActionAsync = (type, payload) =&gt; &#123;    // 异步代码先不写（暂时没有异步中间件）    // return &#123; type, payload &#125;;    // setTimeout(() =&gt; &#123;    //     return &#123; type, payload &#125;;    // &#125;, 1000);    // 异步写法    return (dispatch) =&gt; &#123;        setTimeout(() =&gt; &#123;            dispatch(&#123; type, payload &#125;);        &#125;, 3000);    &#125;;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 面试题：redux优化</span><br><span class="line"></span><br><span class="line">问题：redux是用于大规模数据管理的，一个项目中可能会有很多的数据，这就导致模块化后会产生若干个reducer需要在store/index.js中进行导入，也就会出现以下情况（举例）：</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">import search from &quot;./Reducers/Reducer1&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer2&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer3&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer4&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer5&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer6&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer7&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer8&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer9&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer10&quot;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>如何对其进行优化？</p><p>解决思路：通过编写一个方法，实现指定文件夹的遍历，实现自动导入。</p><p>核心方法：require.context()</p><blockquote><p>该方法接受3个参数：</p><p>参数1：目录</p><p>参数2：是否递归遍历，布尔值</p><p>参数3：正则表达式</p></blockquote><p>代码实现：</p><p>&#x3D;&#x3D;注意：写该优化代码的实现必须要写在所有的import语句之后&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码优化，批量导入</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;./reducers&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="comment">// 比较固定的处理代码</span></span><br><span class="line"><span class="keyword">let</span> members = &#123;&#125;; <span class="comment">// 组合成员用的</span></span><br><span class="line">files.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// element是对应的模块文件的路径</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">    <span class="comment">// 依据路径获取导出的成员</span></span><br><span class="line">    <span class="keyword">let</span> member = <span class="title function_">files</span>(element).<span class="property">default</span>;</span><br><span class="line">    <span class="comment">// 获取文件名充当对象的属性名</span></span><br><span class="line">    <span class="keyword">let</span> filename = element.<span class="title function_">replace</span>(<span class="regexp">/(.*\/)*([^.]+).*/gi</span>, <span class="string">&quot;$2&quot;</span>);</span><br><span class="line">    <span class="comment">// 组合成员</span></span><br><span class="line">    members[filename] = member;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/posts/db4c4335.html"/>
      <url>/posts/db4c4335.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="vuex是什么？"><a href="#vuex是什么？" class="headerlink" title="vuex是什么？"></a>vuex是什么？</h2><p>vuex是一种项目中数据共享的方式。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/08/1f5b60f8db5ab9b0306394aa7411e2354f240fce.jpeg?sign=95117e4a25b3517dcfc95186e3a75ce1&t=5f43b9a3" alt="vuex"></p><p>其具有以下优势：</p><ul><li>能够在vuex中<strong>集中管理</strong>共享的数据，便于开发和后期进行维护</li><li>能够高效的实现组件之间的数据共享，提高开发效率（<strong>代码量</strong>）</li><li>存储在vuex中的数据是<strong>响应式</strong>的，当数据发生改变时，页面中的数据也会同步更新</li></ul><p><strong>什么样的数据适合存储在Vuex中？</strong></p><p>一般情况下，只有组件之间共享的数据才有必要存储到vuex中，对于组件中私有的数据依旧存储在组件自身的data中即可。</p><h2 id="vuex的安装及配置"><a href="#vuex的安装及配置" class="headerlink" title="vuex的安装及配置"></a>vuex的安装及配置</h2><p>vuex不是脚手架在安装项目的时候自带的，是一个选配的功能，默认是不被安装的（需要自己根据需要选择）。因此其安装和配置存在两种情况：</p><p><strong>情况1：在通过vue脚手架<code>vue create xxxx</code>的命令的时候，手动选择安装vuex【极力推荐】</strong>。好处在于不需要自己手动创建<code>store</code>目录及目录下的<code>index.js</code>文件。</p><p>情况2：在通过vue脚手架<code>vue create xxxx</code>的命令的时候，可能没有选择安装vuex，则这个时候我们有两种选择：</p><ul><li>删了重来，再建立项目的时候选择安装vuex</li><li>当然也可以通过命令来补救安装，但是通过命令后续安装的vuex，需要自己创建<code>store</code>目录和其下的<code>index.js</code>文件<ul><li>npm i -S vuex</li></ul></li></ul><h2 id="vuex核心"><a href="#vuex核心" class="headerlink" title="vuex核心"></a>vuex核心</h2><h3 id="state：提供唯一公共数据源，所有的共享数据都要统一放到state中进行存储"><a href="#state：提供唯一公共数据源，所有的共享数据都要统一放到state中进行存储" class="headerlink" title="state：提供唯一公共数据源，所有的共享数据都要统一放到state中进行存储"></a>state：提供唯一公共数据源，所有的共享数据都要统一放到state中进行存储</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中访问state数据的第一种方式（单个）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.全局数据名称</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中访问state数据的第二种方式（批量）</span></span><br><span class="line"><span class="comment">// 按需导入mapState函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 将全局函数映射为当前组件的计算属性</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>第二种方式映射过来的情况，其数据的使用方式如同在当前组件中使用自身的data数据一样（下同）</strong>。</p><ul><li>在视图中，就直接插值表达式</li><li>在js中就<code>this.xxxx</code></li></ul></blockquote><h3 id="mutation-s-：用于变更store中的数据（修改）"><a href="#mutation-s-：用于变更store中的数据（修改）" class="headerlink" title="mutation(s)：用于变更store中的数据（修改）"></a>mutation(s)：用于变更store中的数据（修改）</h3><ul><li>在Vuex中<strong>只能</strong>通过mutation变更store中的数据，不可以直接操作store中的数据</li><li>通过这种方式操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义mutations</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params">state[,arg]</span>)&#123;</span><br><span class="line">            <span class="comment">// 变更状态</span></span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中触发mutation的第一种方式</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>[,arg])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中触发mutation的第二种方式</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;reduce&#x27;</span>]),</span><br><span class="line">    <span class="title function_">handle1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">add</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handle2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">reduce</span>([arg])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>&#x3D;&#x3D;不要在mutation中写异步的代码&#x3D;&#x3D;</strong></p><p>在mutation中混合异步调用会导致你的程序很难调试。每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，<strong>给调试带来困难</strong>。</p></blockquote><h3 id="action-s-：用于处理-异步-操作任务"><a href="#action-s-：用于处理-异步-操作任务" class="headerlink" title="action(s)：用于处理&#x3D;&#x3D;异步&#x3D;&#x3D;操作任务"></a>action(s)：用于处理&#x3D;&#x3D;异步&#x3D;&#x3D;操作任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明action</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">addAsync</span>(<span class="params">context[,arg]</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>[,arg])</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中触发action</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispach</span>(<span class="string">&#x27;addAsync&#x27;</span>[,arg])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>action也是支持如同state、mutation一样的按需导入mapActions方式进行触发。</p></blockquote><h3 id="getter-s-：对store中已有的数据加工处理形成新的数据"><a href="#getter-s-：对store中已有的数据加工处理形成新的数据" class="headerlink" title="getter(s)：对store中已有的数据加工处理形成新的数据"></a>getter(s)：对store中已有的数据加工处理形成新的数据</h3><ul><li>对已有的数据进行加工除了，类似于Vue的计算属性</li><li>store数据发生变化，则getter中的数据也会跟着变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义getter</span></span><br><span class="line">....</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">showNum</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;当前最新的数量是【&#x27;</span> + state.<span class="property">count</span> + <span class="string">&#x27;】&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中访问getters数据的第一种方式</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.全局数据名称</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中访问getters数据的第二种方式</span></span><br><span class="line"><span class="comment">// 按需导入mapGetters函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 将全局函数映射为当前组件的计算属性</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;showNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li><p>为什么有状态的模块化？</p><ul><li>主要是因为项目是多人协作开发的，如果都去修改一个文件，则经常会出现代码冲突，而解决冲突比较费事费力。</li></ul></li><li><p>使用步骤</p><ul><li>建立src&#x2F;store&#x2F;modules文件夹（名称随意）</li><li>在modules文件夹中建立需要的模块文件（命名以功能为导向，记得导出一下）</li></ul></li><li><p>注意点1（了解）：</p><ul><li>在模块的时候，因为多人合作，不能的开发者之前并不清楚其他怎么给方法和数据源进行命名，这样的话就有一个问题：万一名称重名怎么办？如果冲突了，会执行以下合并策略：<ul><li>state数据源肯定不会冲突，它以模块进行保存</li><li>mutations、actions的方法不会以模块为单位进行保存，如果出现同名则可能会冲突。vuex会先将这些同名的方法，整合到一起，都去执行。会先执行index.js中的，再去执行其他的。</li><li>getters如果出现冲突，不给解决，直接报错。</li></ul></li><li>因为多人合作可能出现命名的冲突，特别针对getters，vuex模块化的时候支持使用<code>命名空间</code><ul><li>默认是没有给模块开启命名空间的</li><li>如果需要请自己开启，通过模块对象的属性“namespaced”，将其值设置为true</li><li>命名空间的名称，是模块的名字（模块里面属性的名字）</li></ul></li></ul></li><li><p>注意点2：由于模块使用了命名空间，所以之前没有模块化的使用方式（this、map系列）在模块化之后都要发生对应的变化</p><ul><li>state<ul><li>this形式：this.$store.state.空间名.xxxx</li><li>map系列：…mapSate(空间名,[xxxx,yyyy,zzzz…])</li></ul></li><li>mutations<ul><li>this形式：this.$store.commit(“空间名&#x2F;方法名”, “参数”);</li><li>map系列：…mapMutations(“空间名”,[“方法名”,…]),</li></ul></li><li>actions<ul><li>this形式：this.$store.dispatch(“空间名&#x2F;方法名”, “参数”);</li><li>map系列：…mapActions(“空间名”,[“方法名”,…]),</li></ul></li><li>getters<ul><li>this形式：this.$store.getters[“空间名&#x2F;属性名”]</li><li>map形式：…mapActions(“空间名”, [“属性名”,….]),</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue/React的组件传值</title>
      <link href="/posts/ef383857.html"/>
      <url>/posts/ef383857.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a><strong>props</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件标签 :变量名=&quot;值&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span> <span class="attr">v-bind:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Son1</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;#son1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 组件里props选项接收</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;age&#x27;</span>,],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&quot;son&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;father&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Son1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><h3 id="emit自定义事件"><a href="#emit自定义事件" class="headerlink" title="$emit自定义事件"></a><strong>$emit</strong>自定义事件</h3><ul><li>子组件给父组件发送自定义事件</li><li>父组件在子组件标签上监听自定义事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 监听子组件传的自定义事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span> @<span class="attr">savemsgfromson</span>=<span class="string">&quot;save&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendEventToFather(toFather)&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Son1</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;#son1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&quot;son&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">toFather</span>:<span class="string">&quot;少抽点烟&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sendEventToFather</span>(<span class="params">message</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 给父组件发送自定义事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;savemsgfromson&#x27;</span>,message)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;father&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Son1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">save</span>(<span class="params">message</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="任何关系组件传值（EventBus和vuex）"><a href="#任何关系组件传值（EventBus和vuex）" class="headerlink" title="任何关系组件传值（EventBus和vuex）"></a>任何关系组件传值（EventBus和vuex）</h2><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><ul><li>EventBus称之为中央事件总线</li><li>通过一个空的Vue实例作为中央事件总线</li><li>$emit自定义事件用来发送数据</li><li>$on触发自定义事件来接收数据</li><li>$off销毁自定义事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son1</span>&gt;</span><span class="tag">&lt;/<span class="name">Son1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son2</span>&gt;</span><span class="tag">&lt;/<span class="name">Son2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;deb&quot;</span>&gt;</span>销毁事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Son1模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toson2&quot;</span>&gt;</span>toSon2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Son2模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建中央事件总线</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Son1</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;#son1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&quot;son1&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">toson2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 自定义事件用来发送数据</span></span></span><br><span class="line"><span class="language-javascript">                eventBus.$emit(<span class="string">&#x27;sendtoson2&#x27;</span>,<span class="string">&#x27;弟弟&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Son2</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;#son2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&quot;son2&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在mounted中触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 触发自定义事件来接收数据</span></span></span><br><span class="line"><span class="language-javascript">            eventBus.$on(<span class="string">&#x27;sendtoson2&#x27;</span>,<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Son1</span>,<span class="title class_">Son2</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">deb</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                eventBus.$off(<span class="string">&#x27;sendtoson2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;销毁事件&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p><a href="https://huang_jian_hua.gitee.io/posts/db4c4335">链接</a></p><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="父传子-1"><a href="#父传子-1" class="headerlink" title="父传子"></a>父传子</h2><blockquote><ul><li><p>使用props进行父传子</p></li><li><p>父组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Item&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">name</span>=<span class="string">&quot;林则徐&quot;</span> <span class="attr">next</span>=<span class="string">&quot;壁立千仞无欲则刚&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></li><li><p>子组件（函数）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">const</span> <span class="title function_">Item</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           海纳百川有容乃大，&#123;props.next&#125;。 -- &#123;props.name&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   );</span><br><span class="line">&gt;&#125;;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span>;</span><br></pre></td></tr></table></figure></li><li><p>子组件（类）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">Item</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                海纳百川有容乃大，&#123;this.props.next&#125;。 -- &#123;this.props.name&#125;</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       );</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>使用ref(待编辑)</li></ul><h2 id="子传父-1"><a href="#子传父-1" class="headerlink" title="子传父"></a>子传父</h2><p>该传值的实现可以分为两种，思想大致如下：</p><ul><li>（父主动获取子的数据）父通过<code>ref</code>标记子组件，随后通过子组件实例对象获取子组件的数据</li><li>在父组件中预埋一个修改父组件自身的方法，将该方法以<code>props</code>的形式传递给子组件，子组件收到方法时去调用，并且将自己需要给父的数据以实参的形式给这个方法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件通信：子-父传值</span></span><br><span class="line"><span class="comment">// 1. 方式有两种，思路与前面基本一致</span></span><br><span class="line"><span class="comment">//      方法1：通过ref对象，给子组件绑定ref对象以获取整个子组件实例，也就获取到了子的state，进而可以获取state中的数据（被动，父去取的）</span></span><br><span class="line"><span class="comment">//      方法2：同时属性传递方法，方法依旧需要子去执行，但是子需要将自己的数据传递给该方法，由父接收并且可以打印输出（主动，子给父的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子组件的ref对象</span></span><br><span class="line">    child = <span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;this.child&#125;</span> <span class="attr">fun</span>=<span class="string">&#123;this.SonSetMsg.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 方法1：父主动去获取子的数据 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getMsgFromSon.bind(this)&#125;</span>&gt;</span>子： 还钱！爸<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：父主动去获取子的数据</span></span><br><span class="line">    <span class="title function_">getMsgFromSon</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">child</span>.<span class="property">current</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：父亲准备一个篮子，空的，需要子往里放东西</span></span><br><span class="line">    <span class="title class_">SonSetMsg</span>(msg) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;后来学会了做空，股票涨的时候也会赔钱&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setMsg.bind(this)&#125;</span>&gt;</span>子把数据放篮子里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法2：子存放数据</span></span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">fun</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Father</span>;</span><br></pre></td></tr></table></figure><h2 id="跨组件传值"><a href="#跨组件传值" class="headerlink" title="跨组件传值"></a>跨组件传值</h2><p>网址：<a href="https://zh-hans.reactjs.org/docs/context.html">https://zh-hans.reactjs.org/docs/context.html</a></p><p>在react没有类似vue中的事件总线来解决这个问题。在实际的项目中，当需要组件间跨级访问信息时，如果还使用组件层层传递props，此时代码显得不那么优雅，甚至有些冗余。在react中，我们还可以使用context来实现跨级父子组件间的通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line"><span class="title class_">Provider</span>,</span><br><span class="line"><span class="title class_">Consumer</span></span><br><span class="line">&#125; = <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure><blockquote><p>提示：在React的context中，数据被看成了商品，发布数据的组件会用provider身份（卖方），接收数据的组件使用consumer身份（卖方）。</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/6e6a35f08f8620236171af7b7df86c6e497fad47.png?sign=75f71781d763be66f76b1ff2a37791d1&t=5f98f468"></p><ul><li>创建Context对象</li></ul><p>当React渲染一个订阅了这个Context对象的组件，这个组件会从组件树中离自身最近的那个匹配的Provider中读取到当前的context值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局context</span></span><br><span class="line"><span class="comment">// 由于这个操作后期可能被复用，建议独立文件去创建。此处以`src/Context/index.js`为例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure><ul><li>发布消息</li></ul><p>在App.jsx组件中发布消息，这样所有的组件都可以消费它的消息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp1</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp2</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp2&quot;</span>;</span><br><span class="line"><span class="comment">// 导入context对象</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;./Context/index&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">Provider</span> &#125; = context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">12345</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Cmp6</span>&gt;</span><span class="tag">&lt;/<span class="name">Cmp6</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Cmp7</span>&gt;</span><span class="tag">&lt;/<span class="name">Cmp7</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>组件消费</li></ul><p>在子组件中通过Api完成消费动作，从而实现消息通信。消费的方式有2种：</p><p>方式1：通过组件消费</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;../Context/index&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">Consumer</span> &#125; = <span class="title class_">ContextObj</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cmp1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;(value) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">div</span>&gt;</span>获取到的值是：&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cmp1</span>;</span><br></pre></td></tr></table></figure><p>方式2：通过绑定静成属性来消费</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;../Context/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cmp2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> contextType = <span class="title class_">ContextObj</span>;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.context&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cmp2</span>;</span><br></pre></td></tr></table></figure><h2 id="任何关系组件传值"><a href="#任何关系组件传值" class="headerlink" title="任何关系组件传值"></a>任何关系组件传值</h2><p>Redux</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro安装后必须做的事情</title>
      <link href="/posts/15bbee35.html"/>
      <url>/posts/15bbee35.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h2><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><h2 id="添加-archlinuxcn-源-antergos源-arch4edu源"><a href="#添加-archlinuxcn-源-antergos源-arch4edu源" class="headerlink" title="添加 archlinuxcn 源,antergos源,arch4edu源"></a>添加 archlinuxcn 源,antergos源,arch4edu源</h2><ul><li><p>编辑 <code>/etc/pacman.conf</code> 添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">#中科大源</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class="line">#清华源</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br><span class="line"></span><br><span class="line">[antergos]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/antergos/$repo/$arch</span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch</span><br></pre></td></tr></table></figure></li><li><p>防止签名错误</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman-mirrors -g</span><br></pre></td></tr></table></figure><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Syyu</span><br></pre></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul><li><p><code>sudo pacman -S base-devel</code></p></li><li><p>包管理工具  <strong>yay</strong>  <code>sudo pacman -S yay</code></p></li><li><p>显示有关相应系统的简要信息工具 <strong>neofetch</strong> <code>yay -S neofetch</code></p></li><li><p>谷歌浏览器 <code>yay -S google-chrome</code></p></li><li><p><strong>neovim</strong> <code>yay -S neovim</code></p></li><li><p>中文输入法 <strong>fcitx-im</strong> <code>yay -S fcitx-im</code></p><ul><li><p>设置 IM 环境变量</p></li><li><p><code>nvim ~/.pam_environment</code> 添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br></pre></td></tr></table></figure></li><li><p>重启电脑</p></li></ul></li><li><p>安装 fcitx 的GUI配置工具 <code>yay -S kcm-fcitx fcitx-configtool</code></p></li><li><p>Fcitx 自带剪贴板，其快捷键为 <code>Ctrl + ;</code>, 小小功能拯救世界。</p></li><li><p>云拼音 <strong>fcitx-cloudpinyin</strong> <code>yay -S fcitx-cloudpinyin</code></p><ul><li>安装好后重启fcitx,进入配置切换云拼音来源为百度，默认是Google</li></ul></li><li><p>终端文件管理器 <strong>ranger</strong> <code>yay -S ranger</code></p></li><li><p>windows模拟器 <strong>wine</strong> <code>yay -S wine wine-gecko wine-mono</code></p></li><li><p><strong>ocs-url</strong> <code>yay -S ocs-url</code></p></li><li><p><strong>nodejs</strong> <code>yay -S nodejs npm</code></p></li><li><p>deb包转换工具 <strong>debtap</strong> <code>yay -S debtap</code></p></li><li><p><strong>dmenu</strong> <strong>rofi</strong> <strong>feh</strong> <strong>picom</strong> <strong>w3m</strong> <strong>python-pip</strong> <strong>bat</strong></p></li><li><p><strong>deepin-wine-qq</strong> 安装好后是一个安装包，安装包安装好后重启系统或者等一会才能打开，不然会报错，报错就重启系统就行了</p></li><li><p><strong>ffmpegthumbnailer</strong></p></li><li><p><strong>mpv</strong> <strong>ttf-font-awesome</strong> <strong>ttf-font-icons</strong></p></li><li><p><strong>xorg-xrandr</strong></p></li><li><p><strong>gvim</strong></p></li><li><p><code>pip install quickswitch-i3 i3-py</code> 在用demu的时候使用的脚本</p></li><li><p><code>yay -S wqy-microhei wqy-bitmapfont wqy-zenhei wqy-microhei-li</code></p></li><li><p><code>yay -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</code></p></li></ul><h2 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h2><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><ul><li><code>git clone https://gitee.com/huang_jian_hua/oh-my-zsh.git</code></li><li>运行 <code>oh-my-zsh/tools/install.sh</code></li><li>安装完毕删除 <strong>oh-my-zsh</strong> 文件夹</li><li>使用<strong>konsole</strong>的需手动更改bash为zsh</li></ul><h3 id="安装语法高亮和自动建议插件"><a href="#安装语法高亮和自动建议插件" class="headerlink" title="安装语法高亮和自动建议插件"></a>安装语法高亮和自动建议插件</h3><ul><li><p>oh-my-zsh插件安装方法</p><ol><li>将插件放到<code>~/.oh-my-zsh/custom/plugins/</code>下</li><li>在配置文件<code>~/.zshrc</code>里添加插件名称</li></ol></li><li><p>进入 <code>~/.oh-my-zsh/custom/plugins/</code></p></li><li><p>自动建议 <code>git clone https://gitee.com/huang_jian_hua/zsh-autosuggestions.git</code></p></li><li><p>语法高亮 <code>git clone https://gitee.com/huang_jian_hua/zsh-syntax-highlighting.git</code></p></li><li><p>配置文件 <strong>71行</strong> 修改为<code>plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</code></p></li><li><p>重启终端</p></li></ul><h3 id="配置zsh主题"><a href="#配置zsh主题" class="headerlink" title="配置zsh主题"></a>配置zsh主题</h3><ul><li><code>.zshrc</code> 文件第<strong>11</strong>行 <code>ZSH_THEME=&quot;robbyrussell&quot;</code></li><li>修改成<strong>random</strong>为随机主题</li><li>可填参数在<code>~/.oh-my-zsh/themes</code>文件夹里面可自行查看</li><li>自定义的主题应该放在<code>~/.oh-my-zsh/custom/themes</code></li></ul><h2 id="配置ranger"><a href="#配置ranger" class="headerlink" title="配置ranger"></a>配置ranger</h2><ul><li>生成配置文件<ul><li><code>ranger --copy-config=all</code></li></ul></li><li>安装文件图标<ul><li>终端字体需换成Nerd Font字体</li><li>运行以下两句命令<ul><li><code>git clone https://gitee.com/huang_jian_hua/ranger_devicons.git ~/.config/ranger/plugins/ranger_devicons</code></li><li><code>echo &quot;default_linemode devicons&quot; &gt;&gt; $HOME/.config/ranger/rc.conf</code></li></ul></li><li>重启ranger</li></ul></li><li>修改配置文件 <strong>rc.conf</strong> 和 <strong>scope.sh</strong></li></ul><h2 id="美化折腾"><a href="#美化折腾" class="headerlink" title="美化折腾"></a>美化折腾</h2><h3 id="动态壁纸"><a href="#动态壁纸" class="headerlink" title="动态壁纸"></a>动态壁纸</h3><ol><li><p>右键桌面<br> <a href="https://imgtu.com/i/gYPh0f"><img src="https://z3.ax1x.com/2021/05/09/gYPh0f.png" alt="gYPh0f.png"></a></p></li><li><p>获取新插件<br> <a href="https://imgtu.com/i/gYPRXt"><img src="https://z3.ax1x.com/2021/05/09/gYPRXt.png" alt="gYPRXt.png"></a></p></li><li><p>安装插件<br> <a href="https://imgtu.com/i/gYPfnP"><img src="https://z3.ax1x.com/2021/05/09/gYPfnP.png" alt="gYPfnP.png"></a></p></li><li><p>选择壁纸类型<br> <a href="https://imgtu.com/i/gYP26I"><img src="https://z3.ax1x.com/2021/05/09/gYP26I.png" alt="gYP26I.png"></a></p></li><li><p>选择视频文件<br> <a href="https://imgtu.com/i/gYPg1A"><img src="https://z3.ax1x.com/2021/05/09/gYPg1A.png" alt="gYPg1A.png"></a></p></li></ol><h2 id="如果是在vmware的话-安装open-vm-tools"><a href="#如果是在vmware的话-安装open-vm-tools" class="headerlink" title="如果是在vmware的话,安装open-vm-tools"></a>如果是在vmware的话,安装open-vm-tools</h2><p><code>yay -S open-vm-tools</code><br><code>systemctl enable vmtoolsd.service</code><br><code>systemctl start vmtoolsd.service</code></p>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7/10 qutebrowser安装和使用</title>
      <link href="/posts/c8833c04.html"/>
      <url>/posts/c8833c04.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>使用 powershell 的包管理工具安装<br>  <code>Install-Package qutebrowser</code></p></li><li><p>使用 Scoop 安装</p><p>  <code>scoop bucket add extras</code><br>  <code>scoop install qutebrowser</code></p></li><li><p>使用 Chocolatey 安装</p><p>  <code>choco install qutebrowser</code></p></li><li><p>手动安装</p><ol><li>安装python3.6以上的版本</li><li>更换pip源</li><li>克隆到本地:<code>git clone https://github.com/qutebrowser/qutebrowser.git</code></li><li>进入项目根目录:<code>cd qutebrowser</code></li><li>安装生成文档的工具:<code>pip install asciidoc</code></li><li><code>python3 scripts/mkvenv.py</code></li></ol></li><li><p>注意</p><ul><li>除了<code>手动安装</code>其他方式安装的都是基于<code>python3.9</code>版本的</li><li>所以只有win7需要手动安装</li><li>手动安装的启动程序在项目根目录下的<code>.venv\Scripts</code>目录中有个<code>qutebrowser.exe</code></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p><a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100106.jpg"><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100106.jpg" alt="20210530094550.png"></a></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li>进入设置界面步骤:按下<code>o</code>,输入<code>qute://settings</code>，回车</li><li>修改首页和搜索引擎(eg:不同搜索引擎url格式不同)<ul><li>首页<br>   [![20210530094728.png](<a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png">https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png</a></li></ul></li></ol><p>)](<a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png">https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png</a><br>)</p><ul><li>搜索引擎<br>   <a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100105.jpg"><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100105.jpg" alt="20210530094816.png"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QuteBrowser </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window安装ctags</title>
      <link href="/posts/f9fa4d10.html"/>
      <url>/posts/f9fa4d10.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用scoop安装"><a href="#使用scoop安装" class="headerlink" title="使用scoop安装"></a>使用scoop安装</h2><p><code>scoop install ctags</code></p><h2 id="下载文件安装"><a href="#下载文件安装" class="headerlink" title="下载文件安装"></a>下载文件安装</h2><ul><li>官网：<code>http://ctags.sourceforge.net/</code></li><li>下载对应系统的压缩包</li><li>解压并把解压文件夹加入环境变量</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>在需要使用的文件夹里运行<code>ctags -R</code>生成索引文件</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctags </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署code-server</title>
      <link href="/posts/ebb73e0.html"/>
      <url>/posts/ebb73e0.html</url>
      
        <content type="html"><![CDATA[<h2 id="服务器放行8080端口"><a href="#服务器放行8080端口" class="headerlink" title="服务器放行8080端口"></a>服务器放行8080端口</h2><h2 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><h2 id="先启动一次，让他生成配置文件"><a href="#先启动一次，让他生成配置文件" class="headerlink" title="先启动一次，让他生成配置文件"></a>先启动一次，让他生成配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-server --bind-addr=0.0.0.0:8080</span><br></pre></td></tr></table></figure><h2 id="修改配置文件-config-code-server-config-yaml"><a href="#修改配置文件-config-code-server-config-yaml" class="headerlink" title="修改配置文件**~&#x2F;.config&#x2F;code-server&#x2F;config.yaml**"></a>修改配置文件**~&#x2F;.config&#x2F;code-server&#x2F;config.yaml**</h2><ul><li>bind-addr为0.0.0.0才能远程访问</li><li>password设置密码<blockquote><p>修改后</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="string">&gt;auth:</span> <span class="string">password</span></span><br><span class="line"><span class="string">&gt;password:</span> <span class="number">123456</span></span><br><span class="line"><span class="string">&gt;cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="配置系统管理进程"><a href="#配置系统管理进程" class="headerlink" title="配置系统管理进程"></a>配置系统管理进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl status code-server@<span class="variable">$USER</span> <span class="comment"># 查看 code-server 进程状态</span></span><br><span class="line">systemctl start code-server@<span class="variable">$USER</span>    <span class="comment"># 启动 code-server 进程</span></span><br><span class="line">systemctl stop code-server@<span class="variable">$USER</span>    <span class="comment"># 停止 code-server 进程</span></span><br><span class="line">systemctl restart code-server@<span class="variable">$USER</span>    <span class="comment"># 重启 code-server 进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> code-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aliyun+Ubuntu20.04+xfce4+vnc+xdrp</title>
      <link href="/posts/6aafa0a1.html"/>
      <url>/posts/6aafa0a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云安全组添加端口5901-3389"><a href="#阿里云安全组添加端口5901-3389" class="headerlink" title="阿里云安全组添加端口5901,3389"></a>阿里云安全组添加端口5901,3389</h1><h1 id="apt-update-apt-upgrade-–fix-missing"><a href="#apt-update-apt-upgrade-–fix-missing" class="headerlink" title="apt update &amp;&amp; apt upgrade –fix-missing"></a>apt update &amp;&amp; apt upgrade –fix-missing</h1><h1 id="apt-install-xfce4-xfce4-terminal"><a href="#apt-install-xfce4-xfce4-terminal" class="headerlink" title="apt install xfce4 xfce4-terminal"></a>apt install xfce4 xfce4-terminal</h1><h1 id="apt-install-tightvncserver-xdrp"><a href="#apt-install-tightvncserver-xdrp" class="headerlink" title="apt install tightvncserver xdrp"></a>apt install tightvncserver xdrp</h1><h1 id="vncserver"><a href="#vncserver" class="headerlink" title="vncserver"></a>vncserver</h1><h1 id="此时可以连接但是是灰色的"><a href="#此时可以连接但是是灰色的" class="headerlink" title="此时可以连接但是是灰色的"></a>此时可以连接但是是灰色的</h1><h1 id="vncserver-kill-1"><a href="#vncserver-kill-1" class="headerlink" title="vncserver -kill :1"></a>vncserver -kill :1</h1><h1 id="mv-vnc-xstartup-vnc-xstartup-bak"><a href="#mv-vnc-xstartup-vnc-xstartup-bak" class="headerlink" title="mv ~&#x2F;.vnc&#x2F;xstartup ~&#x2F;.vnc&#x2F;xstartup.bak"></a>mv ~&#x2F;.vnc&#x2F;xstartup ~&#x2F;.vnc&#x2F;xstartup.bak</h1><h1 id="vim-vnc-xstartup"><a href="#vim-vnc-xstartup" class="headerlink" title="vim ~&#x2F;.vnc&#x2F;xstartup"></a>vim ~&#x2F;.vnc&#x2F;xstartup</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></span><br><span class="line"><span class="comment"># unset SESSION_MANAGER</span></span><br><span class="line"><span class="comment"># unset DBUS_SESSION_BUS_ADDRESS </span></span><br><span class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></span><br><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</span><br><span class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</span><br><span class="line">xsetroot -solid grey</span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">x-terminal-emulator -geometry 80x24+10+10 -<span class="built_in">ls</span> -title <span class="string">&quot;<span class="variable">$VNCDESKTOP</span> Desktop&quot;</span> &amp;</span><br><span class="line"><span class="comment"># x-window-manager &amp;</span></span><br><span class="line">x-session-manager &amp; </span><br><span class="line">xfdesktop &amp; xfce4-panel &amp;     </span><br><span class="line">xfce4-menu-plugin &amp;     </span><br><span class="line">xfsettingsd &amp;     </span><br><span class="line">xfconfd &amp;     </span><br><span class="line">xfwm4 &amp;</span><br></pre></td></tr></table></figure><h1 id="修改文件权限（无论什么用户都得修改）"><a href="#修改文件权限（无论什么用户都得修改）" class="headerlink" title="修改文件权限（无论什么用户都得修改）"></a>修改文件权限（无论什么用户都得修改）</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/.vnc/xstartup</span><br></pre></td></tr></table></figure><h1 id="重新运行vncserver就可以使用vncviewer连接vnc了"><a href="#重新运行vncserver就可以使用vncviewer连接vnc了" class="headerlink" title="重新运行vncserver就可以使用vncviewer连接vnc了"></a>重新运行<code>vncserver</code>就可以使用vncviewer连接vnc了</h1><h1 id="配置xdrp"><a href="#配置xdrp" class="headerlink" title="配置xdrp"></a>配置xdrp</h1><ul><li>echo “xfce4-session” &gt;~&#x2F;.xsession</li><li>在&#x2F;etc&#x2F;xrdp&#x2F;startwm.sh开头插入xfce4-session</li><li>sudo systemctl restart xrdp</li><li>使用win10自带远程桌面连接</li></ul><h1 id="配置vnc默认分辨率"><a href="#配置vnc默认分辨率" class="headerlink" title="配置vnc默认分辨率"></a>配置vnc默认分辨率</h1><ul><li>修改&#x2F;usr&#x2F;bin&#x2F;vncserver里的$geometry</li><li>$geometry &#x3D; “1920x1080”;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNC </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/posts/d8a440d1.html"/>
      <url>/posts/d8a440d1.html</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>官网：<a href="https://reactjs.org/">https://reactjs.org/</a></p><p>中文网（个人翻译站）：<a href="https://react.docschina.org/">https://react.docschina.org/</a></p><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p><strong>React起源于Facebook的内部项目</strong>，它是一个用于构建用户界面的javascript库，Facebook用它来架设公司的Instagram网站，并于2013年5月开源。</p><p>React拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。认为它可能是将来Web开发的主流工具<strong>之一</strong>。</p><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li>声明式</li></ul><p>你只需要描述UI看起来是什么样式，<strong>就跟写HTML一样</strong>，React负责渲染UI</p><ul><li>基于组件</li></ul><p>组件是React最重要的内容，组件表示页面中的部分内容</p><ul><li>学习一次，随处使用<ul><li>使用React可以开发Web应用—ReactJs</li><li>使用React可以开发移动端—react-native</li><li>可以开发VR应用—react 360</li></ul></li></ul><h2 id="3、React与传统MVC的关系"><a href="#3、React与传统MVC的关系" class="headerlink" title="3、React与传统MVC的关系"></a>3、React与传统MVC的关系</h2><p>React用于<strong>构建用户界面</strong>的JavaScript 库，它不是一个完整的MVC框架，最多可以认为是MVC中的V（View）。可以简单地理解为：React将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以<strong>组合、嵌套</strong>，就成了我们的页面。</p><p>Vue是一个框架。</p><p><strong>React可以说它不是框架，它只是一个构建页面的JavaScript库，但是外面也认为其是一个框架。</strong></p><h2 id="4、开发工具的安装"><a href="#4、开发工具的安装" class="headerlink" title="4、开发工具的安装"></a>4、开发工具的安装</h2><ul><li>Chrome 浏览器扩展：<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN">https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN</a></li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/c1407e83f4b0a56beca4baadaac2de471975a092.png?sign=6007a47eebf330bd919ee70a42746fe7&t=5f8ee1ad"></p><ul><li>vscode安装react开发扩展</li></ul><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/4d2506168810f2fb7195cd6b9f766ed998dc365d.png?sign=54df8319890c5709784d4eff96570639&t=5f8ee2a8"></p><h2 id="5、React初识"><a href="#5、React初识" class="headerlink" title="5、React初识"></a>5、React初识</h2><p>React开发需要引入多个依赖文件，其中react.js、react-dom.js这两个文件是我们创建react应用程序必须要引入的依赖文件。</p><ul><li><p>react.js</p><ul><li>核心，提供创建元素，组件等功能</li></ul></li><li><p>react-dom.js</p><ul><li>提供DOM相关功能</li></ul></li></ul><blockquote><p>注意：关于react外部js文件</p><ul><li>回头如果需要其他版本自己再去下<ul><li><a href="https://reactjs.org/docs/add-react-to-a-website.html">https://reactjs.org/docs/add-react-to-a-website.html</a></li></ul></li><li>网上找的（包扩我们发的）&#x3D;&#x3D;可能&#x3D;&#x3D;会出现文件下载不完整的情况，如果出现这种情况建议重新去下载</li></ul></blockquote><p>下载对应的react.js和react-dom.js的开发版本的js类库文件到本机中后，通过HTML的<code>script</code>标签引入到当前的网页中，如下（<strong>在引入对应的JavaScript文件时需要注意先后顺序的问题，先引核心文件，再引其他文件</strong>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// React 的核心库</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//DOM 相关的功能</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在HTML中定义reactjs渲染容器id和进行React实例化相关操作,完成helloworld显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入react相关的文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建虚拟dom</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// React.createElement(标签名称,对象形式的DOM属性信息,DOM中的内容/子DOM)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// React.createElement(标签名称,对象形式的DOM属性信息,DOM中的内容/子DOM,DOM中的内容/子DOM,...)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// React.createElement(标签名称,对象形式的DOM属性信息,[DOM中的内容/子DOM,DOM中的内容/子DOM,...])</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> vNode = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;&#125;, <span class="string">&quot;hello world&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取挂载点</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// const el = document.querySelector(&quot;#app&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ReactDOM.render(虚拟DOM,挂载点)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, el);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意，在react中，JavaScript代码部分里面如果涉及到DOM的class属性操作，请不要直接使用<code>class</code>，原因是这个<code>class</code>是es6里面的关键词，react里面需要使用<code>className</code>进行替换。所以，举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;<span class="attr">id</span>: <span class="string">&quot;hi&quot;</span>,<span class="attr">className</span>: <span class="string">&quot;cls&quot;</span>&#125;, <span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><h1 id="二、JSX语法"><a href="#二、JSX语法" class="headerlink" title="二、JSX语法"></a>二、JSX语法</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>由于通过React.createElement()方法创建的React元素有一些问题：代码比较繁琐，结构不直观，无法一眼看出描述的结构，不优雅，开发时写代码很不友好。</p><p>React使用JSX来替代常规的JavaScript，JSX可以理解为的JavaScript语法扩展，它里面的标签申明要符合XML规范要求（<strong>必须需要有一个唯一的根元素</strong>）。React不一定非要使用JSX，但它有以下优点：</p><ul><li><p>JSX执行<strong>更快</strong>，因为它在编译为JavaScript代码后进行了优化</p></li><li><p>它是类型安全的，在编译过程中就能发现错误</p></li><li><p>声明式语法更加直观，<strong>与HTML结构相同</strong>，<strong>降低了学习成本</strong>，提升开发效率速</p></li><li><p>jsx语法中一定要有一个<strong>顶级元素包裹（XML一大特点）</strong>，否则编译报错，程序不能运行</p></li></ul><h2 id="2、JSX重构Hello-world"><a href="#2、JSX重构Hello-world" class="headerlink" title="2、JSX重构Hello world"></a>2、JSX重构Hello world</h2><p>在项目中尝试JSX最快的方法是在页面中添加这个 <code>&lt;script&gt;</code> 标签，引入解析jsx语法的babel类库，注意后续的<code>&lt;script&gt;</code>标签块中使用了JSX语法，则一定要申明类型<code>type=&quot;text/babel&quot;</code>，否则babel将不进行解析jsx语法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重构hello world代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 引入react相关的文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- script标签上一定要写上 type=&quot;text/babel&quot; --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 创建虚拟dom</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> vNode = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// const vNode = (&lt;div&gt;hello world&lt;/div&gt;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 获取挂载点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 页面渲染</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, el);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在写jsx语法的时候需要注意，如果对应的dom有多个层次，建议给整体添加小括号，这样的话允许通过格式化插件将代码格式化成多行，这样的好处，我们可以清晰的看清dom的层次结构。【建议】</p><h2 id="3、JSX语法基础"><a href="#3、JSX语法基础" class="headerlink" title="3、JSX语法基础"></a>3、JSX语法基础</h2><h3 id="3-1、插值表达式"><a href="#3-1、插值表达式" class="headerlink" title="3.1、插值表达式"></a>3.1、插值表达式</h3><p>在JSX语法中，要把JS代码写到<code>&#123; &#125;</code>中，所有标签必须要闭合。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 语法</span></span><br><span class="line"><span class="keyword">var</span> vNode = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 我是注释 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;num&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 三目运算 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;bool ? &quot;条件为真&quot; : &quot;条件为假&quot;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><p>注意：在jsx语法中不支持“&#x2F;&#x2F;”注释形式以及“<!---->”注释形式，只能使用“{&#x2F;* *&#x2F;}”注释形式。</p><h3 id="3-2、属性绑定"><a href="#3-2、属性绑定" class="headerlink" title="3.2、属性绑定"></a>3.2、属性绑定</h3><blockquote><p>对标：Vue2的<code>v-bind</code>指令</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = <span class="string">&quot;http://www.mobiletrain.org/images/index/new_logo.png&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> style = &#123; <span class="attr">fontSize</span>: <span class="string">&quot;20px&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;red&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> html = <span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度一下&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line"><span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> vNode = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; /*标签的属性如果需要被JSX解析，则属性的值不能加引号*/ &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>北川3次地震为汶川地震余震<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;cl1&quot;</span>&gt;</span>iPhone12开售排队<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; /*</span></span><br><span class="line"><span class="language-xml">             输出HTML字符串（了解）</span></span><br><span class="line"><span class="language-xml">             注意点：react默认不解析html字符串</span></span><br><span class="line"><span class="language-xml">             原因是：安全问题</span></span><br><span class="line"><span class="language-xml">             如果真要输出解析的html字符串请按照以下的语法</span></span><br><span class="line"><span class="language-xml">        */ &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:html&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 渲染页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, app);</span><br></pre></td></tr></table></figure><h3 id="3-3、数组渲染"><a href="#3-3、数组渲染" class="headerlink" title="3.3、数组渲染"></a>3.3、数组渲染</h3><h4 id="3-3-1、直接渲染"><a href="#3-3-1、直接渲染" class="headerlink" title="3.3.1、直接渲染"></a>3.3.1、直接渲染</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;罗翔&quot;</span>];</span><br><span class="line"><span class="comment">// 获取挂载点</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line"><span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> vNode = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 直接输出数据 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;arr&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, el);</span><br></pre></td></tr></table></figure><p>上述输出的结果如下：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/300444482c3a5c11e3fdf15003ba6142ba0b951d.png?sign=14d92baf0356eaf1441e41093edb4065&t=5f92987b"></p><h4 id="3-3-2、处理并渲染"><a href="#3-3-2、处理并渲染" class="headerlink" title="3.3.2、处理并渲染"></a>3.3.2、处理并渲染</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;罗翔&quot;</span>];</span><br><span class="line"><span class="comment">// 获取挂载点</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line"><span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> vNode = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 处理并渲染 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 给循环体包裹一层&#123;&#125;，不包就错 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                /* </span></span><br><span class="line"><span class="language-xml">                给循环体包裹一层&#123;&#125;，不包就错，如果循环体就1行</span></span><br><span class="line"><span class="language-xml">            &#123;&#125;与return可以被省略（箭头函数）</span></span><br><span class="line"><span class="language-xml">            */</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                arr.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vNode, el);</span><br></pre></td></tr></table></figure><h1 id="三、项目构建"><a href="#三、项目构建" class="headerlink" title="三、项目构建"></a>三、项目构建</h1><p>React团队推荐使用create-react-app（相当于vue的<code>vue-cli</code>）来创建React新的单页应用项目，它提供了一个<strong>零配置</strong>的现代构建设置。</p><p>React脚手架（create-react-app）意义：</p><ul><li><p>脚手架是官方提供，零配置，无需手动配置繁琐的工具即可使用</p></li><li><p>充分利用Webpack，Babel，ESLint等工具辅助项目开发</p></li><li><p>关注业务，而不是工具配置</p></li></ul><p>create-react-app会配置我们的开发环境，以便使我们能够使用最新的 JavaScript特性，提供良好的开发体验，并为生产环境优化你的应用程序。为了能够顺利的使用create-react-app脚手架，我们需要在我们的机器上安装Node &gt;&#x3D; 8.10 和 npm &gt;&#x3D; 5.6。</p><h2 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h2><p>在终端中使用以下命令来构建react项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">免安装形式</span></span><br><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面这种安装方式不需要全局安装create-react-app,如果需要全局安装，则可以执行下面的命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm i -g create-react-app</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create-react-app your-app</span></span><br></pre></td></tr></table></figure><p>项目创建需要消耗的时间可能会有点久，在项目创建完毕后可以执行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录</span></span><br><span class="line">cd my-app</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动项目</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/7e386902e80b9ef5ba3b68333fe7a44d4bd3eb33.png?sign=ef7d37b07b0a7dbae3f3f22912b5c9ed&t=5f93d66a"></p><blockquote><p>提示：如果本机安装了<code>yarn</code>（一款Facebook自家的包管理工具，类似npm），则安装好给予的项目启动命令提示是<code>yarn start</code>。</p></blockquote><h2 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h2><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/d7961534de022d85cb6692d86bcd12573ab86e2b.png?sign=c6f3956be4f2b83e38b7ded996d9a923&t=5f93d80d"></p><ul><li>public目录下<ul><li>manifest.json：清单文件（说明性文件），谷歌要求有这个文件，但是这个文件对开发者来讲没什么用。</li><li>robots.txt：用于声明当前项目哪些路径、目录允许搜索引擎抓取。</li></ul></li><li>src目录下<ul><li><code>*.css</code>：样式文件</li><li>App.js：类似于App.vue，就是react里面的根组件（<strong>在react中，组件后缀是js，但是以后写react组件的时候后缀请使用jsx，为了便于区分组件与封装的js文件</strong>）</li><li>App.test.js：测试文件（可以删除）</li><li>index.js：类似于main.js，是项目执行的入口文件（打包入口）</li><li>reportWebVitals.js：谷歌新增的性能优化库文件（可以不要）</li><li>setupTests.js：针对项目index.js的一个单元测试文件（可以不要）</li></ul></li></ul><blockquote><p>了解了react的目录结构后，可以对初始化的项目进行文件清理。<strong>此处将<code>src</code>与<code>public</code>目录中的内容全部删除即可，后期如果需要自己往里面写内容。</strong></p></blockquote><h1 id="四、组件"><a href="#四、组件" class="headerlink" title="四、组件"></a>四、组件</h1><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/09/279e26e948d53d33a2a05e10e7c29aa736fe80a1.png?sign=9f63925b42a763bb945ad25cda41928f&t=5f5073bf" alt="组件"></p><p>组件允许我们将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。从概念上类似于JavaScript函数，它接受任意的入参（props），并返回用于描述页面展示内容的React元素（JSX）。</p><p>在react中，组件的形式有2种：</p><ul><li>函数组件（拥抱函数式开发方式，面向过程）<ul><li>无状态（函数组件也被称之为无状态组件）</li><li>无生命周期</li></ul></li><li>类组件（面向对象）<ul><li>有状态</li><li>有生命周期</li></ul></li></ul><h2 id="1、组件的创建方式"><a href="#1、组件的创建方式" class="headerlink" title="1、组件的创建方式"></a>1、组件的创建方式</h2><blockquote><p>在react17之后，允许在项目不用“import React from “react”;”，但是在之前的版本是不行的。建议写，肯定不会错。</p></blockquote><h3 id="1-1、函数创建组件"><a href="#1-1、函数创建组件" class="headerlink" title="1.1、函数创建组件"></a>1.1、函数创建组件</h3><p>通过函数创建的组件有以下特点：</p><ul><li>函数组件（无状态组件）：使用JS的函数创建组件</li><li>函数名称以大写字母开头（建议）</li><li>函数组件<strong>必须有返回值</strong>，表示该组件的结构（虚拟DOM），且内容必须有顶级元素</li><li>函数组件是没有生命周期的</li></ul><p>例如，新建组件文件<code>src/App.jsx</code>：</p><blockquote><p>约定：组件后缀可以是<code>.js</code>也可以是<code>.jsx</code>，为了方便区分组件与项目的业务代码，建议组件用<code>.jsx</code>，业务代码后缀用<code>.js</code>。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 函数名首字母必须大写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是第一个函数组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>要想输出效果，可以再创建项目入口文件<code>src/index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>注意，由于之前清理了项目，当前项目中现在是没有挂载点的，所以需要在<code>public/</code>下创建一个html文件<code>index.html</code>，在其body中设置一个挂载位置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2、类组件"><a href="#1-2、类组件" class="headerlink" title="1.2、类组件"></a>1.2、类组件</h3><p>类组件有以下特点：</p><ul><li><p>使用ES6语法的class创建的组件（有状态组件）</p></li><li><p>类名称为大写字母开头（建议）</p></li><li><p>类组件要继承React.Component父类，从而可以使用父类中提供的方法或者属性</p></li><li><p>类组件<strong>必须</strong>提供render方法，用于页面结构渲染，结构必须要有顶级元素，且必须return去返回</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 创建class类，继承React.Component，在里面提供render方法，在return里面返回内容</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是第一个类组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>除了上述的写法以外，还可以对<code>React.Component</code>进行按需导入，写成以下形式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入react和Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是第一个类组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="2、组件传值（父-子）"><a href="#2、组件传值（父-子）" class="headerlink" title="2、组件传值（父-子）"></a>2、组件传值（父-子）</h2><p>组件间传值，在React中是通过<strong>只读</strong>属性props来完成数据传递的。</p><p>props：接受任意的入参，并返回用于描述页面展示内容的React元素。</p><h3 id="2-1、函数组件"><a href="#2-1、函数组件" class="headerlink" title="2.1、函数组件"></a>2.1、函数组件</h3><p>函数组件传值使用props：以形参的形式给函数传递<code>props</code>参数。（与vue的思想是一样的）</p><p>例如，有子组件<code>src/Components/Item.jsx</code>，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Item</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            海纳百川有容乃大，&#123;props.next&#125;。 -- &#123;props.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span>;</span><br></pre></td></tr></table></figure><p>要想在父组件中给其传递<code>name</code>和<code>next</code>值，则父组件<code>src/App.jsx</code>可以写成：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Item&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">name</span>=<span class="string">&quot;林则徐&quot;</span> <span class="attr">next</span>=<span class="string">&quot;壁立千仞无欲则刚&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><blockquote><p>React的父传子的方式与Vue类似，都是通过调用子组件给子组件传递自定义属性方式进行传值的。</p></blockquote><h3 id="2-2、类组件"><a href="#2-2、类组件" class="headerlink" title="2.2、类组件"></a>2.2、类组件</h3><p>在父组件中通过自定义属性向子组件传值后，如何在子级类组件中获取传递过来的值呢？</p><p>我们可以在子级类组件中通过<code>this.props</code>属性来获取传递到子组件的值，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 海纳百川有容乃大，&#123;this.props.next&#125;。 -- &#123;this.props.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span>;</span><br></pre></td></tr></table></figure><h1 id="五、-事件处理"><a href="#五、-事件处理" class="headerlink" title="五、 事件处理"></a>五、 事件处理</h1><h2 id="1、事件绑定"><a href="#1、事件绑定" class="headerlink" title="1、事件绑定"></a>1、事件绑定</h2><p>React元素的事件处理和DOM元素的很相似，但是有一点语法上的不同。React元素的事件绑定采用<code>on+事件名</code>的方式来绑定一个事件，注意，这里和原生的事件是有区别的，<strong>原生的事件全是小写</strong>，如<code>onclick</code>, React里的事件是驼峰如<code>onClick</code>，<strong>React的事件并不是原生事件，而是合成事件</strong>。</p><p>在React里，类组件与函数组件绑定事件是差不多的，只是在类组件中绑定事件函数的时候需要用到<code>this</code>，代表指向当前的类的引用，在函数中不需要调用<code>this</code>关键词。</p><p><strong>函数组件事件绑定</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;海纳百川有容乃大，壁立千仞无欲则刚。&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>老林说<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>类组件事件绑定</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                // 使用JSX语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span>老林说<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;海纳百川有容乃大，壁立千仞无欲则刚。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ul><li>在写事件的时候，调用时如果不涉及传参的话，一定不要加<code>()</code>，加了就错。</li><li>在类组件中写事件处理程序的时候，不能写标准的<code>function xxx () &#123;&#125;</code>，写了就报错，一定要用简化的写法或者箭头函数形式</li><li>事件处理属性名称（事件绑定时用的属性）一定要使用符合react的小驼峰写法</li></ul></blockquote><h2 id="2、事件对象"><a href="#2、事件对象" class="headerlink" title="2、事件对象"></a>2、事件对象</h2><p>React中可以通过事件处理函数的参数获取到事件对象，它的事件对象叫做：合成事件，<strong>即兼容所有浏览器</strong>，无需担心跨浏览器兼容问题。这个对象和之前学习的事件对象所包含的方法和属性都基本一致，不同的是React中的事件对象并不是浏览器提供的，而是它自己内部所构建的。此事件对象拥有和浏览器原生事件相同的接口，包括<code>stopPropagation()</code>和 <code>preventDefault()</code>，如果我们想获取到原生事件对象，可以通过<code>e.nativeEvent</code>属性来进行获取。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span>老林说<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;海纳百川有容乃大，壁立千仞无欲则刚。&quot;</span>);</span><br><span class="line">        <span class="comment">// react构建的事件对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">        <span class="comment">// 浏览器原生的事件对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">nativeEvent</span>);</span><br><span class="line">        <span class="comment">// 事件对应的DOM对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">        <span class="comment">// 事件对应的DOM对象的内嵌HTML</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="3、事件方法传参"><a href="#3、事件方法传参" class="headerlink" title="3、事件方法传参"></a>3、事件方法传参</h2><p>React中对于事件方法传参的方式有着非常灵活的用法。以传递参数<code>username</code>值为<code>zhangsan</code>为例，常见的有以下几种方式：</p><ul><li><p>类组件特有的，通过<code>this.事件方法.bind</code>（bind为绑定数据）方式进行传参（<strong>推荐</strong>），例如：</p><ul><li><code>onClick=&#123;this.clickHandler.bind(this,&#39;zhangsan&#39;)&#125;</code><ul><li>对应的形参接收：<code>clickHandler(username)</code></li></ul></li><li><code>onClick=&#123;this.clickHandler.bind(this,&#39;zhangsan&#39;)&#125;</code><ul><li>对应的形参接收：<code>clickHandler(username,event)</code></li></ul></li></ul></li><li><p>两种组件类型都可以使用，使用箭头函数传参，例如：</p><ul><li><code>onClick=&#123;() =&gt; this.事件方法(&#39;zhangsan&#39;)&#125;</code><ul><li>对应的形参接收：<code>clickHandler(username)</code></li></ul></li><li><code>onClick=&#123;(e) =&gt; this.事件方法(&#39;zhangsan&#39;,e)&#125;</code><ul><li>对应的形参接收：<code>clickHandler(username,event)</code></li></ul></li></ul></li></ul><blockquote><p>关于this：指的是当前的这个组件对象，需要注意其指向问题。具体可以看下一节。</p></blockquote><h2 id="4、this指向问题"><a href="#4、this指向问题" class="headerlink" title="4、this指向问题"></a>4、this指向问题</h2><p>在JSX事件函数方法中的this，默认不会绑定this指向。如果我们忘记绑定，当我们调用这个函数的时候this的值为undefined。所以使用时一定要绑定好this的指向！</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/000bb708d55935b83a611f37318ee1d89c32bb26.png?sign=a0d08668cfee717e94664b0682dfaa23&t=5f95992c"></p><p>例如，像下面这段代码回调函数中的<code>this</code>输出为<code>undefined</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    老林说</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>解决上面出现的<code>this</code>指向问题的方式有以下几种：</p><ul><li>通过类组件的构造函数进行绑定</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="comment">// 解决this指向问题</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clickHandler</span> = <span class="variable language_">this</span>.<span class="property">clickHandler</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    老林说</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>使用bind绑定</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler.bind(this)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    老林说</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>使用箭头函数：方式1</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickHandler()&#125;&gt;老林说<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用箭头函数：方式2</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandler&#125;</span>&gt;</span>老林说<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clickHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><blockquote><p>后续使用this（特别是在自定义事件处理程序中），一定要注意绑定绑定this指向。</p></blockquote><h1 id="六、State状态"><a href="#六、State状态" class="headerlink" title="六、State状态"></a>六、State状态</h1><blockquote><p>如果将state与vue中的某个点做类比的话，则其相当于vue组件中的<code>data</code>，作用就是用于存储当前组件中需要用到的数据。</p></blockquote><p>状态就是组件描述某种显示情况的数据，由组件自己设置和更改，也就是说由组件自己维护，使用状态的目的就是为了在不同的状态下使组件的显示不同。</p><p><code>state</code>状态只在class类组件才有，<strong>函数组件没有此功能！</strong></p><h2 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h2><ul><li>状态（state）即数据，是组件内部的私有数据，只能在组件内部使用</li><li>state的值是对象，表示一个组件中可以有多个数据</li><li>通过this.state.xxx来获取状态（对应vue的this.xxxx）</li><li>state数据值<strong>只能</strong>通过this.setState()来修改（与vue不同）</li><li>Do not mutate state directly. Use setState()</li><li>state可以定义在类的构造方法中也可以写在类的成员属性中</li></ul><p><strong>第一种设置方式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数初始state</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>第二种设置方式（推荐）</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 常规初始化</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><blockquote><p>切记：不要直接通过<code>this.state.xxx = xxxx</code>形式去更改state的值。否则会包警告，警告如下：Do not mutate state directly. Use setState()。</p></blockquote><h2 id="2、修改状态"><a href="#2、修改状态" class="headerlink" title="2、修改状态"></a>2、修改状态</h2><p>在vue中，data属性是利用<code>Object.defineProperty</code>处理过的，更改data的数据的时候会触发数据的<code>getter</code>和<code>setter</code>，但是React中没有做这样的处理，如果直接更改的话，react是无法得知的，所以，需要使用特殊的更改状态的方法<code>setState</code>。</p><p><code>setState</code>接受2个参数，第一个参数负责对state自身进行修改（必须的），我们称之为<code>updater</code>；第二个参数是一个回调函数（可选），因为<code>setState</code>方法是异步的，如果想在更新好状态后做进一步处理，此时就可以用到第二个参数了。</p><p>语法：<strong>this.setState(updater[,callback])</strong></p><p><code>updater</code>参数传递的时候支持两种形式：<strong>对象形式</strong>与**&#x3D;&#x3D;函数形式&#x3D;&#x3D;**</p><p><strong>对象形式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>函数形式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述两种参数形式的<code>updater</code>建议使用<strong>函数形式</strong>。因为对象形式在批量使用的时候会存在问题，因此建议使用函数形式。</p><h2 id="3、props与state的区别"><a href="#3、props与state的区别" class="headerlink" title="3、props与state的区别"></a>3、props与state的区别</h2><blockquote><p>props &#x3D; vue中的props</p><p>state &#x3D; vue中的data</p></blockquote><ul><li><p>props中存储的数据，都是外界传递到组件中的</p></li><li><p>props 中的数据，都是只读的</p></li><li><p>state 中的数据，都是可读可写的（写的时候得用setState()）</p></li><li><p>props 在函数声明或类申明的组件中都有</p></li><li><p>state 只有类声明的组件中才有</p></li></ul><p><code>state</code>的主要作用是用于组件保存、控制、修改自己的可变状态。<code>state</code>在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为<code>state</code>是一个局部的、只能被组件自身控制的数据源。<code>state</code> 中状态可以通过<code>this.setState</code>方法进行更新，<code>setState</code>会导致组件的重新渲染。</p><p><code>props</code>的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的<code>props</code>，否则组件的<code>props</code>永远保持不变。</p><h1 id="七、Props进阶"><a href="#七、Props进阶" class="headerlink" title="七、Props进阶"></a>七、Props进阶</h1><h2 id="1、children属性"><a href="#1、children属性" class="headerlink" title="1、children属性"></a>1、children属性</h2><p><code>children</code>属性表示组件标签的<strong>子</strong>节点，<strong>当组件标签有子节点时</strong>，接受传值的子组件中的props里就会有该属性，与普通的props一样，其值可以使任意类型。</p><p>例如，在父组件中有如下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp</span> <span class="keyword">from</span> <span class="string">&#x27;./Components/Cmp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;蚂蚁集团A股发行价确定&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Cmp</span>&gt;</span>&#123;this.state.content&#125;<span class="tag">&lt;/<span class="name">Cmp</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>上述代码中的<code>&#123;this.state.content&#125;</code>即为子组件标签中的子节点，那么在子组件的props属性里就存在一个children属性可以被我们使用。如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cmp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cmp</span>;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意，<strong>如果子组件标签里只存在一个子节点，则children属性值为一个字符串；如果子组件标签里存在多个子节点，那么children属性的值为一个索引数组。</strong></p></blockquote><p>简而言之，上述写法形式有点像Vue里的插槽，但是不是，children这一小结所讲的内容简单来说就是父传子的另外一种写法而已：原先父传子是将值写在了<strong>组件标签的属性中</strong>，只不过现在写在了<strong>组件标签里</strong>而已。</p><h2 id="2、props-type"><a href="#2、props-type" class="headerlink" title="2、props-type"></a>2、props-type</h2><blockquote><p>关于JavaScript的class中的静态成员与常规成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"><span class="keyword">static</span> uname = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">App</span>).<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">App</span>.<span class="property">uname</span>);</span><br><span class="line"><span class="comment">// 常规的属性是在对象里的，如果要用得先实例化</span></span><br><span class="line"><span class="comment">// 静态属性是类里面的，使用的时候不要实例化</span></span><br><span class="line"><span class="comment">// 静态成员要优先于常规的成员</span></span><br></pre></td></tr></table></figure></blockquote><p>React是为了构建大型应用程序而生，在一个大型应用开发过程中会进行多人协作，往往可能根本不知道别人使用你写的组件的时候会传入什么样的参数，这样就有可能会造成应用程序运行不了但是又不报错的情况。所以必须要对于<code>props</code>设传入的数据类型进行校验。</p><p>为了解决这个问题，React提供了一种机制，让写组件的人可以给组件的<code>props</code>设定参数检查，需要安装和使用<a href="https://www.npmjs.com/package/prop-types">prop-types</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S prop-types</span><br></pre></td></tr></table></figure><p>在使用时，无论是函数组件还是类组件，都需要对<code>prop-types</code>进行导入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span></span><br></pre></td></tr></table></figure><p>随后依据使用的组件类型选择对应的应用方式，如果是函数组件则按照下面的方式应用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数组件声明过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为App方法组件挂上验证规则</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="comment">// 待验证的属性名：PropTypes.类型规则[.isRequired]</span></span><br><span class="line">    prop-<span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是类组件则按照下面的方式应用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="comment">// 类内部完成检查</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">       <span class="comment">// 待验证的属性名：PropTypes.类型规则[.isRequired]</span></span><br><span class="line">       prop-<span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上来上面类组件的写法与方法组件的写法是一样的，只不过考虑到类组件的代码完整性，我们把规则的验证做成了类的静态成员属性的方式，如果还原成最初的代码则如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.flag&#125;--&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">flag</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">num</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意，<code>isRequired</code>规则必须放在最后且不能独立于其他规则存在。更多的验证规则，可以参考<a href="https://reactjs.org/docs/typechecking-with-proptypes.html">React官网</a>。</p><h2 id="3、默认值"><a href="#3、默认值" class="headerlink" title="3、默认值"></a>3、默认值</h2><p>如果<code>props</code>有属性没有传来数据，为了不让程序异常，我们可以依据业务情况给对应的属性设置默认值。</p><p>依据组件类型的不同选择对应的操作方式，如果是函数组件则采用如下方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数组件声明过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为App方法组件挂上默认值</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="comment">// 属性名：默认值</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用的是类组件则使用如下方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 添加静态成员属性`defaultProps`设置props的默认值</span></span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        <span class="comment">// 属性名：默认值</span></span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、生命周期（重点）"><a href="#八、生命周期（重点）" class="headerlink" title="八、生命周期（重点）"></a>八、生命周期（重点）</h1><p><strong>函数组件无生命周期一说。</strong>后续提到的生命周期钩子函数都是针对类组件的。但是在函数组件中有其它的办法去实现类似于类组件中的生命周期的效果。（后期再说：hooks）</p><p>生命周期函数指在某一时刻组件会自动调用并执行的函数。React每个类组件都包含<code>生命周期方法</code>，我们可以重写这些方法，以便于在运行过程中特定的阶段执行这些方法。例如：</p><p>我们希望在第一次将其呈现到DOM时设置一个计时器<code>Clock</code>。这在React中称为“安装”（挂载）。</p><p>我们也想在删除由产生的DOM时清除该计时器<code>Clock</code>。这在React中称为“卸载”。</p><p>参考：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p><p><strong>完整的生命周期图</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/d96aceebbcf9bf3dccc95b3afc7b2f75ef3e59ec.png?sign=81ab7fb514b47c66446ba45f557afe0f&t=5f96fd9b" alt="完整的生命周期图"></p><p><strong>常用的生命周期图</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/06b9e675773182f54d91647cbf48ec2b5aa43de9.png?sign=2119db1b051cbdc67293ac5351be7884&t=5f96fddc" alt="常用的生命周期图"></p><p><strong>1.constructor(props)</strong></p><p>React组件的构造函数在挂载之前被调用。在实现<code>React.Component</code>构造函数时，需要先在添加其他内容前，&#x3D;&#x3D;调用<code>super(props)</code>&#x3D;&#x3D;，用来将父组件传来的<code>props</code>绑定到这个类中，使用<code>this.props</code>将会得到。</p><p><strong>2.static getDerivedStateFromProps(nextProps, prevState)</strong></p><p><code>getDerivedStateFromProps</code> 是react16.3之后新增，在组件实例化后，和接受新的<code>props</code>后被调用。他必须返回一个对象来更新状态，或者返回null表示新的props不需要任何state的更新。</p><p>作用：&#x3D;&#x3D;从父组件中接收props属性，写入当前子组件的state中&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// vue的data初始值</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">a: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">props: [&#x27;num&#x27;],</span><br><span class="line"></span><br><span class="line">// 生命周期函数  当前类似于getDerivedStateFromProps</span><br><span class="line">mounted()&#123;</span><br><span class="line">this.a = this.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// getDerivedStateFromProps 作用是接收父传递的属性并且更新给自己的state</span><br><span class="line">state = &#123;</span><br><span class="line">    num: 0,</span><br><span class="line">    username: &quot;zhangsan&quot;,</span><br><span class="line">    age: 18,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    return &lt;div&gt;这是子组件&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期getDerivedStateFromProps</span><br><span class="line">// 参数1：父传递过来的props对象</span><br><span class="line">// 参数2：当前子组件自身的state对象</span><br><span class="line">static getDerivedStateFromProps(Props, State) &#123;</span><br><span class="line">    // console.log(Props, State);</span><br><span class="line">    // 这个生命周期函数必须有返回值：</span><br><span class="line">    // 情况1：如果想要更新组件自身的state，则返回一个state对象</span><br><span class="line">    // 情况2：如果不需要跟新自身的state，则返回null</span><br><span class="line">    // 更新与否的条件是，需求的props数据是否与state的数据项的值相等</span><br><span class="line">    // 判断的时候要用全等符号</span><br><span class="line">    if (Props.newnum === State.num) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 返回的这个对象会与原先的state对象合并（不是覆盖）</span><br><span class="line">        return &#123; num: Props.newnum &#125;;</span><br><span class="line">        // State.num = Props.newnum;</span><br><span class="line">        // return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是由于父组件的<code>props</code>更改，所带来的重新渲染，也会触发此方法。</p><p>调用<code>setState()</code>不会触发<code>getDerivedStateFromProps()</code>。【<strong>react16.3及以前，在此以后setState()调用后以及强制更新的时候都会触发该周期。</strong>】</p><p>之前这里都是使用<code>constructor</code>+<code>componentWillRecieveProps</code>完成相同的功能的。</p><p><strong><del>3. componentWillMount() &#x2F; UNSAFE_componentWillMount()</del></strong></p><p>已被弃用。</p><p><strong>4.render()</strong></p><p>render()方法是必需的，它主要负责组件的渲染，会被重复调用若干次，不建议在此处写异步代码（大概率会死循环）。</p><p>在该组件生命周期函数中不要写对于页面上渲染的数据的更新操作，如果这么做，可能出现死循环。</p><p><strong>5. componentDidMount</strong></p><p>&#x3D;&#x3D;类似于vue的mounted&#x3D;&#x3D;</p><p><code>componentDidMount</code>在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。</p><p>&#x3D;&#x3D;<strong><code>通常在这里进行ajax请求</code></strong>&#x3D;&#x3D;</p><p>如果要初始化第三方的dom库，也在这里进行初始化。只有到这里才能获取到真实的dom.</p><p><strong><del>6.componentWillReceiveProps()&#x2F;UNSAFE_componentWillReceiveProps(nextProps)</del></strong></p><p>已被弃用。</p><p><strong>7.shouldComponentUpdate(nextProps, nextState)</strong></p><p>调用<code>shouldComponentUpdate</code>使React知道，组件的输出是否受<code>state</code>和<code>props</code>的影响。默认每个状态的更改都会重新渲染，大多数情况下应该保持这个默认行为。</p><p>在渲染新的<code>props</code>或<code>state</code>前，<code>shouldComponentUpdate</code>会被调用。默认为<code>true</code>。这个方法不会在初始化时被调用，也不会在<code>forceUpdate()</code>时被调用。返回<code>false</code>不会阻止子组件在<code>state</code>更改时重新渲染。</p><p>如果<code>shouldComponentUpdate()</code>返回<code>false</code>，<code>componentWillUpdate</code>,<code>render</code>和<code>componentDidUpdate</code>不会被调用。</p><blockquote><p>在渲染新的<code>props</code>或<code>state</code>前，<code>shouldComponentUpdate</code>会被调用。来确定组件是否需要被重新渲染。其作用是用于实现组件渲染的性能优化。其返回值是bool，true则表示该组件需要被重新渲染，false则表示该组件不用被重新渲染。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class App22Child1 extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(&quot;走了Child1的渲染生命周期&quot;);</span><br><span class="line">        return &lt;div&gt;父组件传来的值是&#123;this.props.c1&#125;&lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 决定当前组件是否渲染</span><br><span class="line">    // true=渲染，false=不渲染</span><br><span class="line">    // 参数1：是父传递过来的props</span><br><span class="line">    // 参数2：是当前组件自身的state对象</span><br><span class="line">    shouldComponentUpdate(Props, State) &#123;</span><br><span class="line">        // console.log(Props, State);</span><br><span class="line">        // 问题：什么时候要更新当前这个组件？？？</span><br><span class="line">        // 答：当前收到的值是否与之前的值一样，如果一样则不更新</span><br><span class="line">        if (Props.c1 === this.props.c1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对于刚才上述的这个写法虽然本着提升性能目的的，但是写起来非常费劲，而且如果有很多数据的话，则判断起来也非常麻烦，因此react给我们做了简化操作。</span><br><span class="line">// 使用方式：在导入成员的时候导入`PureComponent`组件，将继承关系改成继承`PureComponent`即可，原先的`Component`继承就不用了。</span><br><span class="line">// 其会自动帮我们判断组件是否需要进行下一次渲染。</span><br><span class="line"></span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class App22Child1 extends PureComponent &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(&quot;走了Child1的渲染生命周期&quot;);</span><br><span class="line">        return &lt;div&gt;父组件传来的值是&#123;this.props.c1&#125;&lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 决定当前组件是否渲染</span><br><span class="line">    // true=渲染，false=不渲染</span><br><span class="line">    // 参数1：是父传递过来的props</span><br><span class="line">    // 参数2：是当前组件自身的state对象</span><br><span class="line">    // shouldComponentUpdate(Props, State) &#123;</span><br><span class="line">    //     // console.log(Props, State);</span><br><span class="line">    //     // 问题：什么时候要更新当前这个组件？？？</span><br><span class="line">    //     // 答：当前收到的值是否与之前的值一样，如果一样则不更新</span><br><span class="line">    //     if (Props.c1 === this.props.c1) &#123;</span><br><span class="line">    //         return false;</span><br><span class="line">    //     &#125; else &#123;</span><br><span class="line">    //         return true;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App22Child1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><del>8.UNSAFE_componentWillUpdate(nextProps, nextState)</del></strong></p><p>已被弃用。</p><p><strong>9.getSnapshotBeforeUpdate()</strong></p><p>在react <code>render()</code>后的输出被渲染到DOM之前被调用，用于获取渲染之前的DOM信息，<strong>需要配合componentDidUpdate()一起使用。</strong></p><p>在vue中，类似于<code>beforeUpdate()</code></p><p><strong>10.componentDidUpdate(prevProps, prevState, snapshot)</strong></p><p>&#x3D;&#x3D;类似于vue的updated生命周期&#x3D;&#x3D;</p><p>在更新发生后立即调用<code>componentDidUpdate()</code>。</p><p><strong>11.componentWillUnmount()</strong></p><p>&#x3D;&#x3D;类似于vue的beforeDestory&#x3D;&#x3D;</p><p>在组件被卸载并销毁之前立即被调用。在此方法中执行任何必要的清理，例如使定时器无效，取消网络请求或清理在<code>componentDidMount</code>中创建的任何监听。</p><p><strong>12.componentDidCatch(error, info)</strong></p><p>错误边界是React组件，可以在其子组件树中的任何位置捕获JavaScript错误。</p><blockquote><p>常用的生命周期：</p><ul><li><strong>constructor</strong></li><li>getDerivedStateFromProps</li><li><strong>render</strong></li><li><strong>componentDidMount</strong></li><li><strong>componentWillUnmount</strong></li></ul></blockquote><h1 id="九、表单处理"><a href="#九、表单处理" class="headerlink" title="九、表单处理"></a>九、表单处理</h1><h2 id="1、特别说明"><a href="#1、特别说明" class="headerlink" title="1、特别说明"></a>1、特别说明</h2><p>有以下示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.msg&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>通过运行后我们可以在浏览器的<code>consle</code>控制台找到React给予我们的提示：</p><blockquote><p><strong>Warning</strong>: You provided a <code>value</code> prop to a form field without an <code>onChange</code> handler. This will render a read-only field. If the field should be mutable use <code>defaultValue</code>. Otherwise, set either <code>onChange</code> or <code>readOnly</code>.</p></blockquote><p>通过上述的警告提示，我们可以得知，在React中并不存在类似于Vue的双向数据绑定操作。此处需要注意以下几点：</p><ul><li><p>Vue中的<code>v-model</code>是语法糖</p></li><li><p>在React里使用的是<strong>单向</strong>数据流</p></li></ul><p>由于在React里数据流是单向的，所以我们就必须得考虑一个问题：怎么获取用户在表单中输入的数据呢？解决办法：</p><ul><li>给表单项添加<code>onChange</code>事件【受控组件】</li><li>给表单项的value&#x2F;checked，设置成defaultValue&#x2F;defaultChecked【非受控组件】</li></ul><p>React推荐我们使用受控组件。</p><h2 id="2、受控组件"><a href="#2、受控组件" class="headerlink" title="2、受控组件"></a>2、受控组件</h2><p>将<code>state</code>与表单项中的<code>value</code>值绑定在一起，由<code>state</code>的值来控制表单元素的值，称为受控组件。</p><p>绑定步骤：</p><ul><li><p>在state中添加一个状态，作为表单元素的value值</p></li><li><p>给表单元素绑定change事件，将表单元素的值设置为state的值</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单解决方案：受控组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意点：</span></span><br><span class="line"><span class="comment">// 1. 受控组件的定义：所谓受控组件，顾名思义就是受React控制的组件。其特点是将state在表单中的更新，通过onChange事件来进行操作。</span></span><br><span class="line"><span class="comment">// 2. 受控组件必须要求表单项中要有俩个组合的情况：</span></span><br><span class="line"><span class="comment">//  针对普通的文本框、多行文本框等：value属性+onChange事件类型</span></span><br><span class="line"><span class="comment">//  针对单选按钮组/复选框：checked属性+onChange事件类型</span></span><br><span class="line"><span class="comment">// 3. 每次onChange事件的触发都会重新渲染页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例需要：state中约定一个用户的基本信息，要求将信息展示在表单中，允许被用户修改，点击提交按钮获取用户修改后的最新的信息（state中的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化用户信息（项目中的话信息是来自于ajax）</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">            <span class="attr">uname</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="attr">mail</span>: <span class="string">&quot;zhangsan@1000phone.com&quot;</span>,</span><br><span class="line">            <span class="comment">// 社交属性性别</span></span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">            <span class="attr">hobbies</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 先结构用户信息，用起来方便</span></span><br><span class="line">        <span class="keyword">let</span> &#123; uname, mail, gender, hobbies &#125; = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    昵称：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&#123;uname&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    邮箱：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mail&quot;</span> <span class="attr">value</span>=<span class="string">&#123;mail&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    性别：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;gender</span> === <span class="string">&quot;男&quot;</span> ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span>男</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;gender</span> === <span class="string">&quot;女&quot;</span> ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span>女</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    爱好：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">1</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    吃饭</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">2</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    睡觉</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">3</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.vModel.bind(this)&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    撸代码</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submit.bind(this)&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改用户名</span></span><br><span class="line">    <span class="comment">// chgUname(e) &#123;</span></span><br><span class="line">    <span class="comment">//     // 修改state中的数据</span></span><br><span class="line">    <span class="comment">//     // 获取最新的数据</span></span><br><span class="line">    <span class="comment">//     let val = e.target.value;</span></span><br><span class="line">    <span class="comment">//     // 获取要改的属性名</span></span><br><span class="line">    <span class="comment">//     let name = e.target.name;</span></span><br><span class="line">    <span class="comment">//     // 修改数据</span></span><br><span class="line">    <span class="comment">//     this.setState((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//         // 对象有一个特点：引用传值</span></span><br><span class="line">    <span class="comment">//         state.userInfo[name] = val;</span></span><br><span class="line">    <span class="comment">//         return state;</span></span><br><span class="line">    <span class="comment">//     &#125;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 修改邮箱</span></span><br><span class="line">    <span class="comment">// chgMail(e) &#123;</span></span><br><span class="line">    <span class="comment">//     let val = e.target.value;</span></span><br><span class="line">    <span class="comment">//     // 获取要改的属性名</span></span><br><span class="line">    <span class="comment">//     let name = e.target.name;</span></span><br><span class="line">    <span class="comment">//     // 修改数据</span></span><br><span class="line">    <span class="comment">//     this.setState((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//         // 对象有一个特点：引用传值</span></span><br><span class="line">    <span class="comment">//         state.userInfo[name] = val;</span></span><br><span class="line">    <span class="comment">//         return state;</span></span><br><span class="line">    <span class="comment">//     &#125;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装受控组件的表单数据与state的绑定关系</span></span><br><span class="line">    <span class="title function_">vModel</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// 修改state中的数据</span></span><br><span class="line">        <span class="comment">// 获取最新的数据</span></span><br><span class="line">        <span class="keyword">let</span> val = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// 获取要改的属性名</span></span><br><span class="line">        <span class="keyword">let</span> name = e.<span class="property">target</span>.<span class="property">name</span>;</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否是复选框的处理</span></span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">type</span> === <span class="string">&quot;checkbox&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// 多选</span></span><br><span class="line">                <span class="comment">// console.log(&#x27;走了多选&#x27;);</span></span><br><span class="line">                <span class="comment">// 思路：先去判断当前的值在原来的数据中是否存在，存在则移除，不存在则添加</span></span><br><span class="line">                <span class="keyword">let</span> index = state.<span class="property">userInfo</span>[name].<span class="title function_">indexOf</span>(val);</span><br><span class="line">                <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    state.<span class="property">userInfo</span>[name].<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state.<span class="property">userInfo</span>[name].<span class="title function_">push</span>(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 对象有一个特点：引用传值</span></span><br><span class="line">                state.<span class="property">userInfo</span>[name] = val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交表单</span></span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInfo</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ul><li>如果需要将原本应该分别处理的事件合在一起去写的话，一定需要多传递一个参数用于记录当前修改的是state中的哪一个值，此时可以选择以下方案中的任意一种：<ul><li>通过相同<code>name</code>属性值去辨别，给每个表单项设置与state中相同的key名的name值，然后通过事件对象去获取</li><li>可以直接在事件绑定的位置传递标记，例如：<code>onChange=&#123;this.changeHandler.bind(this,&#39;username&#39;)&#125;</code></li></ul></li><li>表单项中表单项类型为<code>checkbox</code>的比较特殊，与其他类型的不同，需要特殊处理（取反操作，而其余的表单项是来什么值用什么值）</li></ul></blockquote><h2 id="3、非受控组件"><a href="#3、非受控组件" class="headerlink" title="3、非受控组件"></a>3、非受控组件</h2><p>没有和state数据源进行关联的表单项，而是<strong>借助ref</strong>，使用元素DOM方式获取表单元素值</p><p>使用步骤</p><ul><li><p>调用React.createRef()方法创建ref对象</p></li><li><p>将创建好的ref对象添加到文本框中</p></li><li><p>通过ref对象获取到文本框的值</p></li></ul><blockquote><p>提示：一般表单项少的时候可以考虑使用非受控组件。</p><p>非受控组件不能给表单项加<code>value</code>属性，一旦加了它就不是非受控组件了，它就成了受控组件了。如果有默认值请通过<code>defaultValue</code>属性进行输出。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单处理：非受控组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意点：</span></span><br><span class="line"><span class="comment">// 1. 含义：非受控组件指的是不受react控制的组件</span></span><br><span class="line"><span class="comment">// 2. 非受控组件需要借助ref对象来实现对表单项的操作</span></span><br><span class="line"><span class="comment">// 3. 关于ref：是react中用户获取组件/元素对象的一个对象，在使用的时候需要通过createRef()进行创建，然后将创建好可变数据绑定到组件/元素上。后续根据元素的类型获取到对应信息：</span></span><br><span class="line"><span class="comment">//      如果元素是html标签的话，则获取到的是dom信息</span></span><br><span class="line"><span class="comment">//      如果元素是组件标签的话，则获取到的是该组件对应的组件实例（整个实例，是一个对象）</span></span><br><span class="line"><span class="comment">// 4. 非受控组件在实际表单处理应用中，获取到的都是dom对象，也就是说非受控组件基本使用的都是dom操作</span></span><br><span class="line"><span class="comment">// 5. 非受控组件操作的时候需要配合defaultValue和defaultChecked属性来实现，该操作不会像受控组件一样，每次改变数据导致页面组件重新渲染</span></span><br><span class="line"><span class="comment">// 6. 在使用ref的时候如果一个ref要对应多个表单项（如单选按钮组/复选框），则不能给每个元素都加ref，需要给其公共父去加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例需要：约定一个用户的基本信息，要求将信息展示在表单中，允许被用户修改，点击提交按钮获取用户修改后的最新的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="comment">// 创建ref对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ref_uname</span> = <span class="title function_">createRef</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ref_mail</span> = <span class="title function_">createRef</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ref_gender</span> = <span class="title function_">createRef</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ref_hobbies</span> = <span class="title function_">createRef</span>();</span><br><span class="line">        <span class="comment">// ref对象是后续获取表单最新数据的唯一途径</span></span><br><span class="line">        <span class="comment">// 建议性操作，将所有的ref丢到一个数组中（后续可以循环取值）</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">refArr</span> = [<span class="variable language_">this</span>.<span class="property">ref_uname</span>, <span class="variable language_">this</span>.<span class="property">ref_mail</span>, <span class="variable language_">this</span>.<span class="property">ref_gender</span>, <span class="variable language_">this</span>.<span class="property">ref_hobbies</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化用户信息（项目中的话信息是来自于ajax）</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">            <span class="attr">uname</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="attr">mail</span>: <span class="string">&quot;zhangsan@1000phone.com&quot;</span>,</span><br><span class="line">            <span class="comment">// 社交属性性别</span></span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">            <span class="attr">hobbies</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;走了render&quot;</span>);</span><br><span class="line">        <span class="comment">// 先结构用户信息，用起来方便</span></span><br><span class="line">        <span class="keyword">let</span> &#123; uname, mail, gender, hobbies &#125; = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    昵称：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref_uname&#125;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&#123;uname&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    邮箱：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref_mail&#125;</span> <span class="attr">name</span>=<span class="string">&quot;mail&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&#123;mail&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref_gender&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    性别：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;gender</span> === <span class="string">&quot;男&quot;</span> ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; /&gt;</span>男</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;gender</span> === <span class="string">&quot;女&quot;</span> ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; /&gt;</span>女</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref_hobbies&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    爱好：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">1</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    吃饭</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">2</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    睡觉</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">defaultChecked</span>=<span class="string">&#123;hobbies.includes(</span>&quot;<span class="attr">3</span>&quot;) ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    撸代码</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submit.bind(this)&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交：在点击之后获取最新的表单数据</span></span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 用于保存所有的数据，此处不能使用state及setState（一旦使用就是受控组件）</span></span><br><span class="line">        <span class="keyword">let</span> data = &#123; <span class="attr">userInfo</span>: &#123;&#125; &#125;;</span><br><span class="line">        <span class="comment">// console.log(this.ref_uname.current);</span></span><br><span class="line">        <span class="comment">// 循环所有的ref逐个进行处理</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">refArr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ref</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到当前的dom对象</span></span><br><span class="line">            <span class="keyword">let</span> obj = ref.<span class="property">current</span>;</span><br><span class="line">            <span class="comment">// 判断是否存在多个子</span></span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 多个元素（还需要判断是单选还是复选）</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (obj.<span class="property">children</span>[i].<span class="property">type</span> === <span class="string">&quot;radio&quot;</span> &amp;&amp; obj.<span class="property">children</span>[i].<span class="property">checked</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将单选按钮组中选中的那个值赋给data</span></span><br><span class="line">                        data.<span class="property">userInfo</span>[obj.<span class="property">children</span>[i].<span class="property">name</span>] = obj.<span class="property">children</span>[i].<span class="property">value</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (obj.<span class="property">children</span>[i].<span class="property">type</span> === <span class="string">&quot;checkbox&quot;</span> &amp;&amp; obj.<span class="property">children</span>[i].<span class="property">checked</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将多选框中选中的值保留</span></span><br><span class="line">                        <span class="keyword">if</span> (!data.<span class="property">userInfo</span>[obj.<span class="property">children</span>[i].<span class="property">name</span>]) &#123;</span><br><span class="line">                            data.<span class="property">userInfo</span>[obj.<span class="property">children</span>[i].<span class="property">name</span>] = [];</span><br><span class="line">                        &#125;</span><br><span class="line">                        data.<span class="property">userInfo</span>[obj.<span class="property">children</span>[i].<span class="property">name</span>].<span class="title function_">push</span>(obj.<span class="property">children</span>[i].<span class="property">value</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 单个元素</span></span><br><span class="line">                <span class="keyword">let</span> name = obj.<span class="property">name</span>;</span><br><span class="line">                <span class="keyword">let</span> val = obj.<span class="property">value</span>;</span><br><span class="line">                data.<span class="property">userInfo</span>[name] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 最终的data就是需要提交的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="十、组件通信"><a href="#十、组件通信" class="headerlink" title="十、组件通信"></a>十、组件通信</h1><p>在React中，除了props可以实现数据传递以外，还支持两种形式数据传递：</p><ul><li>通过ref对象形式进行传递<ul><li>父-子</li><li>子-父</li></ul></li><li>通过属性传递方法<ul><li>父-子</li><li>子-父</li></ul></li></ul><h2 id="1、父→子"><a href="#1、父→子" class="headerlink" title="1、父→子"></a>1、父→子</h2><p>该传值的实现可以分为两种，思想大致如下：</p><ul><li>父通过<code>ref</code>标记子组件，通过<code>ref</code>获取子组件实例对象，父将自己的状态或数据以实参形式传递给子组件中预设的方法，在子组件中的预设方法以形参形式接收父组件传递来的数据，并保存到子组件自身的状态（父主动把数据给子）</li><li>在父组件中定义一个获取父组件自身状态或数据的方法，将该方法以<code>props</code>属性的形式传递给子组件，子组件收到后执行该方法即可获取到父组件的状态或数据（子去要数据）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父传子的操作</span></span><br><span class="line"><span class="comment">// 1. 需要有父子关系，因此需要只少2个组件</span></span><br><span class="line"><span class="comment">// 2. 本次俩个组件不考虑用2个文件，换一种书写形式</span></span><br><span class="line"><span class="comment">// 方法有两种：</span></span><br><span class="line"><span class="comment">//      方式1：通过ref对象，将ref对象给子组件标签绑定上去，后续可以通过ref对象获取子组件整个实例。随后可以在子组件中定义一个方法，用于被ref对象调用，接收父数据</span></span><br><span class="line"><span class="comment">//      方式2：通过props，传递一个父中的方法（该方法用于返回父的数据），方法传递给子之后，子在需要父数据的时候执行即可（子去要数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="comment">// 创建一个给子用的ref对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span> = <span class="title function_">createRef</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 父的数据</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;最开始玩股票的时候，只有跌的时候亏钱&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;this.child&#125;</span> <span class="attr">fun</span>=<span class="string">&#123;this.returnMsgToChild.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 方法1：父主动把数据给子 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.sendMsgToSon.bind(this)&#125;</span>&gt;</span>点击按钮把消息发给子<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法1：主动将数据给子</span></span><br><span class="line">    <span class="title function_">sendMsgToSon</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 由于打印输出方法在子组件中，如果要走打印则必须要去调用子组件中的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span>.<span class="property">current</span>.<span class="title function_">getMsgFromFather</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：将数据准备好，等着子来要</span></span><br><span class="line">    <span class="title function_">returnMsgToChild</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.giveMeMsg.bind(this)&#125;</span>&gt;</span>爸： 钱 儿<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：接收父亲给的数据</span></span><br><span class="line">    <span class="title function_">getMsgFromFather</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子收到的消息是：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：向父组件要数据</span></span><br><span class="line">    <span class="title function_">giveMeMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 执行父给的方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子向父要的数据是：&quot;</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">fun</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Father</span>;</span><br></pre></td></tr></table></figure><h2 id="2、子→父"><a href="#2、子→父" class="headerlink" title="2、子→父"></a>2、子→父</h2><p>该传值的实现可以分为两种，思想大致如下：</p><ul><li>（父主动获取子的数据）父通过<code>ref</code>标记子组件，随后通过子组件实例对象获取子组件的数据</li><li>在父组件中预埋一个修改父组件自身的方法，将该方法以<code>props</code>的形式传递给子组件，子组件收到方法时去调用，并且将自己需要给父的数据以实参的形式给这个方法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件通信：子-父传值</span></span><br><span class="line"><span class="comment">// 1. 方式有两种，思路与前面基本一致</span></span><br><span class="line"><span class="comment">//      方法1：通过ref对象，给子组件绑定ref对象以获取整个子组件实例，也就获取到了子的state，进而可以获取state中的数据（被动，父去取的）</span></span><br><span class="line"><span class="comment">//      方法2：同时属性传递方法，方法依旧需要子去执行，但是子需要将自己的数据传递给该方法，由父接收并且可以打印输出（主动，子给父的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="comment">// 创建子组件的ref对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span> = <span class="title function_">createRef</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;this.child&#125;</span> <span class="attr">fun</span>=<span class="string">&#123;this.SonSetMsg.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 方法1：父主动去获取子的数据 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getMsgFromSon.bind(this)&#125;</span>&gt;</span>子： 还钱！爸<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：父主动去获取子的数据</span></span><br><span class="line">    <span class="title function_">getMsgFromSon</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">child</span>.<span class="property">current</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：父亲准备一个篮子，空的，需要子往里放东西</span></span><br><span class="line">    <span class="title class_">SonSetMsg</span>(msg) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;后来学会了做空，股票涨的时候也会赔钱&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setMsg.bind(this)&#125;</span>&gt;</span>子把数据放篮子里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法2：子存放数据</span></span><br><span class="line">    <span class="title function_">setMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">fun</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Father</span>;</span><br></pre></td></tr></table></figure><h2 id="3、跨组件通信（了解）"><a href="#3、跨组件通信（了解）" class="headerlink" title="3、跨组件通信（了解）"></a>3、跨组件通信（了解）</h2><p>网址：<a href="https://zh-hans.reactjs.org/docs/context.html">https://zh-hans.reactjs.org/docs/context.html</a></p><p>在react没有类似vue中的事件总线来解决这个问题。在实际的项目中，当需要组件间跨级访问信息时，如果还使用组件层层传递props，此时代码显得不那么优雅，甚至有些冗余。在react中，我们还可以使用context来实现跨级父子组件间的通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line"><span class="title class_">Provider</span>,</span><br><span class="line"><span class="title class_">Consumer</span></span><br><span class="line">&#125; = <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure><blockquote><p>提示：在React的context中，数据被看成了商品，发布数据的组件会用provider身份（卖方），接收数据的组件使用consumer身份（卖方）。</p></blockquote><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/6e6a35f08f8620236171af7b7df86c6e497fad47.png?sign=75f71781d763be66f76b1ff2a37791d1&t=5f98f468"></p><ul><li>创建Context对象</li></ul><p>当React渲染一个订阅了这个Context对象的组件，这个组件会从组件树中离自身最近的那个匹配的Provider中读取到当前的context值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局context</span></span><br><span class="line"><span class="comment">// 由于这个操作后期可能被复用，建议独立文件去创建。此处以`src/Context/index.js`为例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure><ul><li>发布消息</li></ul><p>在App.jsx组件中发布消息，这样所有的组件都可以消费它的消息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp1</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp2</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp2&quot;</span>;</span><br><span class="line"><span class="comment">// 导入context对象</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;./Context/index&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">Provider</span> &#125; = context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">12345</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Cmp6</span>&gt;</span><span class="tag">&lt;/<span class="name">Cmp6</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Cmp7</span>&gt;</span><span class="tag">&lt;/<span class="name">Cmp7</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>组件消费</li></ul><p>在子组件中通过Api完成消费动作，从而实现消息通信。消费的方式有2种：</p><p>方式1：通过组件消费</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;../Context/index&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">Consumer</span> &#125; = <span class="title class_">ContextObj</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cmp1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;(value) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">div</span>&gt;</span>获取到的值是：&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cmp1</span>;</span><br></pre></td></tr></table></figure><p>方式2：通过绑定静成属性来消费</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContextObj</span> <span class="keyword">from</span> <span class="string">&quot;../Context/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cmp2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> contextType = <span class="title class_">ContextObj</span>;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.context&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Cmp2</span>;</span><br></pre></td></tr></table></figure><h1 id="十一、HOC-高阶组件"><a href="#十一、HOC-高阶组件" class="headerlink" title="十一、HOC  - 高阶组件"></a>十一、HOC  - 高阶组件</h1><p>高阶函数。</p><p>Higher - Order Components，<strong>其实就是一个函数，传给它一个组件，它返回一个新的组件</strong>。形如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NewComponent</span> = <span class="title function_">HOC</span>(<span class="title class_">YourComponent</span>)</span><br></pre></td></tr></table></figure><p>通俗的来讲，<code>高阶组件</code>就相当于手机壳，通过包装组件，增强组件功能。例如最近成热点的华为Mate 40<code>环删保护壳</code>：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/documents/2020/10/4f524eb810cea9ceacbe324e73a770343a267593.jpeg?sign=ec3e937178bb72dea4305f755f7d8092&t=5f9993ca"></p><p>HOC实现步骤：</p><ul><li><p>创建一个函数</p></li><li><p>指定函数参数，<strong>参数应该以大写字母开头</strong></p></li><li><p>在函数内部创建一个类组件，提供<strong>复用</strong>的状态（如有）及逻辑代码，并返回</p></li><li><p>在该组件中，渲染参数组件，同时将状态通过prop传递给参数组件（可选，如有）</p></li><li><p>调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其渲染到页面</p></li></ul><p>比如，我们想要我们的组件通过自动注入一个版权信息（文件位置<code>src/Hoc/Hoc_copyright.js</code>）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withCopyright</span> = (<span class="params">Cmp</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Hoc</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Cmp</span>&gt;</span><span class="tag">&lt;/<span class="name">Cmp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;copy;</span> 2020 千峰教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withCopyright;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment是一个伪标签，渲染的时候是不会显示在页面中的，因此也不会影响视图显示</span></span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 引入HOC</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hoc</span> <span class="keyword">from</span> <span class="string">&#x27;./Hoc/Hoc_copyright&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网站首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Hoc</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>这样只要我们有需要用到版权信息的组件，都可以直接使用withCopyright这个高阶组件包裹即可。</p><p>提示：高阶组件是强化组件的一种方式，一般是具备复用的，如果只是某个组件需要强化，则没有必要写成高阶组件的形式，直接在需要强化的组件中写强化的代码即可。</p><h1 id="十二、Redux（难）"><a href="#十二、Redux（难）" class="headerlink" title="十二、Redux（难）"></a>十二、Redux（难）</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>2013年Facebook提出了Flux架构的思想，引发了很多的实现。2015年，Redux出现，将Flux与函数式编程结合一起，很短时间内就成为了最热门的前端架构。</p><p>简单说，如果你的UI层非常简单，没有很多互动，Redux就是不必要的，用了反而增加复杂性。</p><p>如果你的项目的迭代变得越来越复杂，组件的数量和层级也变得越来越多，越来越深，此时组件间的数据通信就变得异常的复杂和低效，为了解决这个问题，引入了状态管理（<strong>redux</strong>）从而很好的解决多组件之间的通信问题。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/a6087b34b9f365ef23b0a53fb6ca225099d5cfb6.png?sign=fbbd37dae9446bbcef3b79c60c2d31e3&t=5f99a237"></p><p>如果需要使用Redux请先进行安装：</p><p>网址：<a href="https://redux.js.org/introduction/getting-started">https://redux.js.org/introduction/getting-started</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S redux</span><br></pre></td></tr></table></figure><blockquote><p>与vuex的区别：</p><ul><li>代码书写上vuex的代码会比redux的感觉简单一些</li><li>两者在模块化上的实现也有区别，redux的模块化分的文件会更多，但是redux在命名空间层面的操作比vuex简单</li></ul></blockquote><h2 id="2、三大原则（重点）"><a href="#2、三大原则（重点）" class="headerlink" title="2、三大原则（重点）"></a>2、三大原则（重点）</h2><ul><li>单一数据源<ul><li>整个应用的<code>state</code>（这个state不是组件中的state，请不要混淆）被储存在一棵对象结构树中，并且这个对象结构只存在于唯一一个store中</li></ul></li><li>State是只读的<ul><li>唯一改变state的方法就是触发dispatch+action，action是一个用于描述已发生事件的<strong>普通对象</strong>（action普通对象必须要有<code>type</code>属性，值是什么无所谓，其余属性也无所谓）。</li></ul></li><li>（最终修改数据的方法）使用<strong>纯函数</strong>（一个函数的返回结果只受到其形参的影响，则其就是纯函数）来执行修改<ul><li>为了描述action如何改变state tree ，我们需要编写reducer，&#x3D;&#x3D;reducer必须是纯函数&#x3D;&#x3D;，它接收先前的state和action，并返回<strong>新的</strong>state（不会合并的，自行注意这个坑）</li></ul></li></ul><p><strong>操作原理图</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/c2b874cdd9bc6f0579afebeedc5f958131a78040.png?sign=ec995f5c878596b98a9e1b3827aa4c4c&t=5f99b163"></p><p>a. store通过reducer创建了初始状态</p><p>b. view通过store.getState()获取到了store中保存的state挂载在了自己的状态上</p><p>c. 用户产生了操作（事件），调用了actions 的方法</p><p>d. actions的方法被调用，创建了带有标示性信息的action（描述对象，描述如何修改数据）</p><p>e. actions将action通过调用store.dispatch方法发送到了reducer中</p><p>f. reducer接收到action并根据标识信息判断之后返回了新的state（自己注意合并的问题）</p><p>g. store的state被reducer更改为新state的时候，store.subscribe方法里的回调函数会执行，此时就可以通知view去重新获取state</p><ul><li>store.getState()：用于获取仓库中初始的数据（一次性）</li><li>store.dispatch()：用于派发修改数据的任务，参数是action普通对象</li><li>store.subscribe(callback)：视图组件用于订阅新数据的方法（二次及以后的数据更新，使之产生类似于vue的响应式store数据）</li></ul><blockquote><p>纯函数是函数式编程的概念，必须遵守以下一些约束。</p><ul><li><p>不得改写参数</p></li><li><p>不能调用系统 I&#x2F;O 的API</p></li><li><p>不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果</p></li></ul></blockquote><p>请注意：由于reducer被要求是纯函数，所以reducer函数里面不能改变State，必须返回一个全新的数据（不会自动合并原始数据的，因此一定要注意：别把原始数据搞丢了）。</p><h2 id="3、redux的使用"><a href="#3、redux的使用" class="headerlink" title="3、redux的使用"></a>3、redux的使用</h2><p><strong>案例：在组件中展示一个按钮，点按钮后给redux中的数字+9，数字初始为0。实现一个计数器的效果</strong></p><p>步骤：</p><ul><li>创建store</li><li>创建视图组件（展示store中的数据）</li><li>修改</li><li>回显数据到视图组件</li></ul><p><strong>实现步骤</strong></p><p>a. 创建默认数据源：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 这是仓库store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a. 导入需要使用的成员</span></span><br><span class="line"><span class="comment">// createStore方法，作用用于产生仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b. 创建数据源</span></span><br><span class="line"><span class="comment">// 默认数据源是一个普通对象，可以有很多的数据</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="comment">// 定义初始化的数据</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. 创建纯函数reducer（方法名叫什么无所谓）</span></span><br><span class="line"><span class="comment">// 作用：负责返回state（可能是直接返回state，也可能是返回修改后的state）</span></span><br><span class="line"><span class="comment">// 语法：reducer(state = defaultState,actions)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = defaultState, actions</span>) &#123;</span><br><span class="line">    <span class="comment">// 在返回之前写修改数据源的操作</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d. 产生仓库</span></span><br><span class="line"><span class="comment">// 产生仓库的时候需要往仓库中存放数据源，因此需要传递reducer过去</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// e. 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了方便调试redux（可选安装），建议去谷歌商店安装<code>redux dev tools</code>，在使用的时候需要参考其<a href="https://github.com/zalmoxisus/redux-devtools-extension#usage">说明页面</a></p><blockquote><p>redux工具条在安装好之后不能直接使用，需要配置仓库代码，然后才能使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// d. 产生仓库</span></span><br><span class="line"><span class="comment">// 产生仓库的时候需要往仓库中存放数据源，因此需要传递reducer过去</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="comment">// 必须要加上一段插件的配置工具，才能在浏览器中使用redux扩展</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION__</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/8a98ff5a63061eb039045fe1c42cd955d518311c.png?sign=7f00fc5ce078fb8192e4014f51649cb6&t=600a9550"></p><p>b. 建立视图组件并且展示数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">// 需要导入store</span><br><span class="line">import store from &quot;../store/index&quot;;</span><br><span class="line">class Counter extends Component &#123;</span><br><span class="line">    // 在constructor中获取store中的数据</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        // 获取store数据（一次性，不具备响应式）</span><br><span class="line">        this.state = store.getState();</span><br><span class="line">        // 订阅数据的更新</span><br><span class="line">        store.subscribe(() =&gt; this.setState(() =&gt; store.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this.state);</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;当前Store中的数据是：&#123;this.state.reducer.count&#125;&lt;/div&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.addCount.bind(this)&#125;&gt;点击+9&lt;/button&gt;</span><br><span class="line">                &lt;hr /&gt;</span><br><span class="line">                &lt;div&gt;当前Store中的数据是：&#123;this.state.reducer2.age&#125;&lt;/div&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.addAge.bind(this)&#125;&gt;点击+1&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 点击+9</span><br><span class="line">    addCount() &#123;</span><br><span class="line">        // 描述数据如何更改的对象，其必须有type属性</span><br><span class="line">        let action = &#123; type: &quot;mod_count&quot;, payload: 9 &#125;;</span><br><span class="line">        // 通过store.dispatch去派发action（会将该action派发给所有的reducer，每个reducer都会被执行，因此一定要注意type的取值）</span><br><span class="line">        store.dispatch(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 点击+1</span><br><span class="line">    addAge() &#123;</span><br><span class="line">        let action = &#123; type: &quot;mod_age&quot;, payload: 1 &#125;;</span><br><span class="line">        store.dispatch(action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure><p>c. 修改操作</p><p>视图组件中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3. +9这个修改操作需要通过普通对象去描述（actions）</span></span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">        <span class="comment">// type是用于在reducer方法中做条件判断用的</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>,</span><br><span class="line">        <span class="comment">// 另一个属性用于声明本次修改具体的值是多少</span></span><br><span class="line">        <span class="attr">payload</span>: <span class="number">9</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 派发修改任务</span></span><br><span class="line">    store.<span class="title function_">dispatch</span>(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仓库文件的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = defaultState, actions</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(actions);</span><br><span class="line">    <span class="comment">//判断是否是加法操作</span></span><br><span class="line">    <span class="keyword">if</span> (actions.<span class="property">type</span> === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + actions.<span class="property">payload</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在返回之前写修改数据源的操作</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d. 回显新的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// 2. 在视图组件中获取初始的仓库数据</span></span><br><span class="line">    <span class="comment">// getState()方法是store对象内置的方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = store.<span class="title function_">getState</span>();</span><br><span class="line">    <span class="comment">// 4. 订阅新的数据</span></span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取新数据修改当前的state</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">() =&gt;</span> store.<span class="title function_">getState</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个reducer，需要通过<code>combineReducers</code>方法进行合并，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并reducer</span></span><br><span class="line"><span class="comment">// 有点类似于vuex的命名空间</span></span><br><span class="line"><span class="keyword">const</span> reducers = <span class="title function_">combineReducers</span>(&#123; reducer, reducer2 &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// c. 创建store对象（通过createStore方法），目前（后续有变）其参数就是reducer</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducers, <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION__</span>());</span><br></pre></td></tr></table></figure><h2 id="4、模块化"><a href="#4、模块化" class="headerlink" title="4、模块化"></a>4、模块化</h2><p>针对redux的模块化，在一个常规项目中会将其代码拆分成以下几个部分：</p><ul><li><p>States：建立同名目录，存放模块化之后的state（默认数据源）</p></li><li><p>Reducers，建立同名目录，存放模块化之后的reducer</p></li><li><p>Actions：建立同名目录，存放模块化之后的action</p></li><li><p>Type（可选）：建立同名目录，存放独立的type声明</p><ul><li>注意：在整个项目中，<strong>对于不同数据源的更改时使用的type名称不能重复</strong>，这个一定要注意。（原因redux在做修改数据的时候，<strong>其原理是依据type的值去循环每个reducer，找到匹配的去执行</strong>，为了避免出现同名，建议type集中书写）</li></ul></li></ul><p>具体实现，以项目的代码为准。</p><blockquote><p>由于代码已经经过模块化，在获取redux中的数据的时候需要更改获取方式，比如说之前获取count是写成：this.state.count，模块化之后需要写成：this.state.counter.count，比之前多了一个模块化的模块名称（等同于vuex中命名空间）</p></blockquote><h2 id="5、react-redux"><a href="#5、react-redux" class="headerlink" title="5、react-redux"></a>5、react-redux</h2><p>网址：<a href="https://react-redux.js.org/">https://react-redux.js.org/</a></p><p>React-Redux是Redux的官方针对React开发的扩展库，默认没有在React项目中安装，需要手动来安装。react-redux是依赖于redux，所以必须先安装redux。</p><p>我们可以理解为react-redux就是redux给我们提供一些高阶组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react-redux</span><br></pre></td></tr></table></figure><p>React-redux所能解决的问题是：</p><ul><li>使用它以后我们不需要在每个组件中再去 手动订阅数据的更新了。</li><li>没有了数据的初始化state赋值，当前组件自身state和这个redux不冲突了</li><li>使用本节的react-redux与下一节的redux-thunk并不是为了简化代码的，它们存在的意义是解决前面所遇到的问题</li></ul><p><strong>使用步骤</strong></p><ul><li><p>在项目入口文件中定义Provider</p><ul><li><p>该步骤的操作有点类似于之前组件通信中的context那块的操作</p></li><li><p>将整个仓库作为商品提供给App根组件，后续的所有的组件都可以获取到仓库store中的数据</p></li><li><p>注意：与context不一样，这里绑定数据使用的属性是“store”</p></li><li><p>src&#x2F;index.js文件中的示例代码：</p></li><li><pre><code class="js">// 导入import React from &quot;react&quot;;import ReactDOM from &quot;react-dom&quot;;// 导入providerimport &#123; Provider &#125; from &quot;react-redux&quot;;import store from &quot;./store/index&quot;;// 导入需要展示的组件import App from &quot;./Login&quot;;// 渲染视图// 在展示app组件的时候需要按照组件的形式进行操作ReactDOM.render(    &lt;Provider store=&#123;store&#125;&gt;        &lt;App&gt;&lt;/App&gt;    &lt;/Provider&gt;,    document.getElementById(&quot;root&quot;));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在需要使用redux的组件中使用</span><br><span class="line"></span><br><span class="line">  - 这个步骤与vuex中map系列函数（mapState，mapMutations，mapActions、mapGetters）的思想是一样的</span><br><span class="line"></span><br><span class="line">  - 思想：将仓库中的属性和方法映射成当前组件自身的属性和方法</span><br><span class="line"></span><br><span class="line">  - 在实际使用的时候组件中不再需要使用store对象了（包括初始的获取数据：store.getState()、store.dispatch(）、store.subscribe()）</span><br><span class="line"></span><br><span class="line">  - 步骤</span><br><span class="line"></span><br><span class="line">    - 在需要使用reudx的组件前面导入react-redux提供的高阶组件：connect</span><br><span class="line"></span><br><span class="line">    - 编写映射方法（请注意，这个方法映射不是类组件的方法，而是在类组件外写的方法）</span><br><span class="line"></span><br><span class="line">      - mapStateToProps(state)</span><br><span class="line">        - 作用：将仓库中的state数据源映射成本组件的属性props，返回一个props对象</span><br><span class="line">        - 参数：仓库中的state</span><br><span class="line">      - mapDispatchToProps(dispatch)</span><br><span class="line">        - 作用：将派发action的方法映射成当前组件自身的属性，该方法也要求返回一个对象，该对象中存放的就是派发action的方法集合</span><br><span class="line">        - 参数：dispatch如同之前的store.dispatch()</span><br><span class="line">      - 编写时，可以写箭头函数，也可以写常规函数</span><br><span class="line"></span><br><span class="line">    - 应用高阶组件connect，写法是固定的</span><br><span class="line"></span><br><span class="line">      - ~~~js</span><br><span class="line">        // 在组件最后导出的时候改写成如下：</span><br><span class="line">        export default connect(mapStateToProps,mapDispatchToProps)(ComponentName)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>组件中实际使用时的参考代码：以jsx为例</p></li><li><pre><code class="react">import React, &#123; Component &#125; from &quot;react&quot;;// 需要导入store// import store from &quot;../store/index&quot;;// 导入action创建模块（导出里面全部的方法）import * as actionCreate from &quot;../store/actions/index&quot;;// 导入typeimport &#123; MOD_COUNT, MOD_AGE &#125; from &quot;../store/types/index&quot;;// import * as types from &quot;../store/types/index&quot;;// 第一步：在需要使用redux组件中导入一个由react-redux提供的hocimport &#123; connect &#125; from &quot;react-redux&quot;;class Counter extends Component &#123;    // 在constructor中获取store中的数据    constructor(props) &#123;        super(props);        // 获取store数据（一次性，不具备响应式）        // this.state = store.getState();        // 订阅数据的更新        // store.subscribe(() =&gt; this.setState(() =&gt; store.getState()));    &#125;    render() &#123;        console.log(this.state);        return (            &lt;div&gt;                &lt;div&gt;当前Store中的数据是：&#123;this.props.tool.count&#125;&lt;/div&gt;                &lt;button onClick=&#123;this.props.addCount&#125;&gt;点击+9&lt;/button&gt;                &lt;hr /&gt;                &lt;div&gt;当前Store中的数据是：&#123;this.props.user.age&#125;&lt;/div&gt;                &lt;button onClick=&#123;this.props.addAge&#125;&gt;点击+1&lt;/button&gt;            &lt;/div&gt;        );    &#125;&#125;// 第二步：在类外面定义俩个映射方法// 将redux中的state数据源映射到本组件自身的props中function mapStateToProps(state) &#123;    // return state.user;    // return state.tool;    return state;&#125;// 将dispatch映射成自身组件的propsfunction mapDispatchToProps(dispatch) &#123;    // 该方法返回一个对象，对象中都是方法    return &#123;        addCount() &#123;            dispatch(actionCreate.createAction(MOD_COUNT, 9));        &#125;,        addAge() &#123;            dispatch(actionCreate.createAction(MOD_AGE, 1));        &#125;,    &#125;;&#125;// 第三步：应用HOC// connect函数的俩个参数顺序不能颠倒export default connect(mapStateToProps, mapDispatchToProps)(Counter);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 6、redux-thunk（中间件）</span><br><span class="line"></span><br><span class="line">通常情况下，action只是一个对象，不能包含异步操作，这导致了很多创建action的逻辑只能写在组件中，代码量较多也不便于复用，同时对该部分代码测试的时候也比较困难，**组件的业务逻辑也不清晰**，使用中间件了之后，可以通过actionCreator异步编写action，这样代码就会拆分到actionCreator中，可维护性大大提高，可以方便于测试、复用，同时actionCreator还集成了异步操作中不同的action派发机制，减少编码过程中的代码量。</span><br><span class="line"></span><br><span class="line">![](https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/f602da4624bbd2d6a94f60659d3425c6c718a225.png?sign=c2ad92a84b02dd359e3433318d1e6317&amp;t=600e8805)</span><br><span class="line"></span><br><span class="line">常见的异步库：</span><br><span class="line"></span><br><span class="line">- **Redux-thunk**</span><br><span class="line">- Redux-saga</span><br><span class="line">- Redux-effects</span><br><span class="line">- Redux-side-effects</span><br><span class="line">- Redux-loop</span><br><span class="line">- Redux-observable</span><br><span class="line">- …</span><br><span class="line"></span><br><span class="line">基于Promise的异步库：</span><br><span class="line"></span><br><span class="line">- Redux-promise</span><br><span class="line">- Redux-promises</span><br><span class="line">- Redux-simple-promise</span><br><span class="line">- Redux-promise-middleware</span><br><span class="line">- …</span><br><span class="line"></span><br><span class="line">这里我们使用一个Redux官方出品的中间件库：**redux-thunk**</span><br><span class="line"></span><br><span class="line">![](https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/19a9bd4441389b0de7378dbc88bd09cd43df515d.png?sign=befc0a76a6388904b5ec3cfb90add605&amp;t=5f99b565)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在使用前需要先安装这个中间件：</span><br><span class="line"></span><br><span class="line">~~~shell</span><br><span class="line">npm i -S redux-thunk</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>步骤：</p><ul><li><p>在仓库的创建文件<code>store/index.js</code>文件中导入中间件的应用方法，再去导入redux-thunk，并且应用</p><ul><li>导入redux提供的中间件使用的方法：applyMiddleware</li></ul></li><li><p>会产生报错（浏览器的redux调试工具的报错）需要解决</p><ul><li><p>解决思路：查看</p><p>，找解决办法</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/01/6e50a16108fda29d18af71d2cc157474c33df8de.png?sign=2532a8ce08844760f0e65ef26eabe329&t=600e8b12"></p><p>修改为的配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决插件报错的操作</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    <span class="comment">// 合并多个reducer（整合数据源）,不合并会报错</span></span><br><span class="line">    <span class="title function_">combineReducers</span>(&#123; counter, <span class="variable language_">global</span> &#125;),</span><br><span class="line">    <span class="comment">// 应用中间件</span></span><br><span class="line">    <span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line">    <span class="comment">// 必须要加上一段插件的配置工具，才能在浏览器中使用redux扩展</span></span><br><span class="line">    <span class="comment">// window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>去需要做异步处理的action的位置去使用异步实现（通过dispatch派发action）</p><ul><li><pre><code class="js">// - 异步方法（载荷可能是异步获取的数据）export const createActionAsync = (type, payload) =&gt; &#123;    // 异步代码先不写（暂时没有异步中间件）    // return &#123; type, payload &#125;;    // setTimeout(() =&gt; &#123;    //     return &#123; type, payload &#125;;    // &#125;, 1000);    // 异步写法    return (dispatch) =&gt; &#123;        setTimeout(() =&gt; &#123;            dispatch(&#123; type, payload &#125;);        &#125;, 3000);    &#125;;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 7、面试题：redux优化</span><br><span class="line"></span><br><span class="line">问题：redux是用于大规模数据管理的，一个项目中可能会有很多的数据，这就导致模块化后会产生若干个reducer需要在store/index.js中进行导入，也就会出现以下情况（举例）：</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">import search from &quot;./Reducers/Reducer1&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer2&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer3&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer4&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer5&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer6&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer7&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer8&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer9&quot;;</span><br><span class="line">import search from &quot;./Reducers/Reducer10&quot;;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>如何对其进行优化？</p><p>解决思路：通过编写一个方法，实现指定文件夹的遍历，实现自动导入。</p><p>核心方法：require.context()</p><blockquote><p>该方法接受3个参数：</p><p>参数1：目录</p><p>参数2：是否递归遍历，布尔值</p><p>参数3：正则表达式</p></blockquote><p>代码实现：</p><p>&#x3D;&#x3D;注意：写该优化代码的实现必须要写在所有的import语句之后&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码优化，批量导入</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;./reducers&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="comment">// 比较固定的处理代码</span></span><br><span class="line"><span class="keyword">let</span> members = &#123;&#125;; <span class="comment">// 组合成员用的</span></span><br><span class="line">files.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// element是对应的模块文件的路径</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">    <span class="comment">// 依据路径获取导出的成员</span></span><br><span class="line">    <span class="keyword">let</span> member = <span class="title function_">files</span>(element).<span class="property">default</span>;</span><br><span class="line">    <span class="comment">// 获取文件名充当对象的属性名</span></span><br><span class="line">    <span class="keyword">let</span> filename = element.<span class="title function_">replace</span>(<span class="regexp">/(.*\/)*([^.]+).*/gi</span>, <span class="string">&quot;$2&quot;</span>);</span><br><span class="line">    <span class="comment">// 组合成员</span></span><br><span class="line">    members[filename] = member;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>作业：vue综合案例的时候不是有nodejs，请使用当时的nodejs代码，结合受控&#x2F;非受控组件，实现react的登录页面（不用管样式），登录成功之后将token保存到redux中。</p><h1 id="十三、路由"><a href="#十三、路由" class="headerlink" title="十三、路由"></a>十三、路由</h1><h2 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h2><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/cea272f101176b948ac627959723ae3a93a0e4b9.png?sign=a44bce7e29d23549df61fd1be8bbc8ea&t=5f9abd07"></p><p>React Router官网：<a href="https://reactrouter.com/">https://reactrouter.com/</a></p><p>使用用React Router前需要先进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react-router-dom</span><br></pre></td></tr></table></figure><p>React Router现在的主版本是5，于2019年3月21日搞笑的发布，<a href="https://reacttraining.com/blog/react-router-v5/">搞笑的官网链接</a>， 本来是要发布4.4的版本的，结果成了5。从4开始，使用方式相对于之前版本的思想有所不同。之前版本的思想是传统的思想：<strong>路由应该统一在一处渲染</strong>， Router 4之后是这样的思想：<strong>一切皆组件</strong>。</p><h2 id="2、路由的使用"><a href="#2、路由的使用" class="headerlink" title="2、路由的使用"></a>2、路由的使用</h2><h3 id="2-1、相关组件"><a href="#2-1、相关组件" class="headerlink" title="2.1、相关组件"></a>2.1、相关组件</h3><p>如前面介绍里说的，自Router 4之后的思想是<code>一切皆组件</code>，所以在正式开始学习React路由前需要先对几个组件要有所掌握：</p><ul><li>Router组件（别名，真实是不存在的，为了简写路由模式的组件名称）：<strong>包裹整个应用</strong>（单个具体的组件&#x2F;<strong>根组件</strong>），一个React应用只需要使用一次<ul><li>注意：<strong>在react中，不存在类似于vue的路由配置文件，对于前端路由模式的选择，我们可以通过该组件完成</strong></li><li>Router类型： HashRouter和BrowserRouter<ul><li>HashRouter： 使用URL的哈希值实现 （localhost:3000&#x2F;#&#x2F;first）</li><li>BrowserRouter：使用H5的history API实现（localhost3000&#x2F;first）</li></ul></li></ul></li><li><strong>Link</strong>&#x2F;NavLink组件：用于指定导航链接（a标签）就是做声明式导航的（类似于vue中的<code>router-link组件</code>）<ul><li>最终Link会编译成a标签，而to属性会被编译成 a标签的href属性</li></ul></li><li>Route组件：指定路由展示组件相关信息（组件渲染）【<strong>路由规则</strong>】{path: xx,component:xxx}<ul><li>path属性：路由规则，这里需要跟Link组件里面to属性的值一致</li><li>component属性：展示的组件</li><li>语法：<Route path="路径" component={组件}></Route></li><li>该组件除了具备定义路由规则功能外，还有类似于vue中<code>router-view</code>的功能</li></ul></li></ul><p><strong>各个组件之间的关系</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/10/2bdaba50f309c0a59921c7e188597c744931f703.png?sign=6e90bed85333f028465d58ca7faae7c7&t=5f9abe65"></p><blockquote><p>注意：<code>Link</code>和<code>Route</code>组件必须被<code>Router</code>组件给包裹，否则报错。</p></blockquote><h3 id="2-2、声明式导航"><a href="#2-2、声明式导航" class="headerlink" title="2.2、声明式导航"></a>2.2、声明式导航</h3><ul><li>在<code>src/index.js</code>文件中定义一个路由模式（可选，也可以在具体的某个组件中使用Router）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由模式</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 provider</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./Store/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 使用Router包裹根组件 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>在根组件<code>src/App.js</code>中引入路由相关组件（根据自身需要选择路由模式），并使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp10</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp10&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cmp11</span> <span class="keyword">from</span> <span class="string">&quot;./Components/Cmp11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>导航区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cmp10&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cmp11&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>在写上述代码时注意，路由自带组件的顺序嵌套关系，组件<code>&lt;Link&gt;&lt;/Link&gt;</code>和组件<code>&lt;Route&gt;&lt;/Route&gt;</code>必须被组件<code>&lt;Router&gt;&lt;/Router&gt;</code>给包裹着。</p><blockquote><p>需要注意：</p><p>刨除样式的影响，<code>Route</code>组件在HTML代码中的位置决定了渲染后其在页面中显示的位置。如果<code>Route</code>放在最后，则其显示的时候也在最后；若其放在渲染内容的最前面，相应的显示也会在最开始。</p></blockquote><h3 id="2-3、编程式导航"><a href="#2-3、编程式导航" class="headerlink" title="2.3、编程式导航"></a>2.3、编程式导航</h3><p>react-router-dom中通过history对象中的push&#x2F;go等方法实现编程式导航功能，这一点与之前的vue路由还是很相似的。</p><p>形如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">  <span class="attr">search</span>: <span class="string">&quot;from=404&quot;</span>,<span class="comment">// 表示传递查询字符串</span></span><br><span class="line">  <span class="attr">state</span>: &#123;<span class="comment">// 隐式传参，地址栏不体现</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定给定的数字（正数或负数）决定去往历史栈中的哪个地址，正数往未来，负数往过去</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>请勿在根组件中写编程式导航，因为根组件默认是没有props对象，解决办法见后续。</p></blockquote><h2 id="3、路由参数"><a href="#3、路由参数" class="headerlink" title="3、路由参数"></a>3、路由参数</h2><p>路由参数：在Route定义渲染组件时给定动态绑定的参数。</p><p>React路由传参方式有三种：</p><ul><li>&#x3D;&#x3D;动态路由参数（param）&#x3D;&#x3D;<ul><li>以“&#x2F;film&#x2F;detail&#x2F;:id”形式传递的数据</li><li>在目标页面路由中传递</li><li>在落地组件中通过<code>this.props.match.params</code>得到</li><li>一般用于restful规范下的开发</li></ul></li><li>查询字符串（query）<ul><li>通过地址栏中的 <code>?key=value&amp;key=value</code>传递</li><li>在落地组件中通过<code>this.props.location.search</code>得到</li><li>由于得到的数据是带“?”的，还需要进一步加工处理之后才能使用，因此建议少用或者不用</li></ul></li><li><strong>隐</strong>式传参（state），通过地址栏是观察不到的<ul><li>不合适写在声明式导航中，写在编程式导航中更加合适</li><li>一般数用于<strong>埋点</strong>数据<ul><li>简单的讲，埋点是将部分标记隐藏起来，等待用户去触发，因为这个事情不想让用户看到（需要做一些数据的收集，后续做分析），因此会使用隐式传参的方式</li></ul></li><li>在落地组件中通过<code>this.props.location.state</code>得到</li></ul></li></ul><p>接收示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="comment">// 接收动态路由参数</span></span><br><span class="line">        <span class="attr">news_id</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">        <span class="comment">// 接收查询字符串并处理</span></span><br><span class="line">        <span class="attr">query</span>: querystring.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">slice</span>(<span class="number">1</span>)),</span><br><span class="line">        <span class="comment">// 接收state</span></span><br><span class="line">        <span class="attr">state</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、嵌套路由"><a href="#4、嵌套路由" class="headerlink" title="4、嵌套路由"></a>4、嵌套路由</h2><p>在有一些功能中，往往请求地址的前缀是相同的，不同的只是后面一部份，此时就可以使用多级路由（路由嵌套）来实现此路由的定义实现。</p><p>例如，路由规则如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/admin/index</span><br><span class="line">/admin/user</span><br><span class="line">/admin/goods</span><br><span class="line">/admin/add</span><br></pre></td></tr></table></figure><p>它们路由前缀的admin是相同的，不同的只是后面一部份。</p><p><strong>思想：</strong></p><ul><li>借助react路由默认是<strong>非严格匹配模式</strong>的便利<ul><li>例如。上述路由都有<code>/admin</code>开头，那么我们可以在路由定义时定义一个组件的路由规则“&#x2F;admin”。如果这样做，则上述4个路由都会匹配上这个路由规则。匹配的这个组件我们称之为父组件</li><li>扩展：如果某个路由需要使用严格模式，请在这个路由上加上一个属性：exact</li></ul></li><li>再在父组件中写嵌套的子路由的匹配规则</li></ul><p><strong>实现方式</strong></p><ul><li>先需要定义个组件，用于负责匹配同一前缀的路由，将匹配到的路由指向到具体的模块</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/admin&quot;</span> component=&#123;<span class="title class_">Admin</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>创建模块路由组件（父）负责指定各个子路由的去向</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取前缀，供后续地址做路由拼接</span></span><br><span class="line">    <span class="keyword">let</span> prefix = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">path</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎使用后台管理程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefix</span>&#125;/<span class="attr">user</span>`&#125; <span class="attr">component</span>=<span class="string">&#123;User&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefix</span>&#125;/<span class="attr">goods</span>`&#125; <span class="attr">component</span>=<span class="string">&#123;Goods&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建父路由中的子路由需要的组件</li></ul><h2 id="5、重定向与404路由"><a href="#5、重定向与404路由" class="headerlink" title="5、重定向与404路由"></a>5、重定向与404路由</h2><h3 id="5-1、重定向路由"><a href="#5-1、重定向路由" class="headerlink" title="5.1、重定向路由"></a>5.1、重定向路由</h3><p>React的重定向路由有以下写法：</p><blockquote><p>在重定向的时候需要知道，从哪里来，到哪里去，因此该组件需要使用2个属性：</p><ul><li>from：匹配需要重定向的路由</li><li>to：需要去往的路由</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Redirect &#125; from &quot;react-router-dom&quot;</span><br><span class="line"></span><br><span class="line">&lt;Redirect from=&quot;/from&quot; to=&quot;/to&quot;&gt;&lt;/Redirect&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2、404路由"><a href="#5-2、404路由" class="headerlink" title="5.2、404路由"></a>5.2、404路由</h3><p>项目中少不了404页面的配置，在React里面配置404页面需要注意：</p><ul><li><p>需要用到Switch组件，让其去包裹路由的<code>Route</code>组件（Switch组件保证只渲染其中一个子路由）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&quot;./Components/404&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">NotFound</span>&gt;</span><span class="tag">&lt;/<span class="name">NotFound</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：在404路由的位置，不需要给定具体的路由匹配规则，不给<code>path</code>表示匹配<code>*</code>，即所有的路由都会匹配，因此用404路由一定要加<code>Switch</code>匹配一个路由。</p><p>注意：并不会因为当前是404路由&#x2F;重定向路由而改变状态码，因为当前写的是前端的内容，状态码是后端提供的，只有等后期上线以后才能有状态码。</p></blockquote><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>家<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span> &amp;emsp;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&amp;emsp;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&amp;emsp;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&quot;/&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cmp11&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cmp12&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Cmp13&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="6、三种路由渲染方式"><a href="#6、三种路由渲染方式" class="headerlink" title="6、三种路由渲染方式"></a>6、三种路由渲染方式</h2><p>Route路由渲染组件是用于路由规则匹配成功后组件渲染容器，此组件提供了3种方式组件渲染方式：</p><ul><li><p>component属性（<strong>组件对象</strong>&#x2F;函数）</p><ul><li><pre><code class="jsx">&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ~~~jsx</span><br><span class="line">  &lt;Route path=&quot;/home&quot; component=&#123;() =&gt; &lt;Home /&gt;&#125; /&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>render属性（函数）</p><ul><li><pre><code class="jsx">&lt;Route path=&quot;/home&quot; render=&#123;() =&gt; &lt;Home /&gt;&#125; /&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- children属性（组件/**函数**）</span><br><span class="line"></span><br><span class="line">  - ~~~jsx</span><br><span class="line">    &lt;Route path=&quot;/about&quot; children=&#123;() =&gt; &#123;</span><br><span class="line">    if(props.match)&#123;</span><br><span class="line">            return &lt;div&gt;children渲染&lt;/div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="jsx">&lt;Route path=&quot;/about&quot; children=&#123;&lt;About /&gt;&#125; /&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**注意点**</span><br><span class="line"></span><br><span class="line">- component可以使用组件类渲染和函数方式渲染，render只能使用函数，children使用函数或直接使用组件</span><br><span class="line">- 当children的值是一个函数时，无论当前地址和path路径匹不匹配，都将会执行children对应的函数，当children的值为一个组件时，当前地址和path不匹配时，路由组件不渲染</span><br><span class="line">- 除组件对象方式外，其余方式会使得渲染的组件丢失props</span><br><span class="line">- 函数式渲染方式支持传递传递参数，其有一个形参“props”</span><br><span class="line">- children函数方式渲染，会在形参中接受到一个对象，对象中match属性如果当前地址匹配成功返回对象，否则null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 7、withRouter高阶组件</span><br><span class="line"></span><br><span class="line">**作用：把不是通过路由切换过来的组件中，将react-router 的 history、location、match 三个对象传入props对象上**</span><br><span class="line"></span><br><span class="line">默认情况下，必须是经过路由匹配渲染的组件才存在this.props，才拥有路由参数，才能使用编程式导航的写法，才能执行this.props.history.push(&#x27;/uri&#x27;)跳转到对应路由的页面。然而不是所有组件都直接与路由相连的，当这些组件需要路由参数时，使用withRouter就可以给此组件传入路由参数，此时就可以使用this.props。</span><br><span class="line"></span><br><span class="line">~~~jsx</span><br><span class="line">// 引入withRouter</span><br><span class="line">import &#123; withRouter&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"></span><br><span class="line">// 执行一下withRouter</span><br><span class="line">export default withRouter(Cmp)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><blockquote><p>该高阶组件是路由包自带的东西，因此只需要引入+使用就可以了，不需要自己定义。</p></blockquote><h2 id="8、封装自定义组件"><a href="#8、封装自定义组件" class="headerlink" title="8、封装自定义组件"></a>8、封装自定义组件</h2><p>意义：</p><ul><li><strong>尝试去封装一个组件，开启封装的新世界</strong></li><li>希望在react中也能够使用类似于vue的自定义标签名的导航组件</li><li>综合练习今天的内容</li><li>解释children渲染方式函数式的好处</li></ul><p>需求：请自行封装一个组件，组件名叫做<code>Nav</code>，要求实现可以自定义<code>tag</code>属性，来决定最终被渲染成的标签，最好还可以给个样式，比如说，选中的菜单给个红色字。</p><p><strong>封装的组件：Nav</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义封装导航组件</span></span><br><span class="line"><span class="comment">// 使用children的函数式渲染方式来解决组件的渲染问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 导入需要用的组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nav</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 先获取菜单需要的数据（插槽）</span></span><br><span class="line">        <span class="keyword">let</span> text = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">        <span class="comment">// 声明需要用的标签类型，如果没传递则默认为a标签（坑）</span></span><br><span class="line">        <span class="comment">// 变量首字母需要大写</span></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Tag</span> = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">tag</span> ? <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">tag</span> : <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取要去的地址</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">to</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">exact</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">path</span>=<span class="string">&#123;url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">children</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                        // 匹配上的，match为对象；否则为null</span></span><br><span class="line"><span class="language-xml">                        let style = &#123;&#125;;</span></span><br><span class="line"><span class="language-xml">                        if (props.match) &#123;</span></span><br><span class="line"><span class="language-xml">                            // 激活</span></span><br><span class="line"><span class="language-xml">                            style = &#123; color: &quot;red&quot; &#125;;</span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                        // console.log(props);</span></span><br><span class="line"><span class="language-xml">                        return (</span></span><br><span class="line"><span class="language-xml">                            // 样式绑定+事件处理</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Tag</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go.bind(this,</span> <span class="attr">url</span>)&#125; <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                &#123;text&#125;</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Tag</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        );</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                &gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 事件处理程序</span></span><br><span class="line">    <span class="title function_">go</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="comment">// 编程式导航</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Nav</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>封装组件的应用</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装后组件需要被应用，测试组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Nav</span> <span class="keyword">from</span> <span class="string">&quot;./Nav&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Nav</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            首页</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Nav</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            新闻</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Nav</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;h2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            关于</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="十四、三方组件"><a href="#十四、三方组件" class="headerlink" title="十四、三方组件"></a>十四、三方组件</h1><h2 id="1、过渡动画组件"><a href="#1、过渡动画组件" class="headerlink" title="1、过渡动画组件"></a>1、过渡动画组件</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p>在项目中可能会有一些动画效果展示或是页面切换效果，使用css动画的方式虽然可以实现，但比较局限，涉及到一些js动画的时候没法处理了。<code>react-transition-group</code>是react的第三方模块，借助这个模块可以更方便的实现更加复杂的动画效果。</p><p>地址：<a href="https://reactcommunity.org/react-transition-group/css-transition">https://reactcommunity.org/react-transition-group/css-transition</a></p><p>该三方包的安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react-transition-group</span><br></pre></td></tr></table></figure><h3 id="1-2、基本使用"><a href="#1-2、基本使用" class="headerlink" title="1.2、基本使用"></a>1.2、基本使用</h3><p>步骤：</p><ul><li>需要定义好css动画的样式</li><li>按照transition动画组件的语法去使用css样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* app.css，来自于官网 */</span></span><br><span class="line"><span class="selector-class">.alert-enter</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">300ms</span>, transform <span class="number">300ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-exit</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-exit-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">300ms</span>, transform <span class="number">300ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert-exit-done</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/app.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="comment">// 是否显示</span></span><br><span class="line">        <span class="attr">isShow</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    handleToggole = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">isShow</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isShow</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#123;/* <span class="attr">in</span>：<span class="attr">表示控制默认是否显示</span> */&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">in</span>=<span class="string">&#123;this.state.isShow&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#123;/* <span class="attr">timeout</span>：<span class="attr">动画所持续的时间</span>，<span class="attr">单位</span>：<span class="attr">毫秒</span> */&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">timeout</span>=<span class="string">&#123;</span> <span class="attr">300</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#123;/*  <span class="attr">classNames</span>：<span class="attr">class样式类名</span> */&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">classNames</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">enter:</span> &quot;<span class="attr">alert-enter</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">enterActive:</span> &quot;<span class="attr">alert-enter-active</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">exit:</span> &quot;<span class="attr">alert-exit</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">exitActive:</span> &quot;<span class="attr">alert-exit-active</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#123;/* <span class="attr">unmountOnExit</span>：<span class="attr">在元素退出的时候删除对应的DOM</span> */&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>玩转React Transition<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleToggole&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    触发动画</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>在上述demo中，我们的动画样式来自于官网的案例，但是以后写项目的时候样式肯定不能用刚才的，那此时就需要我们自己写样式了，这是一个耗时而且费力的工作。为了便于高效开发，对于常见的动画效果前辈们已经给我们造好轮子了，我们只需要拿过来直接使用即可。因此推荐使用常见的一些动画库，比如：<a href="https://animate.style/">animate.css</a>。</p><p>在<code>animate.css</code>官网找到<code>CDN</code>外链地址，打开后将<code>animate.min.css</code>文件保存到本地：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/3f924521014c9e455a286396ab10f976dddc4b52.png?sign=caf9b48531e9420a948f51cac724c3f0&t=5fa011fd"></p><p>随后将<code>animate.min.css</code>文件放到项目中，假定放置到<code>./src/assets/css/animate.min.css</code>，则随后在需要使用<code>animate</code>动画的组件中按照以下方式进行导入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/css/animate.min.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>导入好以后，根据<code>animate</code>官网的演示效果复制所需要的动画样式类名（&#x3D;&#x3D;切勿使用浏览器自带的翻译功能翻译页面，否则会导致样式演示效果无法预览&#x3D;&#x3D;），替换<code>react-transition-group</code>配置部分的对应<code>classNames</code>样式值名即可，例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">in</span>=<span class="string">&#123;this.state.isShow&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">timeout</span>=<span class="string">&#123;1000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">classNames</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">enter:</span> &quot;<span class="attr">animate__animated</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">enterActive:</span> &quot;<span class="attr">animate__fadeInDown</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">exit:</span> &quot;<span class="attr">animate__animated</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">exitActive:</span> &quot;<span class="attr">animate__fadeOutDown</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>玩转React Transition<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleToggole&#125;</span>&gt;</span>触发动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3、列表过渡动画"><a href="#1-3、列表过渡动画" class="headerlink" title="1.3、列表过渡动画"></a>1.3、列表过渡动画</h3><p><strong>核心代码</strong></p><blockquote><p>此处单独靠<code>CSSTransition</code>是不能实现列表的动画的，<strong>因为<code>CSSTransition</code>只针对单个元素进行动画效果</strong></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">TransitionGroup</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">TransitionGroup</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>案例目标</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/973166ca8710446781ddd9d05ae5850023ec6147.gif?sign=432aae3ddc51f15a75b01f90e685ffe3&t=5fa030cd"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">// 导入动画组件包中的内容</span><br><span class="line">import &#123; TransitionGroup, CSSTransition &#125; from &quot;react-transition-group&quot;;</span><br><span class="line">import &quot;./assets/css/animate.min.css&quot;;</span><br><span class="line"></span><br><span class="line">// 实现步骤：</span><br><span class="line">// 1. 按照两步去走（任务分解）</span><br><span class="line">//      - 先实现没有动画的效果</span><br><span class="line">//      - 实现上一步后再去考虑加上动画效果</span><br><span class="line">// 2. 以当前案例为例，有有少个h5标签，最终其实就有多少个CSSTransition组件</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        username: [&quot;张三&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;button onClick=&#123;this.handler.bind(this)&#125;&gt;添加&lt;/button&gt;</span><br><span class="line">                    &lt;hr /&gt;</span><br><span class="line">                    &#123;/* 展示列表的数据 */&#125;</span><br><span class="line">                    &lt;TransitionGroup&gt;</span><br><span class="line">                        &#123;this.state.username.map((item, index) =&gt; &#123;</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;CSSTransition</span><br><span class="line">                                    timeout=&#123;1000&#125;</span><br><span class="line">                                    classNames=&#123;&#123;</span><br><span class="line">                                        enter: &quot;animate__animated&quot;,</span><br><span class="line">                                        enterActive:</span><br><span class="line">                                            &quot;animate__animated animate__fadeInUp&quot;</span><br><span class="line">                                    &#125;&#125;</span><br><span class="line">                                    key=&#123;index&#125;</span><br><span class="line">                                &gt;</span><br><span class="line">                                    &lt;h5 key=&#123;index&#125;&gt;&#123;item&#125;&lt;/h5&gt;</span><br><span class="line">                                &lt;/CSSTransition&gt;</span><br><span class="line">                            );</span><br><span class="line">                        &#125;)&#125;</span><br><span class="line">                    &lt;/TransitionGroup&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handler() &#123;</span><br><span class="line">        this.setState((state) =&gt; &#123;</span><br><span class="line">            // 产生新的数据（不重复的名字）</span><br><span class="line">            let tmp = &quot;李四&quot; + Math.random();</span><br><span class="line">            return &#123; username: [...state.username, tmp] &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="1-4、路由过渡动画"><a href="#1-4、路由过渡动画" class="headerlink" title="1.4、路由过渡动画"></a>1.4、路由过渡动画</h3><p>路由过渡动画，即路由切换时为其添加动画效果。</p><p>其实现思路与列表的过渡动画类似。</p><p><strong>案例效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/1142508302ec6516107a3e67dd45bc439a085e37.gif?sign=1b4ceedc05b3583d5d4055b2c2747a30&t=5fa0463a"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">// 思想步骤：先去实现不带动画效果的，再实现动画效果</span><br><span class="line">// 这里有一个坑：</span><br><span class="line"></span><br><span class="line">import &#123; Route, Link, Switch, withRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import About from &quot;./Components/About&quot;;</span><br><span class="line">import News from &quot;./Components/News&quot;;</span><br><span class="line">// 导入动画组件</span><br><span class="line">import &#123; TransitionGroup,CSSTransition &#125; from &quot;react-transition-group&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;./assets/css/animate.min.css&quot;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=&quot;/news&quot;&gt;新闻&lt;/Link&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">                &lt;TransitionGroup&gt;</span><br><span class="line">                    &#123;/* 因为switch只会匹配一个路由，因此可以直接使用CSSTransition包裹Switch */&#125;</span><br><span class="line">                    &lt;CSSTransition</span><br><span class="line">                        timeout=&#123;1000&#125;</span><br><span class="line">                        classNames=&#123;&#123;</span><br><span class="line">                            enter: &quot;animate__animated&quot;,</span><br><span class="line">                            enterActive:</span><br><span class="line">                                &quot;animate__animated animate__fadeInDown&quot;,</span><br><span class="line">                            exit: &quot;animate__animated&quot;,</span><br><span class="line">                            exitActive: &quot;animate__animated animate__fadeOutUp&quot;,</span><br><span class="line">                        &#125;&#125;</span><br><span class="line">                        // 加key让CSSTransition知道自己的内容发生了变化，要求key值不重复</span><br><span class="line">                        // 此处的key并不是为了提供效率，而是为了让框架强制重新渲染CSSTransition</span><br><span class="line">                        key=&#123;this.props.location.pathname&#125;</span><br><span class="line">                    &gt;</span><br><span class="line">                        &lt;Switch&gt;</span><br><span class="line">                            &lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                            &lt;Route path=&quot;/news&quot; component=&#123;News&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                        &lt;/Switch&gt;</span><br><span class="line">                    &lt;/CSSTransition&gt;</span><br><span class="line">                &lt;/TransitionGroup&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default withRouter(App);</span><br></pre></td></tr></table></figure><h2 id="2、css-in-js技术"><a href="#2、css-in-js技术" class="headerlink" title="2、css-in-js技术"></a>2、css-in-js技术</h2><h3 id="2-1、简介"><a href="#2-1、简介" class="headerlink" title="2.1、简介"></a>2.1、简介</h3><p>CSS-in-JS是一种技术，而不是一个具体的库实现。简单来说CSS-in-JS就是将应用的CSS样式写在JavaScript文件里面，而不是独立为一些css，scss或less之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue有属于框架自己的一套定义样式的方案。</p><ul><li>在js文件中写css就是css-in-js技术</li><li>好处：<ul><li>支持一些js的特性<ul><li>继承</li><li>变量</li><li>函数</li></ul></li><li>支持框架的特性<ul><li>传值特性</li></ul></li></ul></li></ul><p><code>styled-components</code> 应该是CSS-in-JS最热门的一个库，通过<code>styled-components</code>，你可以使用ES6的标签模板字符串语法，为需要styled的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器（比较随意的），并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证<strong>全局唯一性</strong>来避免样式发生冲突。</p><ul><li>通过ES6里面的模版字符串形式写css样式（遵循之前css样式代码的写法）</li><li>每个样式选择器都会在编译之后自动被添加上一个hash值（全局唯一）</li></ul><p>使用<code>styled-components</code>前需要安装，安装的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S styled-components</span><br></pre></td></tr></table></figure><p>由于css后期会在模版字符串中编写，默认情况下vscode是没有css样式代码片段的（写样式的时候是没有代码提示的），为了提高css代码在模版字符串中编写的效率，此处强烈建议安装一个vscode的扩展：vscode-styled-components</p><h3 id="2-2、定义样式与使用"><a href="#2-2、定义样式与使用" class="headerlink" title="2.2、定义样式与使用"></a>2.2、定义样式与使用</h3><p><strong>定义</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 110px;</span></span><br><span class="line"><span class="string">    color: pink;</span></span><br><span class="line"><span class="string">    font-family: 华文行楷;</span></span><br><span class="line"><span class="string">    background-color: black;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Title</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>在使用的时候成员会被当作组件去使用（首字母大写）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 就像使用常规 React 组件一样使用 Title</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Title</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./assets/style/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Title</span>&gt;</span>桃之夭夭，灼灼其华。<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/0d46a4677c99b01d7caaecc08ec7349d21962da9.png?sign=d576889f41bac254c738e300e5de8c23&t=5fa04de3"></p><h3 id="2-3、样式继承"><a href="#2-3、样式继承" class="headerlink" title="2.3、样式继承"></a>2.3、样式继承</h3><p>在<code>styled-components</code>中也可以使用样式的继承，其继承思想与<code>react</code>的组件继承相似：</p><ul><li>继承父的样式：父有，子没有的样式，一旦继承则子也有了</li><li>重载父的样式：父有，子也有的样式，一旦继承则子覆盖父的样式</li></ul><p><strong>样式继承</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 20px;</span></span><br><span class="line"><span class="string">    border: 1px solid red;</span></span><br><span class="line"><span class="string">    border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 一个继承 Button 的新组件, 重载了一部分样式</span></span><br><span class="line"><span class="comment">// 继承会合并与父的样式，但是如果遇到样式冲突（相同），会以自己的为准</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button2</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    color: blue;</span></span><br><span class="line"><span class="string">    border-color: yellow;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Button2</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Button2</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./assets/style/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button</span>&gt;</span>我是第1个按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button2</span>&gt;</span>我是第2个按钮<span class="tag">&lt;/<span class="name">Button2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h3 id="2-4、属性传递"><a href="#2-4、属性传递" class="headerlink" title="2.4、属性传递"></a>2.4、属性传递</h3><p>属性传递：样式值的动态传参（组件传值）</p><p>基于<code>css-in-js</code>的特性，在<code>styled-components</code>中也允许我们使用<code>props</code>（父传子），这样一来，我们可以对部分需要的样式进行传参，很方便的动态控制样式的改变。</p><p><strong>属性传递（JS中接收）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数传递</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Input</span> = styled.<span class="property">input</span><span class="string">`</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;(props) =&gt; props.inputColor || <span class="string">&quot;red&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Input</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>动态传递参数</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./assets/style/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input</span> <span class="attr">defaultValue</span>=<span class="string">&quot;are you ok？&quot;</span> <span class="attr">inputColor</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="3、immutable-js"><a href="#3、immutable-js" class="headerlink" title="3、immutable.js"></a>3、immutable.js</h2><p>学习这个知识点并不是为了简化代码的写法，用它的原因是为了解决问题：解决项目当中状态大规模管理的深拷贝的问题（防止对象&#x2F;数组因为引用传递而在使用过程中出现的各种问题）。</p><h3 id="3-1、JS中数据修改问题"><a href="#3-1、JS中数据修改问题" class="headerlink" title="3.1、JS中数据修改问题"></a>3.1、JS中数据修改问题</h3><p>我们先来看一段熟悉的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&quot;梦比优斯&quot;</span>,</span><br><span class="line">        <span class="attr">obj</span>: &#123;</span><br><span class="line">            <span class="attr">y</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newState === <span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>由于js的<strong>对象和数组都是引用类型</strong>。所以newState的state实际上是指向于同一块内存地址的, 所以结果是newState和state是相等的。</p><p>此时，我们尝试修改一下数据：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    newState.<span class="property">str</span> = <span class="string">&quot;张三李四&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newState,<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，newState的修改也会引起state的修改（对象是引用传递）。要解决这个问题，js中提供了另一种修改数据的方式，要修改一个数据之前先制作一份数据的拷贝，像这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">    newState.<span class="property">str</span> = <span class="string">&quot;张三李四&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newState,<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用很多方式在js中复制数据，比如<code>…</code>,  <code>Object.assign</code>, <code>Object.freeze</code>, <code>slice</code>, <code>concat</code>, <code>map</code>, <code>filter</code>,  <code>reduce</code>等方式进行复制，但这些都是浅拷贝，就是只拷贝第一层数据，更深层的数据还是同一个引用，比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">    newState.<span class="property">str</span> = <span class="string">&quot;张三李四&quot;</span>;</span><br><span class="line">    newState.<span class="property">obj</span>.<span class="property">y</span> = <span class="number">2</span>;</span><br><span class="line">    newState.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newState,<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当在更改<code>newState</code>更深层次的数据的时候，还是会影响到<code>state</code>的值。如果要深层复制，就得一层一层的做<strong>递归拷贝</strong>，这是一个复杂的问题。虽然有些第三方的库已经帮我们做好了，但是深层复制是非常消耗性能的。那么这个问题如何解决呢？这就需要用到<code>immutable.js</code>了。</p><h3 id="3-2、介绍"><a href="#3-2、介绍" class="headerlink" title="3.2、介绍"></a>3.2、介绍</h3><p>项目地址：<a href="https://immutable-js.github.io/immutable-js/">https://immutable-js.github.io/immutable-js/</a></p><p>immutable.js出自Facebook，是最流行的<strong>不可变数据</strong>结构的实现之一。</p><p>不可变数据 (Immutable Data)就是一旦创建，就不能再被更改的数据。<strong>对Immutable对象的任何修改或添加删除操作都会返回一个新的Immutable对象</strong>。Immutable实现的原理是持久化数据结构（Persistent Data Structure），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免深层拷贝把所有节点都复制一遍带来的s性能损耗，Immutable使用了 <strong>结构共享</strong>（Structural Sharing），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享（不变）。</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/c806baf0dfe2be8bec988a411b2a6bad68c5685b.png?sign=643b01d5ca7626c46d98cea307809ff6&t=5fa1828b"></p><p>如果上面这张图不能直观的表现出变化，我们可以看下面这张图：</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2020/11/b3d75c9b8adeafc3dd5e11383a545c21cfc18a2c.gif?sign=537807d5a25d0fc0e7800003a9114e1b&t=5fa2321b"></p><p><strong>使用immutable.js的优缺点</strong></p><ul><li>优点<ul><li>降低mutable带来的复杂度</li><li>节省内存</li><li>历史追溯性（版本控制的感觉）。每时每刻的值都被保留了，想回退到哪一步只要简单的将数据取出就行。</li><li><strong>拥抱函数式编程</strong>。immutable本来就是函数式编程的概念，纯函数式编程的特点就是，只要输入一致，输出必然一致，相比于面向对象，这样开发组件和调试更方便。</li></ul></li><li>缺点<ul><li>需要重新学习api（我们需要去查阅文档，增加了学习成本）</li><li>资源包大小增加（源码大约5000行左右）</li><li>容易与原生对象混淆：由于api与原生不同，混用的话容易出错</li></ul></li></ul><p>与其他包一样，<code>immutable.js</code>包默认没有被安装到react中，因此学习使用前需要先进行安装到项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S immutable</span><br></pre></td></tr></table></figure><h3 id="3-3、常用API"><a href="#3-3、常用API" class="headerlink" title="3.3、常用API"></a>3.3、常用API</h3><p>immutable.js提供了许多永久不可变数据结构，包括： <code>List</code>，<code>Stack</code>，<code>Map</code>，<code>OrderedMap</code>，<code>Set</code>，<code>OrderedSet</code>和<code>Record</code>。为了满足工作开发需求，至少需要掌握以下API（API信息全部来自官网，除了以下体现到的API外，更多API请访问官网）：在使用的时候我们只是将其格式在两种之间来回转化，转化之后其就可以帮助我们解决深层拷贝的问题。（序列化与反序列化的感觉）</p><p>注意：当前还没有将immutable整合到框架，因此以下api测试的代码不要写在组件中。此处可以另起js文件，让这个js文件被入口文件包含即可。</p><h4 id="3-3-1、object转Map对象"><a href="#3-3-1、object转Map对象" class="headerlink" title="3.3.1、object转Map对象"></a>3.3.1、object转Map对象</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">mobile</span>: &#123; <span class="attr">public</span>: <span class="string">&quot;1300000000&quot;</span>, <span class="attr">private</span>: <span class="string">&quot;13333333333&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(state);</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="title class_">Map</span>(state);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较上的差异</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1 === map2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">equals</span>(map2));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">is</span>(map1, map2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上的差异</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">id</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">mobile</span>.<span class="property">private</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">get</span>(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">getIn</span>([<span class="string">&quot;mobile&quot;</span>,<span class="string">&quot;private&quot;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改上的差异</span></span><br><span class="line">state.<span class="property">name</span> = <span class="string">&quot;王二麻&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line"><span class="keyword">const</span> newMap1 = map1.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王二麻&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap1.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap1.<span class="title function_">setIn</span>([<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;private&quot;</span>], <span class="string">&quot;13800138000&quot;</span>).<span class="title function_">getIn</span>([<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;private&quot;</span>]));</span><br><span class="line"><span class="comment">// 重点Update</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap1.<span class="title function_">update</span>(<span class="string">&quot;age&quot;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> val + <span class="number">1</span>).<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap1.<span class="title function_">updateIn</span>([<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;private&quot;</span>], <span class="function">() =&gt;</span> <span class="string">&quot;13888888888&quot;</span>).<span class="title function_">getIn</span>([<span class="string">&quot;mobile&quot;</span>, <span class="string">&quot;private&quot;</span>]));</span><br></pre></td></tr></table></figure><h4 id="3-3-2、array转List对象"><a href="#3-3-2、array转List对象" class="headerlink" title="3.3.2、array转List对象"></a>3.3.2、array转List对象</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">List</span> &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = [<span class="string">&quot;灞波儿奔&quot;</span>, <span class="string">&quot;奔波儿灞&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> list = <span class="title class_">List</span>(state);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">get</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line">list = list.<span class="title function_">concat</span>([<span class="string">&quot;黑鱼精&quot;</span>, <span class="string">&quot;鲇鱼怪&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">get</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加</span></span><br><span class="line">list = list.<span class="title function_">push</span>(<span class="string">&quot;乱石山碧波潭&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">get</span>(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把List对象转成js数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">toArray</span>());</span><br></pre></td></tr></table></figure><h4 id="3-3-3、JS转immutable（Map）"><a href="#3-3-3、JS转immutable（Map）" class="headerlink" title="3.3.3、JS转immutable（Map）"></a>3.3.3、JS转immutable（Map）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Map</span>, is, fromJS &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line"><span class="attr">mobile</span>: &#123; <span class="attr">public</span>: <span class="string">&quot;1300000000&quot;</span>, <span class="attr">private</span>: <span class="string">&quot;13333333333&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转immutable对象（重点）</span></span><br><span class="line"><span class="keyword">const</span> immutable = <span class="title function_">fromJS</span>(state);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(immutable);</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(immutable.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(immutable.<span class="title function_">getIn</span>([<span class="string">&quot;mobile&quot;</span>,<span class="string">&quot;private&quot;</span>]));</span><br></pre></td></tr></table></figure><h4 id="3-3-4、immutable转JS"><a href="#3-3-4、immutable转JS" class="headerlink" title="3.3.4、immutable转JS"></a>3.3.4、immutable转JS</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Map</span>, is, fromJS &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line"><span class="attr">mobiles</span>: &#123; <span class="attr">public</span>: <span class="string">&quot;1300000000&quot;</span>, <span class="attr">private</span>: <span class="string">&quot;13333333333&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转immutable对象（重点）</span></span><br><span class="line"><span class="keyword">const</span> immutable = <span class="title function_">fromJS</span>(state);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(immutable.<span class="title function_">toJS</span>());</span><br></pre></td></tr></table></figure><p>注意：toJS方法不需要导入（本身就在map对象的原型上），导入了实际也不会被使用。</p><h3 id="3-4、Redux中集成"><a href="#3-4、Redux中集成" class="headerlink" title="3.4、Redux中集成"></a>3.4、Redux中集成</h3><p><a href="https://redux.js.org/recipes/using-immutablejs-with-redux">redux官网</a>推荐使用<a href="https://www.npmjs.com/package/redux-immutable">redux-immutable</a>进行redux和immutable的集成。<code>redux-immutable</code>包的安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S redux-immutable</span><br></pre></td></tr></table></figure><p>以登录案例为例，步骤如下：</p><ul><li>（固定）将redux仓库创建入口文件中合并reducer的方法改成redux-immutable提供的合并方法（新方法与之前的是同名的combineReducers）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块化操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// combineReducers方法是redux中内置的，作用是合并多个reducer和数据源，参数是一个对象，对象中属性值是单个reducer，而其属性名有点类似于vuex模块化时的命名空间的概念</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="comment">// 导入redux-thunk</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">&quot;./Reducers/counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">global</span> <span class="keyword">from</span> <span class="string">&quot;./Reducers/global&quot;</span>;</span><br><span class="line"><span class="comment">// 导入redux-immutable提供的合并reducer的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-immutable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决插件报错的操作</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="variable language_">window</span>.<span class="property">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span> || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    <span class="comment">// 合并多个reducer（整合数据源）,不合并会报错</span></span><br><span class="line">    <span class="title function_">combineReducers</span>(&#123; counter, <span class="variable language_">global</span> &#125;),</span><br><span class="line">    <span class="comment">// 应用中间件</span></span><br><span class="line">    <span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line">    <span class="comment">// 必须要加上一段插件的配置工具，才能在浏览器中使用redux扩展</span></span><br><span class="line">    <span class="comment">// window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ul><li>将数据源设置成immutable对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能模块公用的数据源</span></span><br><span class="line"><span class="comment">// 注意，api都是immutable中提供的，不要导入错了包</span></span><br><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">fromJS</span>(&#123;</span><br><span class="line">    <span class="attr">_token</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><ul><li>在组件中使用的时候将其转成js对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将数据源的数据映射成当前组件自身的props属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(state);</span></span><br><span class="line">    <span class="comment">// 返回props对象</span></span><br><span class="line">    <span class="comment">// 这里可以获取整个仓库的数据：state</span></span><br><span class="line">    <span class="comment">// 也可以只要特定模块的数据，例如：state.global</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="title function_">toJS</span>().<span class="property">global</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说这里没有使用react-redux，而是使用的之前的订阅的方式，则需要在订阅那个位置做数据格式的转化。</p><ul><li>在修改的时候使用immutable的api实现修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jwt的reducer</span></span><br><span class="line"><span class="keyword">import</span> defaultState <span class="keyword">from</span> <span class="string">&quot;../States/global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = defaultState, actions</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否是设置token的操作</span></span><br><span class="line">    <span class="keyword">if</span> (actions.<span class="property">type</span> === <span class="string">&quot;set_token&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// return &#123; ...state, _token: actions.payload &#125;;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(actions);</span><br><span class="line">        <span class="comment">// 修改之后返回新值，可以直接ruturn或者用变量接收再返回</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="title function_">update</span>(<span class="string">&quot;_token&quot;</span>, <span class="function">() =&gt;</span> actions.<span class="property">payload</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在返回之前写修改数据源的操作</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br></pre></td></tr></table></figure><h1 id="十五、Hooks"><a href="#十五、Hooks" class="headerlink" title="十五、Hooks"></a>十五、Hooks</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p>React中组建由函数组件与类组件，在 React Hooks 出现之前，我们可以使用函数和类组件来进行项目开发，但是如果组件中需要进行状态管理，函数组件就显得无能为力。React在v16.8 的版本中推出了 React Hooks 新特性，Hook是<strong>一套工具函数的集合</strong>,它增强了函数组件的功能，<strong>hook不等于函数组件，所有的hook函数都是以use开头。</strong>（以use开头的方法，称之为hook）</p><p>使用 React Hooks 相比于从前的类组件有以下几点好处：</p><ul><li><p>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过 React Hooks 可以将功能代码聚合，方便阅读维护</p></li><li><p>组件树层级变浅，在原本的代码中，我们经常使用 HOC&#x2F;render&#x2F;Props 等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在 React Hooks 中，这些功能都可以通过强大的自定义的 Hooks 来实现</p></li><li><p>hook使用比使用类组件简单许多（仁者见仁智者见智）</p></li></ul><h2 id="2、hook的使用限制"><a href="#2、hook的使用限制" class="headerlink" title="2、hook的使用限制"></a>2、hook的使用限制</h2><ul><li>hook<strong>只能</strong>用在函数组件<strong>中</strong>，class组件不行</li><li><strong>普通</strong>函数不能使用hook（hook不能在组件函数外去使用）</li><li>hook不能被有条件的调用，因此不能放在if&#x2F;for中（如果真有有条件调用的需求，请把条件写在hook函数内）</li></ul><h2 id="3、常用的hook函数"><a href="#3、常用的hook函数" class="headerlink" title="3、常用的hook函数"></a>3、常用的hook函数</h2><p>官网文档：<a href="https://reactjs.org/docs/hooks-reference.html">https://reactjs.org/docs/hooks-reference.html</a></p><p>hook的使用步骤：</p><ul><li>导入hook成员</li><li>使用hook成员</li></ul><h3 id="3-1、useState"><a href="#3-1、useState" class="headerlink" title="3.1、useState"></a>3.1、useState</h3><p>作用：保存组件的状态</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setstate] = <span class="title function_">useState</span>(initialState);</span><br><span class="line"><span class="comment">// state：名字可以是其他的，数据的名字，获取数据的时候使用。其性质像类组件中state对象中的属性名</span></span><br><span class="line"><span class="comment">// setstate：名字也可以是其他的，这是一个方法，用于修改数据使用的</span></span><br><span class="line"><span class="comment">// initialState：数据的初始值（可以是任意数据类型）</span></span><br></pre></td></tr></table></figure><p>案例：计数器案例，初始值默认为0，按一次按钮，数字+1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 作用：演示函数组件的useState的hook使用</span><br><span class="line">// useState：模拟类似于类组件的状态实现</span><br><span class="line">// 使用注意点：</span><br><span class="line">// 1. 得先导入useState，该hook是react自带的</span><br><span class="line">// 2. 在使用的时候一定要在函数组件的函数体内的return之前用</span><br><span class="line">// 3. 语法，一般比较固定：</span><br><span class="line">//      const [变量名,设置数据值的方法] = useState(默认值)</span><br><span class="line">//      变量名：获取数据时使用</span><br><span class="line">//      设置数据值的方法：用于后期修改数据使用</span><br><span class="line">//      请注意，这里有一个约定俗成的规则，假设变量名为abc，那么设置变量的值的方法名就会被起成setAbc</span><br><span class="line">// 4. 在设置数据的时候，设置数据的方法实现的是数据的替换，因此对于复合数据类型的数据注意保留以前的数据</span><br><span class="line"></span><br><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const StateHook = () =&gt; &#123;</span><br><span class="line">    // 必须写在函数组件的函数体内</span><br><span class="line">    const [count, setCount] = useState(0);</span><br><span class="line">    const [user, setUser] = useState(&#123; username: &quot;zhangsan&quot;, age: 29 &#125;);</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;这是一个函数组件&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;count的值是：&#123;count&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;给count+1&lt;/button&gt;</span><br><span class="line">            &lt;hr /&gt;</span><br><span class="line">            &lt;div&gt;用户信息如下&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                用户名是：&#123;user.username&#125;，年龄是：&#123;user.age&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setUser(&#123; ...user, username: &quot;张三&quot; &#125;)&#125;&gt;修改用户名为“张三”，年龄是29&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StateHook;</span><br></pre></td></tr></table></figure><h3 id="3-2、useEffect"><a href="#3-2、useEffect" class="headerlink" title="3.2、useEffect"></a>3.2、useEffect</h3><p>作用：模拟类组件中的生命周期的</p><p>函数组件对于在一些生命周期中操作还是无能为力，所以 React提供了 useEffect 来帮助开发者处理函数组件，来帮助模拟完成一部份的开发中<strong>非常常用的生命周期方法（并不是全部的生命周期）</strong>。常被称为：<strong>副作用处理函数</strong>。此函数的操作是异步的。</p><p>useEffect 相当类组件中的3个生命周期 </p><ul><li>componentDidMount</li><li>componentDidUpdate </li><li>componetWillUnMount</li></ul><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    effect</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, [input]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// effect：</span></span><br><span class="line"><span class="comment">//情况1：在没有第二个参数的情况下，该位置默认是模拟componentDidMount和componentDidUpdate生命周期的</span></span><br><span class="line"><span class="comment">//情况2：在有第二个参数的情况下：</span></span><br><span class="line"><span class="comment">//情况2的第1种情况：若第2个参数是空数组，则其表示模拟componentDidMount</span></span><br><span class="line"><span class="comment">//情况2的第2种情况：若第2个参数是非空数组，则其表示只关注特定的数据更新和挂载时的componentDidMount和componentDidUpdate生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return：</span></span><br><span class="line"><span class="comment">//return需要返回一个函数，该函数是模拟componetWillUnMount生命周期的</span></span><br></pre></td></tr></table></figure><p>案例：编写一个声明式的导航，切换组件1和组件2，在组件1和组件2中做useEffect的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">// 作用：模拟类组件的生命周期</span><br><span class="line">// 使用注意：</span><br><span class="line">// 1. 该hook函数作用是模拟类组件的挂载完毕、更新完毕和解挂的生命周期；</span><br><span class="line">// 2. 语法：</span><br><span class="line">//          useEffect(() =&gt; &#123;</span><br><span class="line">//              .....</span><br><span class="line">//              return () =&gt; &#123;</span><br><span class="line">//                  cleanup...</span><br><span class="line">//              &#125;</span><br><span class="line">//          &#125;,[el1,el2.....])</span><br><span class="line">// 3. 其写法有好几种，每一种的含义表示不一样</span><br><span class="line">//      a. 参数1的返回值决定什么？</span><br><span class="line">//           返回值是一个函数，这里函数里可以写代码，该函数用于模拟解挂生命周期</span><br><span class="line">//      b. 参数2决定什么？</span><br><span class="line">//           参数2是一个数组，该数组有两种情况，1是不写，2是写。不写表示模拟组件的挂载完毕和更新完毕的生命周期；如果写，则数组的元素名字必须是state里的可变数据名，表示模拟挂载完毕后及对应的数据更新后的生命周期（监听特定数据的变化）</span><br><span class="line"></span><br><span class="line">// 案例：通过声明式导航的切换来演示useEffect的使用</span><br><span class="line"></span><br><span class="line">import React, &#123; useEffect, useState &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; Link, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">const EffectHook = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/news&quot;&gt;新闻&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/news&quot; component=&#123;News&#125; /&gt;</span><br><span class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line">    // 模拟解除挂载操作</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        return () =&gt; &#123;</span><br><span class="line">            // 清除对于组件有副作用的操作</span><br><span class="line">            console.log(&quot;Home组件将要解除挂载&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;首页页面&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const News = () =&gt; &#123;</span><br><span class="line">    // 定义数据状态</span><br><span class="line">    const [state, setstate] = useState(0);</span><br><span class="line">    // 模拟组件挂载完毕、更新完毕的操作</span><br><span class="line"></span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        // 挂载完毕和更新完毕的操作代码写在函数体里即可，不需要加return</span><br><span class="line">        console.log(&quot;News组件已经挂载完毕、更新完毕&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;新闻页面&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;数据值是&#123;state&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setstate(state + 1)&#125;&gt;点击+1&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 模拟挂载和监听特定数据的变化</span><br><span class="line">// 有一种类似于监听器watch的实现</span><br><span class="line">// 这个时候只依赖于state1的变化，state2变化不会触发</span><br><span class="line">const About = () =&gt; &#123;</span><br><span class="line">    const [state1, setstate1] = useState(0);</span><br><span class="line">    const [state2, setstate2] = useState(0);</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        console.log(&quot;挂载完毕，数据1更新完毕&quot;);</span><br><span class="line">    &#125;, [state1]);</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;关于页面&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;数据1：&#123;state1&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setstate1(state1 + 1)&#125;&gt;数据1+1&lt;/button&gt;</span><br><span class="line">            &lt;div&gt;数据2：&#123;state2&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setstate2(state2 + 1)&#125;&gt;数据2+1&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default EffectHook;</span><br></pre></td></tr></table></figure><h3 id="3-3、useRef"><a href="#3-3、useRef" class="headerlink" title="3.3、useRef"></a>3.3、useRef</h3><p>作用：用来生成对 DOM 对象的引用（类似于类组件中的createRef方法）</p><p>案例：实现表单项数据的获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 作用：用于获取dom对象，类似于createRef</span><br><span class="line">// 1. 导入</span><br><span class="line">// 2. 使用</span><br><span class="line"></span><br><span class="line">import React, &#123; useRef &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const RefHook = () =&gt; &#123;</span><br><span class="line">    // 使用useRef获取ref对象</span><br><span class="line">    const divRef = useRef();</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div ref=&#123;divRef&#125;&gt;这是一个函数组件&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; console.log(divRef.current)&#125;&gt;获取对象&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default RefHook;</span><br></pre></td></tr></table></figure><h3 id="3-4、redux相关"><a href="#3-4、redux相关" class="headerlink" title="3.4、redux相关"></a>3.4、redux相关</h3><p>注意点：官方自带的<code>useReducer</code>hook也可以实现针对reudx的操作，但是企业一般不直接用它。而是使用react-redux中提供的封装过的hook（<strong>useSelector,useDispatch</strong>）。如果企业项目有自己封装redux相关的hook的时候才会使用<code>useReducer</code>。其实react-redux提供的自定义的hook底层也是基于<code>useReducer</code>实现的。</p><p>作用：</p><ul><li>useSelector：帮助我们获取仓库中的数据，参数是callback，函数有一形参state（默认数据源）</li><li>useDispatch：帮助我们派发用于修改的action</li></ul><p>案例：通过<strong>useSelector,useDispatch</strong>实现对于redux中数据的读写（写法比类组件的写法简单）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; useSelector, useDispatch &#125; from &quot;react-redux&quot;;</span><br><span class="line"></span><br><span class="line">const App4 = () =&gt; &#123;</span><br><span class="line">    // 数据进行初始化</span><br><span class="line">    // 通过useSelector获取仓库的数据</span><br><span class="line">    const state = useSelector((state) =&gt; state.toJS());</span><br><span class="line">    // 通过useDispatch方法产生dispatch方法</span><br><span class="line">    const dispatch = useDispatch();</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;当前关键词是：&#123;state.search.keyword&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">                onClick=&#123;() =&gt; dispatch(&#123; type: &quot;set&quot;, payload: &quot;20210201&quot; &#125;)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                改变关键词</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default App4;</span><br></pre></td></tr></table></figure><h3 id="3-5、react-route-dom相关"><a href="#3-5、react-route-dom相关" class="headerlink" title="3.5、react-route-dom相关"></a>3.5、react-route-dom相关</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHistory, useParams, useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure><p>作用：快速获取路由信息的</p><ul><li>useHistory：获取history路由信息对象</li><li>useParams：获取路由中动态路由参数对象</li><li>useLocation：获取路由中的location对象信息</li></ul><p>案例：在路由中使用三个hook分别打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useEffect &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; useHistory, useParams, useLocation &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">const Home = () =&gt; &#123;</span><br><span class="line">    const history = useHistory();</span><br><span class="line">    console.log(history);</span><br><span class="line">    const params = useParams();</span><br><span class="line">    console.log(params);</span><br><span class="line">    const location = useLocation();</span><br><span class="line">    console.log(location);</span><br><span class="line">    return &lt;div&gt;主页页面&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Home;</span><br></pre></td></tr></table></figure><p>注意点：用了这个三个hook，组件在导出的时候就不用再withRouter。</p><h3 id="3-6、自定义hook"><a href="#3-6、自定义hook" class="headerlink" title="3.6、自定义hook"></a>3.6、自定义hook</h3><p>案例：自定义在线状态hook，要求使用了这个hook可以自动判断当前网络连接的情况</p><p>应用场景：在线聊天类型的项目，可以用这个hook动态判断当前用户的网络连接状态</p><p><img src="https://storage.lynnn.cn/assets/markdown/91147/pictures/2021/02/f0ddcffdab69175b76024005a708968bef6da0f0.png?sign=153f9147240e75331423bdd8dc046f54&t=6017cfbd"></p><p>实现代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 导入在线状态的图标</span></span><br><span class="line"><span class="keyword">import</span> online <span class="keyword">from</span> <span class="string">&quot;@/assets/icon/online.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> offline <span class="keyword">from</span> <span class="string">&quot;@/assets/icon/offline.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络在线状态检测的hook</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心思想：</span></span><br><span class="line"><span class="comment">//      1. 定义hook实质上就是定义函数</span></span><br><span class="line"><span class="comment">//      2. hook的函数名必须以use开头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useOnline</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 用于获取用户是否在线的状态</span></span><br><span class="line">    <span class="keyword">const</span> [state, setstate] = <span class="title function_">useState</span>(navigator.<span class="property">onLine</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 定义2个方法，用于设置网络状态</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">isOnLine</span> = (<span class="params"></span>) =&gt; <span class="title function_">setstate</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">isOffLine</span> = (<span class="params"></span>) =&gt; <span class="title function_">setstate</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听网络状态的事件</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;online&quot;</span>, isOnLine, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;offline&quot;</span>, isOffLine, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 离开组件之前取消监听网络状况的事件（优化）</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;online&quot;</span>, isOnLine, <span class="literal">false</span>);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;offline&quot;</span>, isOffLine, <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回用户的在线状态</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App5</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用自定义useOnline的hook</span></span><br><span class="line">    <span class="keyword">const</span> status = <span class="title function_">useOnline</span>();</span><br><span class="line">    <span class="comment">// console.log(status);</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;status ? (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;online&#125;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            ) : (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;offline&#125;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App5</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化之函数防抖和函数节流</title>
      <link href="/posts/e0c4d6cf.html"/>
      <url>/posts/e0c4d6cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><ul><li>定义：触发事件后，在n秒内函数只能执行一次，如果触发事件后在n秒内又触发了事件，则会重新计算函数延长执行的时间。</li><li>个人总结：使重复执行的函数在短时间内只执行最后一次。</li><li>实现： <ul><li>准备一个定时器，把要做的事情放在定时器里；</li><li>判断是否存在定时器，没有就开始计时，有就重新计时；</li><li>一直重新计时，直到没有操作的时候就只有一个定时器，所以只执行一次；</li></ul></li><li>举个栗子<ul><li>没有使用防抖的时候  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 给div高度撑出滚动条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 8000px;width: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">showLocaltion</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  获取滚动条位置(兼容写法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 没有防抖的时候按方向键也会执行7、8次</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置:&#x27;</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,showLocaltion)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用防抖  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动条不停滚动，只打印一次滚动条位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 8000px;width: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">showLocaltion</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  获取滚动条位置(兼容写法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 按方向键也会执行7、8次</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置:&#x27;</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 存储定时器ID</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 有定时器就先清除再重新开始计时</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(showLocaltion, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 没有定时器就直接开始计时</span></span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(showLocaltion, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>因为得有个外层变量存储定时器ID，所以也可以使用闭包写法  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 8000px;width: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">showLocaltion</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  获取滚动条位置(兼容写法)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 按方向键也会执行7、8次</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置:&#x27;</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (timer) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">                timer = <span class="built_in">setTimeout</span>(fn, delay)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                timer = <span class="built_in">setTimeout</span>(fn, delay)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">debounce</span>(showLocaltion, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><ul><li><p>定义：如果短时间内大量触发同一事件，那么在事件处理函数执行一次之后，该函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。</p></li><li><p>个人总结：使重复执行的函数每隔一段时间执行一次。</p></li><li><p>实现： </p><ul><li>准备一个开关，事件处理程序根据开关来决定是否执行</li><li>开始执行函数之前关闭开关</li><li>每隔一段时间之后就打开开关</li></ul></li><li><p>举个栗子</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 函数节流 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滚动条不停滚动，每隔一秒打印一次位置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备一个开关，事件处理程序根据开关来决定是否执行 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 撑出滚动条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 8000px;width: 100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">showLocaltion</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置:&#x27;</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 隔段事件后打开开关，下次才能进入该分支</span></span></span><br><span class="line"><span class="language-javascript">        isGo = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开关</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> isGo = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (isGo) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 关掉开关</span></span></span><br><span class="line"><span class="language-javascript">            isGo = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(showLocaltion, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>闭包写法  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 8000px;width: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">showLocaltion</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动条位置:&#x27;</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 隔段事件后打开开关，下次才能进入该分支</span></span></span><br><span class="line"><span class="language-javascript">        isGo = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> isGo = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (isGo) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 关掉开关</span></span></span><br><span class="line"><span class="language-javascript">                isGo = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">fn</span>()</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 隔段事件后打开开关，下次才能进入该分支</span></span></span><br><span class="line"><span class="language-javascript">                    isGo = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(showLocaltion, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h3><ul><li>DOM元素的拖拽功能实现（mousemove）</li><li>搜索联想（keyup）</li><li>计算鼠标移动的距离（mousemove）</li><li>Canvas 模拟画板功能（mousemove）</li><li>射击游戏的 mousedown&#x2F;keydown 事件（单位时间只能发射一颗子弹）</li><li>监听滚动事件判断是否到页面底部自动加载更多：给 scroll 加了 debounce 后，只有用户停止滚动后，才会判断是否到了页面底部；如果是 throttle 的话，只要页面滚动就会间隔一段时间判断一次</li></ul><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h3><ul><li>scroll事件滚动触发事件</li><li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li><li>表单验证</li><li>按钮提交事件。</li><li>浏览器窗口缩放，resize事件(如窗口停止改变大小之后重新计算布局)等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-questions</title>
      <link href="/posts/63b082fb.html"/>
      <url>/posts/63b082fb.html</url>
      
        <content type="html"><![CDATA[<p>从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！</p><p>答案在问题下方的折叠部分，点击即可展开问题。祝你好运 </p><hr><h2 id="1-输出是什么？"><a href="#1-输出是什么？" class="headerlink" title="1. 输出是什么？"></a>1. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>Lydia</code> 和 <code>undefined</code></li><li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> 和 <code>21</code></li><li>D: <code>undefined</code> 和 <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><ul><li><p>在函数内部，我们首先通过 var 关键字声明了 name 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 undefined。因为当我们打印 name 变量时还没有执行到定义变量的位置，因此变量的值保持为 undefined。</p></li><li><p>通过 let 和 const 关键字声明的变量也会提升，但是和 var 不同，它们不会被初始化。在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 ReferenceError 错误。</p></li></ul></div></div><hr><h2 id="2-输出是什么？"><a href="#2-输出是什么？" class="headerlink" title="2. 输出是什么？"></a>2. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0 1 2</code> 和 <code>0 1 2</code></li><li>B: <code>0 1 2</code> 和 <code>3 3 3</code></li><li>C: <code>3 3 3</code> 和 <code>0 1 2</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><ul><li><p>由于 JavaScript 的事件循环，setTimeout 回调会在遍历结束后才执行。因为在第一个遍历中遍历 i 是通过 var 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我们通过一元操作符 ++ 来每次递增 i 的值。当 setTimeout 回调执行的时候，i 的值等于 3。</p></li><li><p>在第二个遍历中，遍历 i 是通过 let 关键字声明的：通过 let 和 const 关键字声明的变量是拥有块级作用域（指的是任何在 {} 中的内容）。在每次的遍历过程中，i 都有一个新值，并且每个值都在循环内的作用域中。</p></li></ul></div></div><hr><h2 id="3-输出是什么？"><a href="#3-输出是什么？" class="headerlink" title="3. 输出是什么？"></a>3. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">diameter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">perimeter</span>: <span class="function">() =&gt;</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shape.<span class="title function_">diameter</span>()</span><br><span class="line">shape.<span class="title function_">perimeter</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>注意 <code>diameter</code> 的值是一个常规函数，但是 <code>perimeter</code> 的值是一个箭头函数。</p><p>对于箭头函数，<code>this</code> 关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。这意味着当我们调用 <code>perimeter</code> 时，<code>this</code> 不是指向 <code>shape</code> 对象，而是它的周围作用域（在例子中是 <code>window</code>）。</p><p>在 <code>window</code> 中没有 <code>radius</code> 这个属性，因此返回 <code>undefined</code>。</p></div></div><hr><h2 id="4-输出是什么？"><a href="#4-输出是什么？" class="headerlink" title="4. 输出是什么？"></a>4. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="literal">true</span>;</span><br><span class="line">!<span class="string">&quot;Lydia&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>一元操作符加号尝试将 bool 转为 number。<code>true</code> 转换为 number 的话为 <code>1</code>，<code>false</code> 为 <code>0</code>。</p><p>字符串 <code>&#39;Lydia&#39;</code> 是一个真值，真值取反那么就返回 <code>false</code>。</p></div></div><hr><h2 id="5-哪一个是正确的？"><a href="#5-哪一个是正确的？" class="headerlink" title="5. 哪一个是正确的？"></a>5. 哪一个是正确的？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mickey&#x27;</span>,</span><br><span class="line">  <span class="attr">small</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>mouse.bird.size</code>是无效的</li><li>B: <code>mouse[bird.size]</code>是无效的</li><li>C: <code>mouse[bird[&quot;size&quot;]]</code>是无效的</li><li>D: 以上三个选项都是有效的</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在 JavaScript 中，所有对象的 keys 都是字符串（除非对象是 Symbol）。尽管我们可能不会定义它们为字符串，但它们在底层总会被转换为字符串。</p><p>当我们使用括号语法时（[]），JavaScript 会解释（或者 unboxes）语句。它首先看到第一个开始括号 <code>[</code> 并继续前进直到找到结束括号 <code>]</code>。只有这样，它才会计算语句的值。</p><p><code>mouse[bird.size]</code>：首先计算 <code>bird.size</code>，这会得到 <code>small</code>。<code>mouse[&quot;small&quot;]</code> 返回 <code>true</code>。</p><p>然后使用点语法的话，上面这一切都不会发生。<code>mouse</code> 没有 <code>bird</code> 这个 key，这也就意味着 <code>mouse.bird</code> 是 <code>undefined</code>。然后当我们使用点语法 <code>mouse.bird.size</code> 时，因为 <code>mouse.bird</code> 是 <code>undefined</code>，这也就变成了 <code>undefined.size</code>。这个行为是无效的，并且会抛出一个错误类似 <code>Cannot read property &quot;size&quot; of undefined</code>。</p></div></div><hr><h2 id="6-输出是什么？"><a href="#6-输出是什么？" class="headerlink" title="6. 输出是什么？"></a>6. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hey!&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> d</span><br><span class="line"></span><br><span class="line">d = c</span><br><span class="line">c.<span class="property">greeting</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">greeting</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在 JavaScript 中，当设置两个对象彼此相等时，它们会通过<em>引用</em>进行交互。</p><p>首先，变量 <code>c</code> 的值是一个对象。接下来，我们给 <code>d</code> 分配了一个和 <code>c</code> 对象相同的引用。</p><img src="https://i.imgur.com/ko5k0fs.png" width="200"><p>因此当我们改变其中一个对象时，其实是改变了所有的对象。</p></div></div><hr><h2 id="7-输出是什么？"><a href="#7-输出是什么？" class="headerlink" title="7. 输出是什么？"></a>7. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === c)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>new Number()</code> 是一个内建的函数构造器。虽然它看着像是一个 number，但它实际上并不是一个真实的 number：它有一堆额外的功能并且它是一个对象。</p><p>当我们使用 <code>==</code> 操作符时，它只会检查两者是否拥有相同的<em>值</em>。因为它们的值都是 <code>3</code>，因此返回 <code>true</code>。</p><p>然后，当我们使用 <code>===</code> 操作符时，两者的值以及<em>类型</em>都应该是相同的。<code>new Number()</code> 是一个对象而不是 number，因此返回 <code>false</code>。</p></div></div><hr><h2 id="8-输出是什么？"><a href="#8-输出是什么？" class="headerlink" title="8. 输出是什么？"></a>8. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chameleon</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">colorChange</span>(<span class="params">newColor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">newColor</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; newColor = <span class="string">&#x27;green&#x27;</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freddie = <span class="keyword">new</span> <span class="title class_">Chameleon</span>(&#123; <span class="attr">newColor</span>: <span class="string">&#x27;purple&#x27;</span> &#125;)</span><br><span class="line">freddie.<span class="title function_">colorChange</span>(<span class="string">&#x27;orange&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>colorChange</code> 是一个静态方法。静态方法被设计为只能被创建它们的构造器使用（也就是 <code>Chameleon</code>），并且不能传递给实例。因为 <code>freddie</code> 是一个实例，静态方法不能被实例使用，因此抛出了 <code>TypeError</code> 错误。</p></div></div><hr><h2 id="9-输出是什么？"><a href="#9-输出是什么？" class="headerlink" title="9. 输出是什么？"></a>9. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting</span><br><span class="line">greetign = &#123;&#125; <span class="comment">// Typo!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greetign)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;&#125;</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 <code>greeting</code> 写错成 <code>greetign</code> 时，JS 解释器实际在上浏览器中将它视为 <code>global.greetign = {}</code> （或者 <code>window.greetign = {}</code>）。</p><p>为了避免这个为题，我们可以使用 &#96;”use strict”。这能确保当你声明变量时必须赋值。</p></div></div><hr><h2 id="10-当我们这么做时，会发生什么？"><a href="#10-当我们这么做时，会发生什么？" class="headerlink" title="10. 当我们这么做时，会发生什么？"></a>10. 当我们这么做时，会发生什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.<span class="property">animal</span> = <span class="string">&#x27;dog&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>A: 正常运行!</li><li>B: <code>SyntaxError</code>. 你不能通过这种方式给函数增加属性。</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>这在 JavaScript 中是可以的，因为函数是对象！（除了基本类型之外其他都是对象）</p><p>函数是一个特殊的对象。你写的这个代码其实不是一个实际的函数。函数是一个拥有属性的对象，并且属性也可被调用。</p></div></div><hr><h2 id="11-输出是什么？"><a href="#11-输出是什么？" class="headerlink" title="11. 输出是什么？"></a>11. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lydia&quot;</span>, <span class="string">&quot;Hallie&quot;</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="title function_">getFullName</span>());</span><br></pre></td></tr></table></figure><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才会使 <code>member.getFullName()</code> 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 <code>Person</code> 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！</p></div></div><hr><h2 id="12-输出是什么？"><a href="#12-输出是什么？" class="headerlink" title="12. 输出是什么？"></a>12. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lydia&#x27;</span>, <span class="string">&#x27;Hallie&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sarah = <span class="title class_">Person</span>(<span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lydia)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sarah)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>undefined</code></li><li>B: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>Person &#123;firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;&#125;</code></li><li>C: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>&#123;&#125;</code></li><li>D:<code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>对于 <code>sarah</code>，我们没有使用 <code>new</code> 关键字。当使用 <code>new</code> 时，<code>this</code> 引用我们创建的空对象。当未使用 <code>new</code> 时，<code>this</code> 引用的是<strong>全局对象</strong>（global object）。</p><p>我们说 <code>this.firstName</code> 等于 <code>&quot;Sarah&quot;</code>，并且 <code>this.lastName</code> 等于 <code>&quot;Smith&quot;</code>。实际上我们做的是，定义了 <code>global.firstName = &#39;Sarah&#39;</code> 和 <code>global.lastName = &#39;Smith&#39;</code>。而 <code>sarah</code> 本身是 <code>undefined</code>。</p></div></div><hr><h2 id="13-事件传播的三个阶段是什么？"><a href="#13-事件传播的三个阶段是什么？" class="headerlink" title="13. 事件传播的三个阶段是什么？"></a>13. 事件传播的三个阶段是什么？</h2><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在<strong>捕获</strong>（capturing）阶段中，事件从祖先元素向下传播到目标元素。当事件达到<strong>目标</strong>（target）元素后，<strong>冒泡</strong>（bubbling）才开始。</p></div></div><hr><h2 id="14-所有对象都有原型。"><a href="#14-所有对象都有原型。" class="headerlink" title="14. 所有对象都有原型。"></a>14. 所有对象都有原型。</h2><ul><li>A: 对</li><li>B: 错</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>除了<strong>基本对象</strong>（base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 <code>.toString</code>。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。</p></div></div><hr><h2 id="15-输出是什么？"><a href="#15-输出是什么？" class="headerlink" title="15. 输出是什么？"></a>15. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>JavaScript 是一种<strong>动态类型语言</strong>：我们不指定某些变量的类型。值可以在你不知道的情况下自动转换成另一种类型，这种类型称为<strong>隐式类型转换</strong>（implicit type coercion）。<strong>Coercion</strong> 是指将一种类型转换为另一种类型。</p><p>在本例中，JavaScript 将数字 <code>1</code> 转换为字符串，以便函数有意义并返回一个值。在数字类型（<code>1</code>）和字符串类型（<code>&#39;2&#39;</code>）相加时，该数字被视为字符串。我们可以连接字符串，比如 <code>&quot;Hello&quot; + &quot;World&quot;</code>，这里发生的是 <code>&quot;1&quot; + &quot;2&quot;</code>，它返回 <code>&quot;12&quot;</code>。</p></div></div><hr><h2 id="16-输出是什么？"><a href="#16-输出是什么？" class="headerlink" title="16. 输出是什么？"></a>16. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number++)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一元<strong>后自增</strong>运算符 <code>++</code>：</p><ol><li>返回值（返回 <code>0</code>）</li><li>值自增（number 现在是 <code>1</code>）</li></ol><p>一元<strong>前自增</strong>运算符 <code>++</code>：</p><ol><li>值自增（number 现在是 <code>2</code>）</li><li>返回值（返回 <code>2</code>）</li></ol><p>结果是 <code>0 2 2</code>.</p></div></div><hr><h2 id="17-输出是什么？"><a href="#17-输出是什么？" class="headerlink" title="17. 输出是什么？"></a>17. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonInfo</span>(<span class="params">one, two, three</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>21</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！</p></div></div><hr><h2 id="18-输出是什么？"><a href="#18-输出是什么？" class="headerlink" title="18. 输出是什么？"></a>18. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are an adult!&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are still an adult.&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hmm.. You don&#x27;t have an age I guess`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkAge</span>(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在测试相等性时，基本类型通过它们的值（value）进行比较，而对象通过它们的引用（reference）进行比较。JavaScript 检查对象是否具有对内存中相同位置的引用。</p><p>题目中我们正在比较的两个对象不是同一个引用：作为参数传递的对象引用的内存位置，与用于判断相等的对象所引用的内存位置并不同。</p><p>这也是 <code>{ age: 18 } === { age: 18 }</code> 和 <code>{ age: 18 } == { age: 18 }</code> 都返回 <code>false</code> 的原因。</p></div></div><hr><h2 id="19-输出是什么？"><a href="#19-输出是什么？" class="headerlink" title="19. 输出是什么？"></a>19. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>(<span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>扩展运算符（<code>...args</code>）会返回实参组成的数组。而数组是对象，因此 <code>typeof args</code> 返回 <code>&quot;object&quot;</code>。</p></div></div><hr><h2 id="20-输出是什么？"><a href="#20-输出是什么？" class="headerlink" title="20. 输出是什么？"></a>20. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  age = <span class="number">21</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用 <code>&quot;use strict&quot;</code>，你可以确保不会意外地声明全局变量。我们从来没有声明变量 <code>age</code>，因为我们使用 <code>&quot;use strict&quot;</code>，它将抛出一个引用错误。如果我们不使用 <code>&quot;use strict&quot;</code>，它就会工作，因为属性 <code>age</code> 会被添加到全局对象中了。</p></div></div><hr><h2 id="21-输出是什么？"><a href="#21-输出是什么？" class="headerlink" title="21. 输出是什么？"></a>21. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">&#x27;10*10+5&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>代码以字符串形式传递进来，<code>eval</code> 对其求值。如果它是一个表达式，就像本例中那样，它对表达式求值。表达式是 <code>10 * 10 + 5</code>。这将返回数字 <code>105</code>。</p></div></div><hr><h2 id="22-cool-secret-可访问多长时间？"><a href="#22-cool-secret-可访问多长时间？" class="headerlink" title="22. cool_secret 可访问多长时间？"></a>22. cool_secret 可访问多长时间？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cool_secret&#x27;</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 永远，数据不会丢失。</li><li>B: 当用户关掉标签页时。</li><li>C: 当用户关掉整个浏览器，而不只是关掉标签页。</li><li>D: 当用户关闭电脑时。</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>关闭 <strong>tab 标签页</strong> 后，<code>sessionStorage</code> 存储的数据才会删除。</p><p>如果使用 <code>localStorage</code>，那么数据将永远在那里，除非调用了 <code>localStorage.clear()</code>。</p></div></div><hr><h2 id="23-输出是什么？"><a href="#23-输出是什么？" class="headerlink" title="23. 输出是什么？"></a>23. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>使用 <code>var</code> 关键字，你可以用相同的名称声明多个变量。然后变量将保存最新的值。</p><p>你不能使用 <code>let</code> 或 <code>const</code> 来实现这一点，因为它们是块作用域的。</p></div></div><hr><h2 id="24-输出是什么？"><a href="#24-输出是什么？" class="headerlink" title="24. 输出是什么？"></a>24. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="number">1</span>)</span><br><span class="line">set.<span class="title function_">has</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>所有对象的键（不包括 Symbol）在底层都是字符串，即使你自己没有将其作为字符串输入。这就是为什么 <code>obj.hasOwnProperty(&#39;1&#39;)</code> 也返回 <code>true</code>。</p><p>对于集合，它不是这样工作的。在我们的集合中没有 <code>&#39;1&#39;</code>：<code>set.has(&#39;1&#39;)</code> 返回 <code>false</code>。它有数字类型为 <code>1</code>，<code>set.has(1)</code> 返回 <code>true</code>。</p></div></div><hr><h2 id="25-输出是什么？"><a href="#25-输出是什么？" class="headerlink" title="25. 输出是什么？"></a>25. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;one&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;two&#x27;</span>, <span class="attr">a</span>: <span class="string">&#x27;three&#x27;</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; a: &quot;one&quot;, b: &quot;two&quot; &#125;</code></li><li>B: <code>&#123; b: &quot;two&quot;, a: &quot;three&quot; &#125;</code></li><li>C: <code>&#123; a: &quot;three&quot;, b: &quot;two&quot; &#125;</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>如果你有两个名称相同的键，则键会被替换掉。它仍然位于第一个键出现的位置，但是值是最后出现那个键的值。</p></div></div><hr><h2 id="26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。"><a href="#26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。" class="headerlink" title="26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。"></a>26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。</h2><ul><li>A: 对</li><li>B: 错</li><li>C: 看情况</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>基本执行上下文是全局执行上下文：它是代码中随处可访问的内容。</p></div></div><hr><h2 id="27-输出是什么？"><a href="#27-输出是什么？" class="headerlink" title="27. 输出是什么？"></a>27. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>如果某个条件返回 <code>true</code>，则 <code>continue</code> 语句跳过本次迭代。</p></div></div><hr><h2 id="28-输出是什么？"><a href="#28-输出是什么？" class="headerlink" title="28. 输出是什么？"></a>28. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">giveLydiaPizza</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Just give Lydia pizza already!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line">name.<span class="title function_">giveLydiaPizza</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>String</code> 是内置的构造函数，我们可以向它添加属性。我只是在它的原型中添加了一个方法。基本类型字符串被自动转换为字符串对象，由字符串原型函数生成。因此，所有 string(string 对象)都可以访问该方法！</p></div></div><hr><h2 id="29-输出是什么？"><a href="#29-输出是什么？" class="headerlink" title="29. 输出是什么？"></a>29. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span></span><br><span class="line">a[c] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象的键被自动转换为字符串。我们试图将一个对象 <code>b</code> 设置为对象 <code>a</code> 的键，且相应的值为 <code>123</code>。</p><p>然而，当字符串化一个对象时，它会变成 <code>&quot;[object Object]&quot;</code>。因此这里说的是，<code>a[&quot;[object Object]&quot;] = 123</code>。然后，我们再一次做了同样的事情，<code>c</code> 是另外一个对象，这里也有隐式字符串化，于是，<code>a[&quot;[object Object]&quot;] = 456</code>。</p><p>然后，我们打印 <code>a[b]</code>，也就是 <code>a[&quot;[object Object]&quot;]</code>。之前刚设置为 <code>456</code>，因此返回的是 <code>456</code>。</p></div></div><hr><h2 id="30-输出是什么？"><a href="#30-输出是什么？" class="headerlink" title="30. 输出是什么？"></a>30. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">baz</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们有一个 <code>setTimeout</code> 函数，并首先调用它。然而，它是最后打印日志的。</p><p>这是因为在浏览器中，我们不仅有运行时引擎，还有一个叫做 <code>WebAPI</code> 的东西。<code>WebAPI</code> 提供了 <code>setTimeout</code> 函数，也包含其他的，例如 DOM。</p><p>将 <em>callback</em> 推送到 WebAPI 后，<code>setTimeout</code> 函数本身(但不是回调！)将从栈中弹出。</p><img src="https://z3.ax1x.com/2021/05/10/gtPPbV.png" width="200"><p>现在，<code>foo</code> 被调用，打印 <code>&quot;First&quot;</code>。</p><img src="https://z3.ax1x.com/2021/05/10/gtPFET.png" width="200"><p><code>foo</code> 从栈中弹出，<code>baz</code> 被调用. 打印 <code>&quot;Third&quot;</code>。</p><img src="https://z3.ax1x.com/2021/05/10/gtPVC4.png" width="200"><p>WebAPI 不能随时向栈内添加内容。相反，它将回调函数推到名为 <em>queue</em> 的地方。</p><img src="https://z3.ax1x.com/2021/05/10/gtPe29.png" width="200"><p>这就是事件循环开始工作的地方。一个<strong>事件循环</strong>查看栈和任务队列。如果栈是空的，它接受队列上的第一个元素并将其推入栈。</p><img src="https://z3.ax1x.com/2021/05/10/gtPZ8J.png" width="200"><p><code>bar</code> 被调用，打印 <code>&quot;Second&quot;</code>，然后它被栈弹出。</p></div></div><hr><h2 id="31-当点击按钮时，event-target是什么？"><a href="#31-当点击按钮时，event-target是什么？" class="headerlink" title="31. 当点击按钮时，event.target是什么？"></a>31. 当点击按钮时，event.target是什么？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;first div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;second div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;button&#x27;)&quot;</span>&gt;</span></span><br><span class="line">      Click!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: 一个包含所有嵌套元素的数组。</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>导致事件的最深嵌套的元素是事件的 target。你可以通过 <code>event.stopPropagation</code> 来停止冒泡。</p></div></div><hr><h2 id="32-当您单击该段落时，日志输出是什么？"><a href="#32-当您单击该段落时，日志输出是什么？" class="headerlink" title="32. 当您单击该段落时，日志输出是什么？"></a>32. 当您单击该段落时，日志输出是什么？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;p&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    Click here!</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>如果我们点击 <code>p</code>，我们会看到两个日志：<code>p</code> 和 <code>div</code>。在事件传播期间，有三个阶段：捕获、目标和冒泡。默认情况下，事件处理程序在冒泡阶段执行（除非将 <code>useCapture</code> 设置为 <code>true</code>）。它从嵌套最深的元素向外传播。</p></div></div><hr><h2 id="33-输出是什么？"><a href="#33-输出是什么？" class="headerlink" title="33. 输出是什么？"></a>33. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Lydia&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.<span class="title function_">call</span>(person, <span class="number">21</span>)</span><br><span class="line">sayHi.<span class="title function_">bind</span>(person, <span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>使用这两种方法，我们都可以传递我们希望 <code>this</code> 关键字引用的对象。但是，<code>.call</code> 是<strong>立即执行</strong>的。</p><p><code>.bind</code> 返回函数的<strong>副本</strong>，但带有绑定上下文！它不是立即执行的。</p></div></div><hr><h2 id="34-输出是什么？"><a href="#34-输出是什么？" class="headerlink" title="34. 输出是什么？"></a>34. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function">() =&gt;</span> <span class="number">0</span>)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>sayHi</code> 方法返回的是立即执行函数(IIFE)的返回值.此立即执行函数的返回值是 <code>0</code>， 类型是 <code>number</code></p><p>参考：只有7种内置类型：<code>null</code>，<code>undefined</code>，<code>boolean</code>，<code>number</code>，<code>string</code>，<code>object</code>, <code>symbol</code> 和 <code>bigint</code>。 <code>function</code> 不是一种类型，函数是对象，它的类型是<code>object</code>。</p></div></div><hr><h2 id="35-下面哪些值是-falsy"><a href="#35-下面哪些值是-falsy" class="headerlink" title="35. 下面哪些值是 falsy?"></a>35. 下面哪些值是 falsy?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: All of them are falsy</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>只有 6 种 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a> 值:</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>&#39;&#39;</code> (empty string)</li><li><code>false</code></li></ul><p><code>Function</code> 构造函数, 比如 <code>new Number</code> 和 <code>new Boolean</code>，是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a>。</p></div></div><hr><h2 id="36-输出是什么？"><a href="#36-输出是什么？" class="headerlink" title="36. 输出是什么？"></a>36. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>typeof 1</code> 返回 <code>&quot;number&quot;</code>。<br><code>typeof &quot;number&quot;</code> 返回 <code>&quot;string&quot;</code>。</p></div></div><hr><h2 id="37-输出是什么？"><a href="#37-输出是什么？" class="headerlink" title="37. 输出是什么？"></a>37. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>当你为数组设置超过数组长度的值的时候， JavaScript 会创建名为 “empty slots” 的东西。它们的值实际上是 <code>undefined</code>。你会看到以下场景：</p><p><code>[1, 2, 3, 7 x empty, 11]</code></p><p>这取决于你的运行环境（每个浏览器，以及 node 环境，都有可能不同）</p></div></div><hr><h2 id="38-输出是什么？"><a href="#38-输出是什么？" class="headerlink" title="38. 输出是什么？"></a>38. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x, y</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">    (x = <span class="number">1</span>), (y = <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>catch</code> 代码块接收参数 <code>x</code>。当我们传递参数时，这与之前定义的变量 <code>x</code> 不同 。这个 <code>x</code> 是属于 <code>catch</code> 块级作用域的。</p><p>然后，我们将块级作用域中的变量赋值为 <code>1</code>，同时也设置了变量 <code>y</code> 的值。现在，我们打印块级作用域中的变量 <code>x</code>，值为 <code>1</code>。</p><p><code>catch</code> 块之外的变量 <code>x</code> 的值仍为 <code>undefined</code>， <code>y</code> 的值为 <code>2</code>。当我们在 <code>catch</code> 块之外执行 <code>console.log(x)</code> 时，返回 <code>undefined</code>，<code>y</code> 返回 <code>2</code>。</p></div></div><hr><h2 id="39-JavaScript-中的一切都是？"><a href="#39-JavaScript-中的一切都是？" class="headerlink" title="39. JavaScript 中的一切都是？"></a>39. JavaScript 中的一切都是？</h2><ul><li>A: 基本类型与对象</li><li>B: 函数与对象</li><li>C: 只有对象</li><li>D: 数字与对象</li><li><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>JavaScript 只有基本类型和对象。</p><p>基本类型包括 <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, <code>symbol</code>。</p></div></div></li></ul><hr><h2 id="40-输出是什么？"><a href="#40-输出是什么？" class="headerlink" title="40. 输出是什么？"></a>40. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]].<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc.<span class="title function_">concat</span>(cur)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>[1, 2]</code>是初始值。初始值将会作为首次调用时第一个参数 <code>acc</code> 的值。在第一次执行时， <code>acc</code> 的值是 <code>[1, 2]</code>， <code>cur</code> 的值是 <code>[0, 1]</code>。合并它们，结果为 <code>[1, 2, 0, 1]</code>。<br>第二次执行， <code>acc</code> 的值是 <code>[1, 2, 0, 1]</code>， <code>cur</code> 的值是 <code>[2, 3]</code>。合并它们，最终结果为 <code>[1, 2, 0, 1, 2, 3]</code></p></div></div><hr><h2 id="41-输出是什么？"><a href="#41-输出是什么？" class="headerlink" title="41. 输出是什么？"></a>41. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="literal">null</span></span><br><span class="line">!!<span class="string">&#x27;&#x27;</span></span><br><span class="line">!!<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>null</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a>。 <code>!null</code> 的值是 <code>true</code>。 <code>!true</code> 的值是 <code>false</code>。</p><p><code>&quot;&quot;</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a>。 <code>!&quot;&quot;</code> 的值是 <code>true</code>。  <code>!true</code> 的值是 <code>false</code>。</p><p><code>1</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a>。 <code>!1</code> 的值是 <code>false</code>。 <code>!false</code> 的值是 <code>true</code>。</p></div></div><hr><h2 id="42-setInterval-方法的返回值是什么？"><a href="#42-setInterval-方法的返回值是什么？" class="headerlink" title="42. setInterval 方法的返回值是什么？"></a>42. <code>setInterval</code> 方法的返回值是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 一个唯一的id</li><li>B: 该方法指定的毫秒数</li><li>C: 传递的函数</li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>setInterval</code> 返回一个唯一的 id。此 id 可被用于 <code>clearInterval</code> 函数来取消定时。</p></div></div><hr><h2 id="43-输出是什么？"><a href="#43-输出是什么？" class="headerlink" title="43. 输出是什么？"></a>43. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">&#x27;Lydia&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>string 类型是可迭代的。扩展运算符将迭代的每个字符映射成一个元素。</p></div></div><hr><h2 id="44-输出是什么"><a href="#44-输出是什么" class="headerlink" title="44. 输出是什么?"></a>44. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> i;</span><br><span class="line">  <span class="keyword">yield</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">generator</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 10], [10, 20]</code></li><li>B: <code>20, 20</code></li><li>C: <code>10, 20</code></li><li>D: <code>0, 10 and 10, 20</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一般的函数在执行之后是不能中途停下的。但是，生成器函数却可以中途“停下”，之后可以再从停下的地方继续。当生成器遇到<code>yield</code>关键字的时候，会生成<code>yield</code>后面的值。注意，生成器在这种情况下不 <em>返回</em> (<em>return</em> )值，而是 <em>生成</em> (<em>yield</em>)值。</p><p>首先，我们用<code>10</code>作为参数<code>i</code>来初始化生成器函数。然后使用<code>next()</code>方法一步步执行生成器。第一次执行生成器的时候，<code>i</code>的值为<code>10</code>，遇到第一个<code>yield</code>关键字，它要生成<code>i</code>的值。此时，生成器“暂停”，生成了<code>10</code>。</p><p>然后，我们再执行<code>next()</code>方法。生成器会从刚才暂停的地方继续，这个时候<code>i</code>还是<code>10</code>。于是我们走到了第二个<code>yield</code>关键字处，这时候需要生成的值是<code>i*2</code>，<code>i</code>为<code>10</code>，那么此时生成的值便是<code>20</code>。所以这道题的最终结果是<code>10,20</code>。</p></div></div><h2 id="45-返回值是什么"><a href="#45-返回值是什么" class="headerlink" title="45. 返回值是什么?"></a>45. 返回值是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">500</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">100</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([firstPromise, secondPromise]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;one&quot;</code></li><li>B: <code>&quot;two&quot;</code></li><li>C: <code>&quot;two&quot; &quot;one&quot;</code></li><li>D: <code>&quot;one&quot; &quot;two&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当我们向<code>Promise.race</code>方法中传入多个<code>Promise</code>时，会进行 <em>优先</em> 解析。在这个例子中，我们用<code>setTimeout</code>给<code>firstPromise</code>和<code>secondPromise</code>分别设定了500ms和100ms的定时器。这意味着<code>secondPromise</code>会首先解析出字符串<code>two</code>。那么此时<code>res</code>参数即为<code>two</code>，是为输出结果。</p></div></div><hr><h2 id="46-输出是什么"><a href="#46-输出是什么" class="headerlink" title="46. 输出是什么?"></a>46. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> members = [person];</span><br><span class="line">person = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(members);</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code></li><li>B: <code>[null]</code></li><li>C: <code>[&#123;&#125;]</code></li><li>D: <code>[&#123; name: &quot;Lydia&quot; &#125;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>首先我们声明了一个拥有<code>name</code>属性的对象 <code>person</code>。</p><img src="https://i.imgur.com/TML1MbS.png" width="200"><p>然后我们又声明了一个变量<code>members</code>. 将首个元素赋值为变量<code>person</code>。 当设置两个对象彼此相等时，它们会通过 <em>引用</em> 进行交互。但是当你将引用从一个变量分配至另一个变量时，其实只是执行了一个 <em>复制</em> 操作。（注意一点，他们的引用 <em>并不相同</em>!）</p><img src="https://i.imgur.com/FSG5K3F.png" width="300"><p>接下来我们让<code>person</code>等于<code>null</code>。</p><img src="https://i.imgur.com/sYjcsMT.png" width="300"><p>我们没有修改数组第一个元素的值，而只是修改了变量<code>person</code>的值,因为元素（复制而来）的引用与<code>person</code>不同。<code>members</code>的第一个元素仍然保持着对原始对象的引用。当我们输出<code>members</code>数组时，第一个元素会将引用的对象打印出来。</p></div></div><hr><h2 id="47-输出是什么"><a href="#47-输出是什么" class="headerlink" title="47. 输出是什么?"></a>47. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &#123; age: 21 &#125;</code></li><li>B: <code>&quot;name&quot;, &quot;age&quot;</code></li><li>C: <code>&quot;Lydia&quot;, 21</code></li><li>D: <code>[&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在<code>for-in</code>循环中,我们可以通过对象的key来进行迭代,也就是这里的<code>name</code>和<code>age</code>。在底层，对象的key都是字符串（如果他们不是Symbol的话）。在每次循环中，我们将<code>item</code>设定为当前遍历到的key.所以一开始，<code>item</code>是<code>name</code>，之后 <code>item</code>输出的则是<code>age</code>。</p></div></div><hr><h2 id="48-输出是什么"><a href="#48-输出是什么" class="headerlink" title="48. 输出是什么?"></a>48. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + <span class="number">4</span> + <span class="string">&quot;5&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;345&quot;</code></li><li>B: <code>&quot;75&quot;</code></li><li>C: <code>12</code></li><li>D: <code>&quot;12&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当所有运算符的 <em>优先级</em> 相同时，计算表达式需要确定运算符的结合顺序，即从右到左还是从左往右。在这个例子中，我们只有一类运算符<code>+</code>，对于加法来说，结合顺序就是从左到右。</p><p><code>3 + 4</code>首先计算，得到数字<code>7</code>.</p><p>由于类型的强制转换，<code>7 + &#39;5&#39;</code>的结果是<code>&quot;75&quot;</code>. JavaScript将<code>7</code>转换成了字符串，可以参考问题15.我们可以用<code>+</code>号把两个字符串连接起来。 <code>&quot;7&quot; + &quot;5&quot;</code> 就得到了<code>&quot;75&quot;</code>.</p></div></div><hr><h2 id="49-num的值是什么"><a href="#49-num的值是什么" class="headerlink" title="49. num的值是什么?"></a>49. <code>num</code>的值是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;7*6&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>42</code></li><li>B: <code>&quot;42&quot;</code></li><li>C: <code>7</code></li><li>D: <code>NaN</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>只返回了字符串中第一个字母. 设定了 <em>进制</em> 后 (也就是第二个参数，指定需要解析的数字是什么进制: 十进制、十六机制、八进制、二进制等等……),<code>parseInt</code> 检查字符串中的字符是否合法. 一旦遇到一个在指定进制中不合法的字符后，立即停止解析并且忽略后面所有的字符。</p><p><code>*</code>就是不合法的数字字符。所以只解析到<code>&quot;7&quot;</code>，并将其解析为十进制的<code>7</code>. <code>num</code>的值即为<code>7</code>.</p></div></div><hr><h2 id="50-输出是什么"><a href="#50-输出是什么" class="headerlink" title="50. 输出是什么?"></a>50. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[]</code></li><li>B: <code>[null, null, null]</code></li><li>C: <code>[undefined, undefined, undefined]</code></li><li>D: <code>[ 3 x empty ]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>对数组进行映射的时候,<code>num</code>就是当前循环到的元素. 在这个例子中，所有的映射都是number类型，所以if中的判断<code>typeof num === &quot;number&quot;</code>结果都是<code>true</code>.map函数创建了新数组并且将函数的返回值插入数组。</p><p>但是，没有任何值返回。当函数没有返回任何值时，即默认返回<code>undefined</code>.对数组中的每一个元素来说，函数块都得到了这个返回值，所以结果中每一个元素都是<code>undefined</code>.</p></div></div><hr><h2 id="51-输出的是什么"><a href="#51-输出的是什么" class="headerlink" title="51. 输出的是什么?"></a>51. 输出的是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">member, year</span>) &#123;</span><br><span class="line">  member.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">  year = <span class="string">&quot;1998&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Sarah&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> birthYear = <span class="string">&quot;1997&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>(person, birthYear);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person, birthYear);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1997&quot;</code></li><li>B: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1998&quot;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1998&quot;</code></li><li>D: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1997&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>普通参数都是 <em>值</em> 传递的，而对象则不同，是 <em>引用</em> 传递。所以说，<code>birthYear</code>是值传递，因为他是个字符串而不是对象。当我们对参数进行值传递时，会创建一份该值的 <em>复制</em> 。（可以参考问题46）</p><p>变量<code>birthYear</code>有一个对<code>&quot;1997&quot;</code>的引用，而传入的参数也有一个对<code>&quot;1997&quot;</code>的引用，但二者的引用并不相同。当我们通过给 <code>year</code>赋值<code>&quot;1998&quot;</code>来更新<code>year</code>的值的时候我们只是更新了<code>year</code>（的引用）。此时<code>birthYear</code>仍然是<code>&quot;1997&quot;</code>.</p><p>而<code>person</code>是个对象。参数<code>member</code>引用与之 <em>相同的</em> 对象。当我们修改<code>member</code>所引用对象的属性时,<code>person</code>的相应属性也被修改了,因为他们引用了相同的对象. <code>person</code>的 <code>name</code>属性也变成了 <code>&quot;Lydia&quot;</code>.</p></div></div><hr><h2 id="52-输出是什么"><a href="#52-输出是什么" class="headerlink" title="52. 输出是什么?"></a>52. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">greeting</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It worked!&quot;</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh no an error:&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;It worked! Hello world!&quot;</code></li><li>B: <code>&quot;Oh no an error: undefined</code></li><li>C: <code>SyntaxError: can only throw Error objects</code></li><li>D: <code>&quot;Oh no an error: Hello world!</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>通过<code>throw</code>语句，我么可以创建自定义错误。 而通过它，我们可以抛出异常。异常可以是一个<b>字符串</b>, 一个 <b>数字</b>, 一个 <b>布尔类型</b> 或者是一个 <b>对象</b>。在本例中，我们的异常是字符串<code>&#39;Hello world&#39;</code>.</p><p>通过 <code>catch</code>语句，我们可以设定当<code>try</code>语句块中抛出异常后应该做什么处理。在本例中抛出的异常是字符串<code>&#39;Hello world&#39;</code>. <code>e</code>就是这个字符串，因此被输出。最终结果就是<code>&#39;Oh an error: Hello world&#39;</code>.</p></div></div><hr><h2 id="53-输出是什么"><a href="#53-输出是什么" class="headerlink" title="53. 输出是什么?"></a>53. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = <span class="string">&quot;Lamborghini&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">make</span>: <span class="string">&quot;Maserati&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCar.<span class="property">make</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lamborghini&quot;</code></li><li>B: <code>&quot;Maserati&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>返回属性的时候，属性的值等于 <em>返回的</em> 值，而不是构造函数中设定的值。我们返回了字符串 <code>&quot;Maserati&quot;</code>，所以 <code>myCar.make</code>等于<code>&quot;Maserati&quot;</code>.</p></div></div><hr><h2 id="54-输出是什么"><a href="#54-输出是什么" class="headerlink" title="54. 输出是什么?"></a>54. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = (y = <span class="number">10</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li><li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li><li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li><li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>let x = y = 10;</code> 是下面这个表达式的缩写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = y;</span><br></pre></td></tr></table></figure><p>我们设定<code>y</code>等于<code>10</code>时,我们实际上增加了一个属性<code>y</code>给全局对象(浏览器里的<code>window</code>, Nodejs里的<code>global</code>)。在浏览器中， <code>window.y</code>等于<code>10</code>.</p><p>然后我们声明了变量<code>x</code>等于<code>y</code>,也是<code>10</code>.但变量是使用 <code>let</code>声明的，它只作用于 <em>块级作用域</em>, 仅在声明它的块中有效；就是案例中的立即调用表达式(IIFE)。使用<code>typeof</code>操作符时, 操作值 <code>x</code>没有被定义：因为我们在<code>x</code>声明块的外部，无法调用它。这就意味着<code>x</code>未定义。未分配或是未声明的变量类型为<code>&quot;undefined&quot;</code>. <code>console.log(typeof x)</code>返回<code>&quot;undefined&quot;</code>.</p><p>而我们创建了全局变量<code>y</code>，并且设定<code>y</code>等于<code>10</code>.这个值在我们的代码各处都访问的到。 <code>y</code>已经被定义了，而且有一个<code>&quot;number&quot;</code>类型的值。 <code>console.log(typeof y)</code>返回<code>&quot;number&quot;</code>.</p></div></div><hr><h2 id="55-输出是什么"><a href="#55-输出是什么" class="headerlink" title="55. 输出是什么?"></a><a name=20190629></a>55. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Woof I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Mara&quot;</span>);</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span>;</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Woof I am Mara&quot;</code>, <code>TypeError</code></li><li>B: <code>&quot;Woof I am Mara&quot;</code>,<code>&quot;Woof I am Mara&quot;</code></li><li>C: <code>&quot;Woof I am Mara&quot;</code>, <code>undefined</code></li><li>D: <code>TypeError</code>, <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们可以用<code>delete</code>关键字删除对象的属性，对原型也是适用的。删除了原型的属性后，该属性在原型链上就不可用了。在本例中，函数<code>bark</code>在执行了<code>delete Dog.prototype.bark</code>后不可用, 然而后面的代码还在调用它。</p><p>当我们尝试调用一个不存在的函数时<code>TypeError</code>异常会被抛出。在本例中就是 <code>TypeError: pet.bark is not a function</code>，因为<code>pet.bark</code>是<code>undefined</code>.</p></div></div><hr><h2 id="56-输出是什么"><a href="#56-输出是什么" class="headerlink" title="56. 输出是什么?"></a>56. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 1, 2, 3, 4]</code></li><li>B: <code>[1, 2, 3, 4]</code></li><li>C: <code>&#123;1, 1, 2, 3, 4&#125;</code></li><li>D: <code>&#123;1, 2, 3, 4&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>Set</code>对象是独一无二的值的集合：也就是说同一个值在其中仅出现一次。</p><p>我们传入了数组<code>[1, 1, 2, 3, 4]</code>，他有一个重复值<code>1</code>.以为一个集合里不能有两个重复的值，其中一个就被移除了。所以结果是 <code>{1, 2, 3, 4}</code>.</p></div></div><hr><h2 id="57-输出是什么"><a href="#57-输出是什么" class="headerlink" title="57. 输出是什么?"></a>57. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> myCounter <span class="keyword">from</span> <span class="string">&quot;./counter&quot;</span>;</span><br><span class="line"></span><br><span class="line">myCounter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCounter);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>Error</code></li><li>D: <code>NaN</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>引入的模块是 <em>只读</em> 的: 你不能修改引入的模块。只有导出他们的模块才能修改其值。</p><p>当我们给<code>myCounter</code>增加一个值的时候会抛出一个异常： <code>myCounter</code>是只读的，不能被修改。</p></div></div><hr><h2 id="58-输出是什么"><a href="#58-输出是什么" class="headerlink" title="58. 输出是什么?"></a>58. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> age);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code>, <code>true</code></li><li>B: <code>&quot;Lydia&quot;</code>, <code>21</code></li><li>C: <code>true</code>, <code>true</code></li><li>D: <code>undefined</code>, <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>delete</code>操作符返回一个布尔值： <code>true</code>指删除成功，否则返回<code>false</code>. 但是通过 <code>var</code>, <code>const</code> 或 <code>let</code> 关键字声明的变量无法用 <code>delete</code> 操作符来删除。</p><p><code>name</code>变量由<code>const</code>关键字声明，所以删除不成功:返回 <code>false</code>. 而我们设定<code>age</code>等于<code>21</code>时,我们实际上添加了一个名为<code>age</code>的属性给全局对象。对象中的属性是可以删除的，全局对象也是如此，所以<code>delete age</code>返回<code>true</code>.</p></div></div><hr><h2 id="59-输出是什么"><a href="#59-输出是什么" class="headerlink" title="59. 输出是什么?"></a>59. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [y] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[1, 2, 3, 4, 5]]</code></li><li>B: <code>[1, 2, 3, 4, 5]</code></li><li>C: <code>1</code></li><li>D: <code>[1]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们可以通过解构赋值来解析来自对象的数组或属性的值，比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/ADFpVop.png" width="200"><p><code>a</code>的值现在是<code>1</code>，<code>b</code>的值现在是<code>2</code>.而在题目中，我们是这么做的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/NzGkMNk.png" width="200"><p>也就是说，<code>y</code>等于数组的第一个值就是数字<code>1</code>.我们输出<code>y</code>， 返回<code>1</code>.</p></div></div><hr><h2 id="60-输出是什么"><a href="#60-输出是什么" class="headerlink" title="60. 输出是什么?"></a>60. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> admin = &#123; <span class="attr">admin</span>: <span class="literal">true</span>, ...user &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(admin);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; admin: true, user: &#123; name: &quot;Lydia&quot;, age: 21 &#125; &#125;</code></li><li>B: <code>&#123; admin: true, name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>&#123; admin: true, user: [&quot;Lydia&quot;, 21] &#125;</code></li><li>D: <code>&#123; admin: true &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>扩展运算符<code>...</code>为对象的组合提供了可能。你可以复制对象中的键值对，然后把它们加到另一个对象里去。在本例中，我们复制了<code>user</code>对象键值对，然后把它们加入到<code>admin</code>对象中。<code>admin</code>对象就拥有了这些键值对，所以结果为<code>{ admin: true, name: &quot;Lydia&quot;, age: 21 }</code>.</p></div></div><hr><h2 id="61-输出是什么"><a href="#61-输出是什么" class="headerlink" title="61. 输出是什么?"></a>61. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">21</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;]</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>D: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;age&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过<code>defineProperty</code>方法，我们可以给对象添加一个新属性，或者修改已经存在的属性。而我们使用<code>defineProperty</code>方法给对象添加了一个属性之后，属性默认为 <em>不可枚举(not enumerable)</em>. <code>Object.keys</code>方法仅返回对象中 <em>可枚举(enumerable)</em> 的属性，因此只剩下了<code>&quot;name&quot;</code>.</p><p>用<code>defineProperty</code>方法添加的属性默认不可变。你可以通过<code>writable</code>, <code>configurable</code> 和 <code>enumerable</code>属性来改变这一行为。这样的话， 相比于自己添加的属性，<code>defineProperty</code>方法添加的属性有了更多的控制权。</p></div></div><hr><h2 id="62-输出是什么"><a href="#62-输出是什么" class="headerlink" title="62. 输出是什么?"></a>62. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;lydiahallie&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">90</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(settings, [<span class="string">&quot;level&quot;</span>, <span class="string">&quot;health&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&#123;&quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li><li>B: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;&#125;&quot;</code></li><li>C: <code>&quot;[&quot;level&quot;, &quot;health&quot;]&quot;</code></li><li>D: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;, &quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>JSON.stringify</code>的第二个参数是 <em>替代者(replacer)</em>. 替代者(replacer)可以是个函数或数组，用以控制哪些值如何被转换为字符串。</p><p>如果替代者(replacer)是个 <em>数组</em> ，那么就只有包含在数组中的属性将会被转化为字符串。在本例中，只有名为<code>&quot;level&quot;</code> 和 <code>&quot;health&quot;</code> 的属性被包括进来， <code>&quot;username&quot;</code>则被排除在外。 <code>data</code> 就等于 <code>&quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot;</code>.</p><p>而如果替代者(replacer)是个 _函数_，这个函数将被对象的每个属性都调用一遍。<br>函数返回的值会成为这个属性的值，最终体现在转化后的JSON字符串中（译者注：Chrome下，经过实验，如果所有属性均返回同一个值的时候有异常，会直接将返回值作为结果输出而不会输出JSON字符串），而如果返回值为<code>undefined</code>，则该属性会被排除在外。</p></div></div><hr><h2 id="63-输出是什么"><a href="#63-输出是什么" class="headerlink" title="63. 输出是什么?"></a>63. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increaseNumber</span> = (<span class="params"></span>) =&gt; num++;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increasePassedNumber</span> = number =&gt; number++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="title function_">increaseNumber</span>();</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="title function_">increasePassedNumber</span>(num1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code>, <code>10</code></li><li>B: <code>10</code>, <code>11</code></li><li>C: <code>11</code>, <code>11</code></li><li>D: <code>11</code>, <code>12</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>一元操作符 <code>++</code> <em>先返回</em> 操作值, <em>再累加</em> 操作值。<code>num1</code>的值是<code>10</code>, 因为<code>increaseNumber</code>函数首先返回<code>num</code>的值，也就是<code>10</code>，随后再进行 <code>num</code>的累加。</p><p><code>num2</code>是<code>10</code>因为我们将 <code>num1</code>传入<code>increasePassedNumber</code>. <code>number</code>等于<code>10</code>（<code>num1</code>的值。同样道理，<code>++</code> <em>先返回</em> 操作值, <em>再累加</em> 操作值。） <code>number</code>是<code>10</code>，所以<code>num2</code>也是<code>10</code>.</p></div></div><hr><h2 id="64-输出什么"><a href="#64-输出什么" class="headerlink" title="64. 输出什么?"></a>64. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">number</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x = &#123; ...value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">number</span> *= <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">multiply</span>();</span><br><span class="line"><span class="title function_">multiply</span>();</span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li><li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li><li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li><li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在ES6中，我们可以使用默认值初始化参数。如果没有给函数传参，或者传的参值为 <code>&quot;undefined&quot;</code> ，那么参数的值将是默认值。上述例子中，我们将 <code>value</code> 对象进行了解构并传到一个新对象中，因此 <code>x</code> 的默认值为 <code>{number：10}</code> 。</p><p>默认参数在调用时才会进行计算，每次调用函数时，都会创建一个新的对象。我们前两次调用 <code>multiply</code> 函数且不传递值，那么每一次 <code>x</code> 的默认值都为 <code>{number：10}</code> ，因此打印出该数字的乘积值为<code>20</code>。</p><p>第三次调用 <code>multiply</code> 时，我们传递了一个参数，即对象<code>value</code>。 <code>*=</code>运算符实际上是<code>x.number = x.number * 2</code>的简写，我们修改了<code>x.number</code>的值，并打印出值<code>20</code>。</p><p>第四次，我们再次传递<code>value</code>对象。 <code>x.number</code>之前被修改为<code>20</code>，所以<code>x.number * = 2</code>打印为<code>40</code>。</p></div></div><hr><h2 id="65-输出什么"><a href="#65-输出什么" class="headerlink" title="65. 输出什么?"></a>65. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y));</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li><li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li><li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li><li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>reducer</code> 函数接收4个参数:</p><ol><li>Accumulator (acc) (累计器)</li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引)</li><li>Source Array (src) (源数组)</li></ol><p><code>reducer</code> 函数的返回值将会分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</p><p><code>reducer</code> 函数还有一个可选参数<code>initialValue</code>, 该参数将作为第一次调用回调函数时的第一个参数的值。如果没有提供<code>initialValue</code>，则将使用数组中的第一个元素。</p><p>在上述例子，<code>reduce</code>方法接收的第一个参数(Accumulator)是<code>x</code>, 第二个参数(Current Value)是<code>y</code>。</p><p>在第一次调用时，累加器<code>x</code>为<code>1</code>，当前值<code>“y”</code>为<code>2</code>，打印出累加器和当前值：<code>1</code>和<code>2</code>。</p><p>例子中我们的回调函数没有返回任何值，只是打印累加器的值和当前值。如果函数没有返回值，则默认返回<code>undefined</code>。 在下一次调用时，累加器为<code>undefined</code>，当前值为“3”, 因此<code>undefined</code>和<code>3</code>被打印出。</p><p>在第四次调用时，回调函数依然没有返回值。 累加器再次为 <code>undefined</code> ，当前值为“4”。 <code>undefined</code>和<code>4</code>被打印出。</p></div></div><hr><h2 id="66-使用哪个构造函数可以成功继承Dog类"><a href="#66-使用哪个构造函数可以成功继承Dog类" class="headerlink" title="66. 使用哪个构造函数可以成功继承Dog类?"></a>66. 使用哪个构造函数可以成功继承<code>Dog</code>类?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Labrador</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="comment">// 1 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在子类中，在调用<code>super</code>之前不能访问到<code>this</code>关键字。 如果这样做，它将抛出一个<code>ReferenceError</code>：1和4将引发一个引用错误。</p><p>使用<code>super</code>关键字，需要用给定的参数来调用父类的构造函数。 父类的构造函数接收<code>name</code>参数，因此我们需要将<code>name</code>传递给<code>super</code>。</p><p><code>Labrador</code>类接收两个参数，<code>name</code>参数是由于它继承了<code>Dog</code>，<code>size</code>作为<code>Labrador</code>类的额外属性，它们都需要传递给<code>Labrador</code>的构造函数，因此使用构造函数2正确完成。</p></div></div><hr><h2 id="67-输出什么"><a href="#67-输出什么" class="headerlink" title="67. 输出什么?"></a>67. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running index.js&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./sum.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running sum.js&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><ul><li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li><li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li><li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li><li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>import</code>命令是编译阶段执行的，在代码运行之前。因此这意味着被导入的模块会先运行，而导入模块的文件会后执行。</p><p>这是CommonJS中<code>require（）</code>和<code>import</code>之间的区别。使用<code>require()</code>，您可以在运行代码时根据需要加载依赖项。 如果我们使用<code>require</code>而不是<code>import</code>，<code>running index.js</code>，<code>running sum.js</code>，<code>3</code>会被依次打印。</p></div></div><hr><h2 id="68-输出什么"><a href="#68-输出什么" class="headerlink" title="68. 输出什么?"></a>68. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">2</span>) === <span class="title class_">Number</span>(<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">false</span>) === <span class="title class_">Boolean</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code>, <code>true</code>, <code>false</code></li><li>B: <code>false</code>, <code>true</code>, <code>false</code></li><li>C: <code>true</code>, <code>false</code>, <code>true</code></li><li>D: <code>true</code>, <code>true</code>, <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>每个<code>Symbol</code>都是完全唯一的。传递给<code>Symbol</code>的参数只是给<code>Symbol</code>的一个描述。 <code>Symbol</code>的值不依赖于传递的参数。 当我们测试相等时，我们创建了两个全新的符号：第一个<code>Symbol（&#39;foo&#39;）</code>，第二个<code>Symbol（&#39;foo&#39;）</code>, 这两个值是唯一的，彼此不相等，因此返回<code>false</code>。</p></div></div><hr><h2 id="69-输出什么"><a href="#69-输出什么" class="headerlink" title="69. 输出什么?"></a>69. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">13</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code></li><li>B: <code>&quot;           Lydia Hallie&quot;</code>, <code>&quot;  Lydia Hallie&quot;</code> (<code>&quot;[13x whitespace]Lydia Hallie&quot;</code>, <code>&quot;[2x whitespace]Lydia Hallie&quot;</code>)</li><li>C: <code>&quot; Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[1x whitespace]Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code>)</li><li>D: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lyd&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用<code>padStart</code>方法，我们可以在字符串的开头添加填充。传递给此方法的参数是字符串的总长度（包含填充）。字符串<code>Lydia Hallie</code>的长度为<code>12</code>, 因此<code>name.padStart（13）</code>在字符串的开头只会插入1（<code>13 - 12 = 1</code>）个空格。</p><p>如果传递给<code>padStart</code>方法的参数小于字符串的长度，则不会添加填充。</p></div></div><hr><h2 id="70-输出什么"><a href="#70-输出什么" class="headerlink" title="70. 输出什么?"></a>70. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🥑&quot;</span> + <span class="string">&quot;💻&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑💻&quot;</code></li><li>B: <code>257548</code></li><li>C: A string containing their code points</li><li>D: Error</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>+</code>运算符，您可以连接字符串。 上述情况，我们将字符串<code>“🥑”</code>与字符串<code>”💻“</code>连接起来，产生<code>”🥑💻“</code>。</p></div></div><hr><h2 id="71-如何能打印出console-log语句后注释掉的值？"><a href="#71-如何能打印出console-log语句后注释掉的值？" class="headerlink" title="71. 如何能打印出console.log语句后注释掉的值？"></a>71. 如何能打印出<code>console.log</code>语句后注释掉的值？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> 答案 = <span class="keyword">yield</span> <span class="string">&quot;Do you love JavaScript?&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (答案 !== <span class="string">&quot;Yes&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Oh wow... Guess we&#x27;re gone here&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;JavaScript loves you back ❤️&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="title function_">startGame</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 1 */</span>); <span class="comment">// Do you love JavaScript?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 2 */</span>); <span class="comment">// JavaScript loves you back ❤️</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>game.next(&quot;Yes&quot;).value</code> and <code>game.next().value</code></li><li>B: <code>game.next.value(&quot;Yes&quot;)</code> and <code>game.next.value()</code></li><li>C: <code>game.next().value</code> and <code>game.next(&quot;Yes&quot;).value</code></li><li>D: <code>game.next.value()</code> and <code>game.next.value(&quot;Yes&quot;)</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>generator</code>函数在遇到<code>yield</code>关键字时会“暂停”其执行。 首先，我们需要让函数产生字符串<code>Do you love JavaScript?</code>，这可以通过调用<code>game.next().value</code>来完成。上述函数的第一行就有一个<code>yield</code>关键字，那么运行立即停止了，<code>yield</code>表达式本身没有返回值，或者说总是返回<code>undefined</code>, 这意味着此时变量 <code>答案</code> 为<code>undefined</code></p><p><code>next</code>方法可以带一个参数，该参数会被当作上一个 <code>yield</code> 表达式的返回值。当我们调用<code>game.next(&quot;Yes&quot;).value</code>时，先前的 <code>yield</code> 的返回值将被替换为传递给<code>next()</code>函数的参数<code>&quot;Yes&quot;</code>。此时变量 <code>答案</code> 被赋值为 <code>&quot;Yes&quot;</code>，<code>if</code>语句返回<code>false</code>，所以<code>JavaScript loves you back ❤️</code>被打印。</p></div></div><hr><h2 id="72-输出什么"><a href="#72-输出什么" class="headerlink" title="72. 输出什么?"></a>72. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Hello\nworld`</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello world!</code></li><li>B: <code>Hello</code> <br />&nbsp; &nbsp; &nbsp;<code>world</code></li><li>C: <code>Hello\nworld</code></li><li>D: <code>Hello\n</code> <br /> &nbsp; &nbsp; &nbsp;<code>world</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>String.raw</code>函数是用来获取一个模板字符串的原始字符串的，它返回一个字符串，其中忽略了转义符（<code>\n</code>，<code>\v</code>，<code>\t</code>等）。但反斜杠可能造成问题，因为你可能会遇到下面这种类似情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="string">`C:\Documents\Projects\table.html`</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property">raw</span><span class="string">`<span class="subst">$&#123;path&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>这将导致：</p><p><code>&quot;C:DocumentsProjects able.html&quot;</code></p><p>直接使用<code>String.raw</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property">raw</span><span class="string">`C:\Documents\Projects\table.html`</span></span><br></pre></td></tr></table></figure><p>它会忽略转义字符并打印：<code>C:\Documents\Projects\table.html</code></p><p>上述情况，字符串是<code>Hello\nworld</code>被打印出。</p></div></div><hr><h2 id="73-输出什么"><a href="#73-输出什么" class="headerlink" title="73. 输出什么?"></a>73. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;I made it!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">getData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;I made it!&quot;</code></li><li>B: <code>Promise &#123;&lt;resolved&gt;: &quot;I made it!&quot;&#125;</code></li><li>C: <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>异步函数始终返回一个promise。<code>await</code>仍然需要等待promise的解决：当我们调用<code>getData()</code>并将其赋值给<code>data</code>，此时<code>data</code>为<code>getData</code>方法返回的一个挂起的promise，该promise并没有解决。</p><p>如果我们想要访问已解决的值<code>&quot;I made it!&quot;</code>，可以在<code>data</code>上使用<code>.then()</code>方法：</p><p><code>data.then(res =&gt; console.log(res))</code></p><p>这样将打印 <code>&quot;I made it!&quot;</code></p></div></div><hr><h2 id="74-输出什么"><a href="#74-输出什么" class="headerlink" title="74. 输出什么?"></a>74. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addToList</span>(<span class="params">item, list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">addToList</span>(<span class="string">&quot;apple&quot;</span>, [<span class="string">&quot;banana&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;apple&#39;, &#39;banana&#39;]</code></li><li>B: <code>2</code></li><li>C: <code>true</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>push()</code>方法返回新数组的长度。一开始，数组包含一个元素（字符串<code>&quot;banana&quot;</code>），长度为1。 在数组中添加字符串<code>&quot;apple&quot;</code>后，长度变为2，并将从<code>addToList</code>函数返回。</p><p><code>push</code>方法修改原始数组，如果你想从函数返回数组而不是数组长度，那么应该在push <code>item</code>之后返回<code>list</code>。</p></div></div><hr><h2 id="75-输出什么"><a href="#75-输出什么" class="headerlink" title="75. 输出什么?"></a>75. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = box;</span><br><span class="line">shape.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shape)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; x: 100, y: 20 &#125;</code></li><li>B: <code>&#123; x: 10, y: 20 &#125;</code></li><li>C: <code>&#123; x: 100 &#125;</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>Object.freeze</code>使得无法添加、删除或修改对象的属性（除非属性的值是另一个对象）。</p><p>当我们创建变量<code>shape</code>并将其设置为等于冻结对象<code>box</code>时，<code>shape</code>指向的也是冻结对象。你可以使用<code>Object.isFrozen</code>检查一个对象是否被冻结，上述情况，<code>Object.isFrozen（shape）</code>将返回<code>true</code>。</p><p>由于<code>shape</code>被冻结，并且<code>x</code>的值不是对象，所以我们不能修改属性<code>x</code>。 <code>x</code>仍然等于<code>10</code>，<code>{x：10，y：20}</code>被打印。</p><p>注意，上述例子我们对属性<code>x</code>进行修改，可能会导致抛出TypeError异常（最常见但不仅限于严格模式下时）。</p></div></div><hr><h2 id="76-输出什么"><a href="#76-输出什么" class="headerlink" title="76. 输出什么?"></a>76. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;myName&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>当我们从右侧的对象解构属性<code>name</code>时，我们将其值<code>Lydia</code>分配给名为<code>myName</code>的变量。</p><p>使用<code>{name：myName}</code>，我们是在告诉JavaScript我们要创建一个名为<code>myName</code>的新变量，并且其值是右侧对象的<code>name</code>属性的值。</p><p>当我们尝试打印<code>name</code>，一个未定义的变量时，就会引发<code>ReferenceError</code>。</p></div></div><hr><h2 id="77-以下是个纯函数么"><a href="#77-以下是个纯函数么" class="headerlink" title="77. 以下是个纯函数么?"></a>77. 以下是个纯函数么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: Yes</li><li>B: No</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>纯函数在相同的输入值时，需产生相同的输出，其输出的结果，与输入值以外的其他隐藏信息或状态无关，也和由I&#x2F;O设备产生的外部输出无关。<br>纯函数不会产生副作用。</p><p>纯函数与副作用的定义可参考：<br><a href="https://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">https://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)</a></p></div></div><hr><h2 id="78-输出什么"><a href="#78-输出什么" class="headerlink" title="78. 输出什么?"></a>78. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`From cache! <span class="subst">$&#123;cache[num]&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = num + <span class="number">10</span>;</span><br><span class="line">      cache[num] = result;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Calculated! <span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFunction = <span class="title function_">add</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">5</span> * <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li><li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li><li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li><li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>add</code>函数是一个记忆函数。 通过记忆化，我们可以缓存函数的结果，以加快其执行速度。上述情况，我们创建一个<code>cache</code>对象，用于存储先前返回过的值。</p><p>如果我们使用相同的参数多次调用<code>addFunction</code>函数，它首先检查缓存中是否已有该值，如果有，则返回缓存值，这将节省执行时间。如果没有，那么它将计算该值，并存储在缓存中。</p><p>我们用相同的值三次调用了<code>addFunction</code>函数：</p><p>在第一次调用，<code>num</code>等于<code>10</code>时函数的值尚未缓存，if语句<code>num in cache</code>返回<code>false</code>，else块的代码被执行：<code>Calculated! 20</code>，并且其结果被添加到缓存对象，<code>cache</code>现在看起来像<code>{10：20}</code>。</p><p>第二次，<code>cache</code>对象包含<code>10</code>的返回值。 if语句 <code>num in cache</code> 返回<code>true</code>，<code>From cache! 20</code>被打印。</p><p>第三次，我们将<code>5 * 2</code>(值为10)传递给函数。 <code>cache</code>对象包含<code>10</code>的返回值。 if语句 <code>num in cache</code> 返回<code>true</code>，<code>From cache! 20</code>被打印。</p></div></div><hr><h2 id="79-输出什么"><a href="#79-输出什么" class="headerlink" title="79. 输出什么?"></a><a name=20190726></a>79. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myLifeSummedUp = [<span class="string">&quot;☕&quot;</span>, <span class="string">&quot;💻&quot;</span>, <span class="string">&quot;🍷&quot;</span>, <span class="string">&quot;🍫&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>B: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>C: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li><li>D:  <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&#123;0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>通过<code>for-in</code>循环，我们可以遍历一个对象<strong>自有的</strong>、<strong>继承的</strong>、<strong>可枚举的</strong>、<strong>非Symbol的</strong>属性。 在数组中，可枚举属性是数组元素的“键”， 即它们的索引。 类似于下面这个对象：</p><p><code>{0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;}</code></p><p>其中键则是可枚举属性，因此 <code>0</code>，<code>1</code>，<code>2</code>，<code>3</code>被记录。</p><p>通过<code>for-of</code>循环，我们可以迭代<strong>可迭代对象</strong>（包括 <code>Array</code>，<code>Map</code>，<code>Set</code>，<code>String</code>，<code>arguments</code>等）。当我们迭代数组时，在每次迭代中，不同属性的值将被分配给变量<code>item</code>, 因此<code>“☕”</code>，<code>“💻”</code>，<code>“🍷”</code>，<code>“🍫”</code>被打印。</p></div></div><hr><h2 id="80-输出什么"><a href="#80-输出什么" class="headerlink" title="80. 输出什么?"></a>80. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span> + <span class="number">2</span>, <span class="number">1</span> * <span class="number">2</span>, <span class="number">1</span> / <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;]</code></li><li>B: <code>[&quot;12&quot;, 2, 0.5]</code></li><li>C: <code>[3, 2, 0.5]</code></li><li>D:  <code>[1, 1, 1]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>数组元素可以包含任何值。 数字，字符串，布尔值，对象，数组，<code>null</code>，<code>undeifned</code>, 以及其他表达式，如日期，函数和计算。</p><p>元素将等于返回的值。 <code>1 + 2</code>返回<code>3</code>，<code>1 * 2</code>返回’2<code>，&#39;1 / 2</code>返回<code>0.5</code>。</p></div></div><hr><h2 id="81-输出什么"><a href="#81-输出什么" class="headerlink" title="81. 输出什么?"></a>81. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hi there, <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHi</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hi there, </code></li><li>B: <code>Hi there, undefined</code></li><li>C: <code>Hi there, null</code></li><li>D:  <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>默认情况下，如果不给函数传参，参数的值将为<code>undefined</code>。 上述情况，我们没有给参数<code>name</code>传值。 <code>name</code>等于<code>undefined</code>，并被打印。</p><p>在ES6中，我们可以使用默认参数覆盖此默认的<code>undefined</code>值。 例如：</p><p><code>function sayHi（name =“Lydia”）{...}</code></p><p>在这种情况下，如果我们没有传递值或者如果我们传递<code>undefined</code>，<code>name</code>总是等于字符串<code>Lydia</code></p></div></div><hr><h2 id="82-输出什么"><a href="#82-输出什么" class="headerlink" title="82. 输出什么?"></a>82. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status = <span class="string">&quot;😎&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="string">&quot;😍&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;🥑&quot;</span>,</span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">getStatus</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">getStatus</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>))</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑&quot;</code> and <code>&quot;😍&quot;</code></li><li>B: <code>&quot;🥑&quot;</code> and <code>&quot;😎&quot;</code></li><li>C: <code>&quot;😍&quot;</code> and <code>&quot;😎&quot;</code></li><li>D: <code>&quot;😎&quot;</code> and <code>&quot;😎&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>this</code>关键字的指向取决于使用它的位置。 在<strong>函数</strong>中，比如<code>getStatus</code>，<code>this</code>指向的是调用它的对象，上述例子中<code>data</code>对象调用了<code>getStatus</code>，因此<code>this</code>指向的就是<code>data</code>对象。 当我们打印<code>this.status</code>时，<code>data</code>对象的<code>status</code>属性被打印，即<code>&quot;🥑&quot;</code>。</p><p>使用<code>call</code>方法，可以更改<code>this</code>指向的对象。<code>data.getStatus.call(this)</code>是将<code>this</code>的指向由<code>data</code>对象更改为全局对象。在全局对象上，有一个名为<code>status</code>的变量，其值为<code>”😎“</code>。 因此打印<code>this.status</code>时，会打印<code>“😎”</code>。</p></div></div><hr><h2 id="83-输出什么"><a href="#83-输出什么" class="headerlink" title="83. 输出什么?"></a>83. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> city = person.<span class="property">city</span></span><br><span class="line">city = <span class="string">&quot;Amsterdam&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot; &#125;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: undefined &#125;</code></li><li>D: <code>&quot;Amsterdam&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们将变量<code>city</code>设置为等于<code>person</code>对象上名为<code>city</code>的属性的值。 这个对象上没有名为<code>city</code>的属性，因此变量<code>city</code>的值为<code>undefined</code>。</p><p>请注意，我们没有引用<code>person</code>对象本身，只是将变量<code>city</code>设置为等于<code>person</code>对象上<code>city</code>属性的当前值。</p><p>然后，我们将<code>city</code>设置为等于字符串<code>“Amsterdam”</code>。 这不会更改person对象：没有对该对象的引用。</p><p>因此打印<code>person</code>对象时，会返回未修改的对象。</p></div></div><hr><h2 id="84-输出什么"><a href="#84-输出什么" class="headerlink" title="84. 输出什么?"></a>84. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Sorry, you&#x27;re too young.&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Yay! You&#x27;re old enough!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">21</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Sorry, you&#39;re too young.&quot;</code></li><li>B: <code>&quot;Yay! You&#39;re old enough!&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>const</code>和<code>let</code>声明的变量是具有<strong>块级作用域</strong>的，块是大括号（<code>{}</code>）之间的任何东西, 即上述情况<code>if / else</code>语句的花括号。 由于块级作用域，我们无法在声明的块之外引用变量，因此抛出<code>ReferenceError</code>。</p></div></div><hr><h2 id="85-什么样的信息将被打印"><a href="#85-什么样的信息将被打印" class="headerlink" title="85. 什么样的信息将被打印?"></a>85. 什么样的信息将被打印?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://www.website.com/api/user/1&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><ul><li>A: <code>fetch</code>方法的结果</li><li>B: 第二次调用<code>fetch</code>方法的结果</li><li>C: 前一个<code>.then()</code>中回调方法返回的结果</li><li>D: 总是<code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>第二个<code>.then</code>中<code>res</code>的值等于前一个<code>.then</code>中的回调函数返回的值。 你可以像这样继续链接<code>.then</code>，将值传递给下一个处理程序。</p></div></div><hr><h2 id="86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递"><a href="#86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递" class="headerlink" title="86. 哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递?"></a>86. 哪个选项是将<code>hasName</code>设置为<code>true</code>的方法，前提是不能将<code>true</code>作为参数传递?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hasName = <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>!!name</code></li><li>B: <code>name</code></li><li>C: <code>new Boolean(name)</code></li><li>D: <code>name.length</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用逻辑非运算符<code>!</code>，将返回一个布尔值，使用<code>!! name</code>，我们可以确定<code>name</code>的值是真的还是假的。 如果<code>name</code>是真实的，那么<code>!name</code>返回<code>false</code>。 <code>!false</code>返回<code>true</code>。</p><p>通过将<code>hasName</code>设置为<code>name</code>，可以将<code>hasName</code>设置为等于传递给<code>getName</code>函数的值，而不是布尔值<code>true</code>。</p><p><code>new Boolean（true）</code>返回一个对象包装器，而不是布尔值本身。</p><p><code>name.length</code>返回传递的参数的长度，而不是布尔值<code>true</code>。</p></div></div><h2 id="87-输出什么"><a href="#87-输出什么" class="headerlink" title="87. 输出什么?"></a>87. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I want pizza&quot;</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&quot;&quot;</code></li><li>B: <code>&quot;I&quot;</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>可以使用方括号表示法获取字符串中特定索引的字符，字符串中的第一个字符具有索引0，依此类推。 在这种情况下，我们想要得到索引为0的元素，字符<code>&#39;I&#39;</code>被记录。</p><p>请注意，IE7及更低版本不支持此方法。 在这种情况下，应该使用<code>.charAt（）</code></p></div></div><hr><h2 id="88-输出什么"><a href="#88-输出什么" class="headerlink" title="88. 输出什么?"></a>88. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2 = num1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>20</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>您可以将默认参数的值设置为函数的另一个参数，只要另一个参数定义在其之前即可。 我们将值<code>10</code>传递给<code>sum</code>函数。 如果<code>sum</code>函数只接收1个参数，则意味着没有传递<code>num2</code>的值，这种情况下，<code>num1</code>的值等于传递的值<code>10</code>。 <code>num2</code>的默认值是<code>num1</code>的值，即<code>10</code>。 <code>num1 + num2</code>返回<code>20</code>。</p><p>如果您尝试将默认参数的值设置为后面定义的参数，则可能导致参数的值尚未初始化，从而引发错误。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">m = n, n = <span class="number">2</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>() <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;n&#x27; before initialization</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">3</span>) <span class="comment">// 3 2</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3 4</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="89-输出什么"><a href="#89-输出什么" class="headerlink" title="89. 输出什么?"></a>89. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> () =&gt; <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> data <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; default: function default(), name: &quot;Lydia&quot; &#125;</code></li><li>B: <code>&#123; default: function default() &#125;</code></li><li>C: <code>&#123; default: &quot;Hello world&quot;, name: &quot;Lydia&quot; &#125;</code></li><li>D: Global object of <code>module.js</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>import * as name</code>语法，我们将<code>module.js</code>文件中所有<code>export</code>导入到<code>index.js</code>文件中，并且创建了一个名为<code>data</code>的新对象。 在<code>module.js</code>文件中，有两个导出：默认导出和命名导出。 默认导出是一个返回字符串“Hello World”的函数，命名导出是一个名为<code>name</code>的变量，其值为字符串<code>“Lydia”</code>。</p><p><code>data</code>对象具有默认导出的<code>default</code>属性，其他属性具有指定exports的名称及其对应的值。</p></div></div><hr><h2 id="90-输出什么"><a href="#90-输出什么" class="headerlink" title="90. 输出什么?"></a>90. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;class&quot;</code></li><li>B: <code>&quot;function&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;string&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>类是构造函数的语法糖，如果用构造函数的方式来重写<code>Person</code>类则将是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>new</code>来调用构造函数，将会生成构造函数<code>Person</code>的实例，对实例执行<code>typeof</code>关键字将返回<code>&quot;object&quot;</code>，上述情况打印出<code>&quot;object&quot;</code>。</p></div></div><hr><h2 id="91-输出什么"><a href="#91-输出什么" class="headerlink" title="91. 输出什么?"></a>91. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newList.<span class="title function_">push</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 4, 5]</code></li><li>B: <code>[1, 2, 3, 5]</code></li><li>C: <code>[1, 2, 3, 4]</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>.push</code>方法返回数组的长度，而不是数组本身！ 通过将<code>newList</code>设置为<code>[1,2,3].push(4)</code>，实际上<code>newList</code>等于数组的新长度：<code>4</code>。</p><p>然后，尝试在<code>newList</code>上使用<code>.push</code>方法。 由于<code>newList</code>是数值<code>4</code>，抛出TypeError。</p></div></div><hr><h2 id="92-输出什么"><a href="#92-输出什么" class="headerlink" title="92. 输出什么?"></a>92. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">giveLydiaPizza</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Here is pizza!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">giveLydiaChocolate</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;Here&#x27;s chocolate... now go hit the gym already.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaPizza.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaChocolate.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; constructor: ...&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>B: <code>&#123;&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>C: <code>&#123; constructor: ...&#125;</code> <code>&#123;&#125;</code></li><li>D: <code>&#123; constructor: ...&#125;</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>常规函数，例如<code>giveLydiaPizza</code>函数，有一个<code>prototype</code>属性，它是一个带有<code>constructor</code>属性的对象（原型对象）。 然而，箭头函数，例如<code>giveLydiaChocolate</code>函数，没有这个<code>prototype</code>属性。 尝试使用<code>giveLydiaChocolate.prototype</code>访问<code>prototype</code>属性时会返回<code>undefined</code>。</p></div></div><hr><h2 id="93-输出什么"><a href="#93-输出什么" class="headerlink" title="93. 输出什么?"></a>93. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [x, y] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(person)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li><li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> and <code>[&quot;age&quot;, 21]</code> </li><li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> and <code>undefined</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，上述情况返回一个二维数组，数组每个元素是一个包含键和值的数组：</p><p><code>[[&#39;name&#39;，&#39;Lydia&#39;]，[&#39;age&#39;，21]]</code></p><p>使用<code>for-of</code>循环，我们可以迭代数组中的每个元素，上述情况是子数组。 我们可以使用<code>const [x，y]</code>在<code>for-of</code>循环中解构子数组。 <code>x</code>等于子数组中的第一个元素，<code>y</code>等于子数组中的第二个元素。</p><p>第一个子阵列是<code>[“name”，“Lydia”]</code>，其中<code>x</code>等于<code>name</code>，而<code>y</code>等于<code>Lydia</code>。<br>第二个子阵列是<code>[“age”，21]</code>，其中<code>x</code>等于<code>age</code>，而<code>y</code>等于<code>21</code>。</p></div></div><hr><h2 id="94-输出什么"><a href="#94-输出什么" class="headerlink" title="94. 输出什么?"></a>94. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getItems</span>(<span class="params">fruitList, ...args, favoriteFruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getItems</span>([<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>], <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;]</code></li><li>B: <code>[[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;]</code> </li><li>C: <code>[&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;]</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>... args</code>是剩余参数，剩余参数的值是一个包含所有剩余参数的数组，<strong>并且只能作为最后一个参数</strong>。上述示例中，剩余参数是第二个参数，这是不可能的，并会抛出语法错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getItems</span>(<span class="params">fruitList, favoriteFruit, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getItems</span>([<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>], <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure><p>上述例子是有效的，将会返回数组：<code>[ &#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;pear&#39; ]</code></p></div></div><hr><h2 id="95-输出什么"><a href="#95-输出什么" class="headerlink" title="95. 输出什么?"></a><a name=20190817></a>95. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nums</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span></span><br><span class="line">  (a &gt; b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li><li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li><li>C: <code>undefined</code> and <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在JavaScript中，我们不必显式地编写分号(<code>;</code>)，但是JavaScript引擎仍然在语句之后自动添加分号。这称为<strong>自动分号插入</strong>。例如，一个语句可以是变量，或者像<code>throw</code>、<code>return</code>、<code>break</code>这样的关键字。</p><p>在这里，我们在新的一行上写了一个<code>return</code>语句和另一个值<code>a + b </code>。然而，由于它是一个新行，引擎并不知道它实际上是我们想要返回的值。相反，它会在<code>return</code>后面自动添加分号。你可以这样看:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><p>这意味着永远不会到达<code>a + b</code>，因为函数在<code>return</code>关键字之后停止运行。如果没有返回值，就像这里，函数返回<code>undefined</code>。注意，在<code>if/else</code>语句之后没有自动插入!</p></div></div><hr><h2 id="96-输出什么"><a href="#96-输出什么" class="headerlink" title="96. 输出什么?"></a>96. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> = <span class="keyword">class</span> <span class="title class_">AnotherPerson</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;Sarah&quot;</code></li><li>C: <code>Error: cannot redeclare Person</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们可以将类设置为等于其他类&#x2F;函数构造函数。 在这种情况下，我们将<code>Person</code>设置为<code>AnotherPerson</code>。 这个构造函数的名字是<code>Sarah</code>，所以新的<code>Person</code>实例<code>member</code>上的name属性是<code>Sarah</code>。</p></div></div><hr><h2 id="97-输出什么"><a href="#97-输出什么" class="headerlink" title="97. 输出什么?"></a>97. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>)]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(info))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[&quot;&#123;Symbol(&#39;a&#39;)&quot;]</code></li><li>B: <code>&#123;&#125;</code> and <code>[]</code></li><li>C: <code>&#123; a: &quot;b&quot; &#125;</code> and <code>[&quot;a&quot;]</code></li><li>D: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>Symbol</code>类型是不可枚举的。<code>Object.keys</code>方法返回对象上的所有可枚举的键属性。<code>Symbol</code>类型是不可见的，并返回一个空数组。 记录整个对象时，所有属性都是可见的，甚至是不可枚举的属性。</p><p>这是<code>Symbol</code>的众多特性之一：除了表示完全唯一的值（防止对象意外名称冲突，例如当使用2个想要向同一对象添加属性的库时），您还可以<code>隐藏</code>这种方式对象的属性（尽管不完全。你仍然可以使用<code>Object.getOwnPropertySymbols()</code>方法访问 <code>Symbol</code>。</p></div></div><hr><h2 id="98-输出什么"><a href="#98-输出什么" class="headerlink" title="98. 输出什么?"></a>98. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params">[x, ...y]</span>) =&gt; [x, y]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUser</span> = user =&gt; &#123; <span class="attr">name</span>: user.<span class="property">name</span>, <span class="attr">age</span>: user.<span class="property">age</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getList</span>(list))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getUser</span>(user))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, [2, 3, 4]]</code> and <code>undefined</code></li><li>B: <code>[1, [2, 3, 4]]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>[1, 2, 3, 4]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>D: <code>Error</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>getList</code>函数接收一个数组作为其参数。 在<code>getList</code>函数的括号之间，我们立即解构这个数组。 您可以将其视为：</p><p> <code>[x, ...y] = [1, 2, 3, 4]</code></p><p>使用剩余的参数<code>... y</code>，我们将所有剩余参数放在一个数组中。 在这种情况下，其余的参数是<code>2</code>，<code>3</code>和<code>4</code>。 <code>y</code>的值是一个数组，包含所有其余参数。 在这种情况下，<code>x</code>的值等于<code>1</code>，所以当我们打印<code>[x，y]</code>时，会打印<code>[1，[2,3,4]]</code>。</p><p> <code>getUser</code>函数接收一个对象。对于箭头函数，如果只返回一个值，我们不必编写花括号。但是，如果您想从一个箭头函数返回一个对象，您必须在圆括号之间编写它，否则不会返回任何值!下面的函数将返回一个对象:</p><p><code>const getUser = user =&gt; ({ name: user.name, age: user.age })</code></p><p>由于在这种情况下不返回任何值，因此该函数返回<code>undefined</code>。</p></div></div><hr><h2 id="99-输出什么"><a href="#99-输出什么" class="headerlink" title="99. 输出什么?"></a>99. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">name</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>SyntaxError</code></li><li>B: <code>ReferenceError</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>变量<code>name</code>保存字符串的值，该字符串不是函数，因此无法调用。</p><p>当值不是预期类型时，会抛出<code>TypeErrors</code>。 JavaScript期望<code>name</code>是一个函数，因为我们试图调用它。 但它是一个字符串，因此抛出<code>TypeError</code>：<code>name is not a function</code></p><p>当你编写了一些非有效的JavaScript时，会抛出语法错误，例如当你把<code>return</code>这个词写成<code>retrun</code>时。<br>当JavaScript无法找到您尝试访问的值的引用时，抛出<code>ReferenceErrors</code>。</p></div></div><hr><h2 id="100-输出什么"><a href="#100-输出什么" class="headerlink" title="100. 输出什么?"></a>100. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🎉✨ This is my 100th question! ✨🎉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">`<span class="subst">$&#123;[] &amp;&amp; <span class="string">&#x27;Im&#x27;</span>&#125;</span>possible!</span></span><br><span class="line"><span class="string">You should<span class="subst">$&#123;<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="string">`n&#x27;t`</span>&#125;</span> see a therapist after so much JavaScript lol`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li><li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li><li>C: <code>possible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li><li>D: <code>Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>[]</code>是一个真值。 使用<code>&amp;&amp;</code>运算符，如果左侧值是真值，则返回右侧值。 在这种情况下，左侧值<code>[]</code>是一个真值，所以返回<code>Im</code>。</p><p><code>&quot;&quot;</code>是一个假值。 如果左侧值是假的，则不返回任何内容。 <code>n&#39;t</code>不会被退回。</p></div></div><hr><h2 id="101-输出什么"><a href="#101-输出什么" class="headerlink" title="101.输出什么?"></a>101.输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = (<span class="literal">false</span> || &#123;&#125; || <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> two = (<span class="literal">null</span> || <span class="literal">false</span> || <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> three = ([] || <span class="number">0</span> || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one, two, three)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>null</code> <code>[]</code></li><li>B: <code>null</code> <code>&quot;&quot;</code> <code>true</code></li><li>C: <code>&#123;&#125;</code> <code>&quot;&quot;</code> <code>[]</code></li><li>D: <code>null</code> <code>null</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用<code>||</code>运算符，我们可以返回第一个真值。 如果所有值都是假值，则返回最后一个值。</p><p><code>（false || {} || null）</code>：空对象<code>{}</code>是一个真值。 这是第一个（也是唯一的）真值，它将被返回。<code>one</code>等于<code>{}</code>。</p><p><code>（null || false ||“”）</code>：所有值都是假值。 这意味着返回传递的值<code>&quot;&quot;</code>。 <code>two</code>等于<code>&quot;&quot;</code>。</p><p><code>（[] || 0 ||“”）</code>：空数组<code>[]</code>是一个真值。 这是第一个返回的真值。 <code>three</code>等于<code>[]</code>。</p></div></div><hr><h2 id="102-依次输出什么"><a href="#102-依次输出什么" class="headerlink" title="102. 依次输出什么?"></a>102. 依次输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myPromise</span> = (<span class="params"></span>) =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;I have resolved!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">myPromise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">secondFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">myPromise</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">firstFunction</span>()</span><br><span class="line"><span class="title function_">secondFunction</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li><li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li><li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li><li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>有了promise，我们通常会说：当我想要调用某个方法，但是由于它可能需要一段时间，因此暂时将它放在一边。只有当某个值被resolved&#x2F;rejected，并且执行栈为空时才使用这个值。</p><p>我们可以在<code>async</code>函数中通过<code>.then</code>和<code>await</code>关键字获得该值。 尽管我们可以通过<code>.then</code>和<code>await</code>获得promise的价值，但是它们的工作方式有所不同。</p><p>在 <code>firstFunction</code>中，当运行到<code>myPromise</code>方法时我们将其放在一边，即promise进入微任务队列，其他后面的代码（<code>console.log(&#39;second&#39;)</code>）照常运行，因此<code>second</code>被打印出，<code>firstFunction</code>方法到此执行完毕，执行栈中宏任务队列被清空，此时开始执行微任务队列中的任务，<code>I have resolved</code>被打印出。</p><p>在<code>secondFunction</code>方法中，我们通过<code>await</code>关键字，暂停了后面代码的执行，直到异步函数的值被解析才开始后面代码的执行。这意味着，它会等着直到 <code>myPromise</code> 以值<code>I have resolved</code>被解决之后，下一行<code>second</code>才开始执行。</p></div></div><hr><h2 id="103-输出什么"><a href="#103-输出什么" class="headerlink" title="103. 输出什么?"></a>103. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&quot;Lydia&quot;</span>)</span><br><span class="line">set.<span class="title function_">add</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li><li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li><li>C: <code>3</code>, <code>Lydia2</code>, <code>[Object object]2</code></li><li>D: <code>&quot;12&quot;</code>, <code>Lydia2</code>, <code>[Object object]2</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>“+”运算符不仅用于添加数值，还可以使用它来连接字符串。 每当JavaScript引擎发现一个或多个值不是数字时，就会将数字强制为字符串。 </p><p>第一个是数字1。 1 + 2返回数字3。</p><p>但是，第二个是字符串“Lydia”。 “Lydia”是一个字符串，2是一个数字：2被强制转换为字符串。 “Lydia”和“2”被连接起来，产生字符串“Lydia2”。</p><p><code>{name：“ Lydia”}</code>是一个对象。 数字和对象都不是字符串，因此将二者都字符串化。 每当我们对常规对象进行字符串化时，它就会变成<code>[Object object]</code>。 与“2”串联的“ [Object object]”成为“[Object object]2”。</p></div></div><hr><h2 id="104-结果是什么"><a href="#104-结果是什么" class="headerlink" title="104. 结果是什么?"></a>104. 结果是什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>5</code></li><li>B: <code>Promise &#123;&lt;pending&gt;: 5&#125;</code></li><li>C: <code>Promise &#123;&lt;fulfilled&gt;: 5&#125;</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们可以将我们想要的任何类型的值传递<code>Promise.resolve</code>，无论是否<code>promise</code>。 该方法本身返回带有已解析值的<code>Promise</code> (<code>&lt;fulfilled&gt;</code>)。 如果您传递常规函数，它将是具有常规值的已解决<code>promise</code>。 如果你通过了promise，它将是一个已经resolved的且带有传的值的promise。</p><p>上述情况，我们传了数字5，因此返回一个resolved状态的promise，resolve值为<code>5</code></p></div></div><h2 id="105-输出什么"><a href="#105-输出什么" class="headerlink" title="105. 输出什么?"></a>105. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareMembers</span>(<span class="params">person1, person2 = person</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person1 !== person2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Not the same!&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;They are the same!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compareMembers</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Not the same!</code></li><li>B: <code>They are the same!</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象通过引用传递。 当我们检查对象的严格相等性（&#x3D;&#x3D;&#x3D;）时，我们正在比较它们的引用。</p><p>我们将“person2”的默认值设置为“person”对象，并将“person”对象作为“person1”的值传递。</p><p>这意味着两个值都引用内存中的同一位置，因此它们是相等的。</p><p>运行“ else”语句中的代码块，并记录<code>They are the same!</code> 。</p></div></div><hr><h2 id="106-输出什么"><a href="#106-输出什么" class="headerlink" title="106. 输出什么?"></a>106. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorConfig = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">black</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">yellow</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorConfig.<span class="property">colors</span>[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li><li>C: <code>undefined</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在JavaScript中，我们有两种访问对象属性的方法：括号表示法或点表示法。 在此示例中，我们使用点表示法（<code>colorConfig.colors</code>）代替括号表示法（<code>colorConfig [“ colors”]</code>）。</p><p>使用点表示法，JavaScript会尝试使用该确切名称在对象上查找属性。 在此示例中，JavaScript尝试在colorconfig对象上找到名为colors的属性。 没有名为“colors”的属性，因此返回“undefined”。<br>然后，我们尝试使用<code>[1]</code>访问第一个元素的值。 我们无法对未定义的值执行此操作，因此会抛出<code>Cannot read property &#39;1&#39; of undefined</code>。</p><p>JavaScript解释（或取消装箱）语句。 当我们使用方括号表示法时，它会看到第一个左方括号<code>[</code>并一直进行下去，直到找到右方括号<code>]</code>。 只有这样，它才会评估该语句。 如果我们使用了colorConfig [colors [1]]，它将返回colorConfig对象上red属性的值。</p></div></div><hr><h2 id="107-输出什么"><a href="#107-输出什么" class="headerlink" title="107. 输出什么?"></a>107. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤️&#x27;</span> === <span class="string">&#x27;❤️&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在内部，表情符号是unicode。 heat表情符号的unicode是<code>“ U + 2764 U + FE0F”</code>。 对于相同的表情符号，它们总是相同的，因此我们将两个相等的字符串相互比较，这将返回true。</p></div></div><hr><h2 id="108-哪些方法修改了原数组"><a href="#108-哪些方法修改了原数组" class="headerlink" title="108. 哪些方法修改了原数组?"></a>108. 哪些方法修改了原数组?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&#x27;✨&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;😍&#x27;</span>]</span><br><span class="line"></span><br><span class="line">emojis.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>) </span><br><span class="line">emojis.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>All of them</code></li><li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li><li>C: <code>map</code> <code>slice</code> <code>splice</code> </li><li>D: <code>splice</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>使用<code>splice</code>方法，我们通过删除，替换或添加元素来修改原始数组。 在这种情况下，我们从索引1中删除了2个元素（我们删除了<code>&#39;🥑&#39;</code>和<code>&#39;😍&#39;</code>），同时添加了✨emoji表情。</p><p><code>map</code>，<code>filter</code>和<code>slice</code>返回一个新数组，<code>find</code>返回一个元素，而<code>reduce</code>返回一个减小的值。</p></div></div><hr><h2 id="109-输出什么"><a href="#109-输出什么" class="headerlink" title="109. 输出什么?"></a><a name=20191009></a>109. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = [<span class="string">&#x27;🍕&#x27;</span>, <span class="string">&#x27;🍫&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;🍔&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">favoriteFood</span>: food[<span class="number">0</span>] &#125;</span><br><span class="line"></span><br><span class="line">info.<span class="property">favoriteFood</span> = <span class="string">&#x27;🍝&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>B: <code>[&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>C: <code>[&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code> </li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们将<code>info</code>对象上的<code>favoriteFood</code>属性的值设置为披萨表情符号“🍕”的字符串。字符串是原始数据类型。在JavaScript中，原始数据类型通过值起作用</p><p>在这种情况下，我们将<code>info</code>对象上的<code>favoriteFood</code>属性的值设置为等于<code>food</code>数组中的第一个元素的值，字符串为披萨表情符号（<code>&#39;🍕&#39;</code> ）。字符串是原始数据类型，并且通过值进行交互，我们更改<code>info</code>对象上<code>favoriteFood</code>属性的值。 food数组没有改变，因为favoriteFood的值只是该数组中第一个元素的值的复制，并且与该元素上的元素没有相同的内存引用食物<code>[0]</code>。当我们记录食物时，它仍然是原始数组<code>[&#39;🍕&#39;，&#39;🍫&#39;，&#39;🥑&#39;，&#39;🍔&#39;]</code>。</p></div></div><hr><h2 id="110-这个函数干了什么"><a href="#110-这个函数干了什么" class="headerlink" title="110. 这个函数干了什么?"></a>110. 这个函数干了什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Parses JSON to a JavaScript value</li><li>B: Parses a JavaScript object to JSON</li><li>C: Parses any JavaScript value to JSON</li><li>D: Parses JSON to a JavaScript object only</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>JSON.parse()</code>方法，我们可以将JSON字符串解析为JavaScript值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将数字字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonNumber = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="number">4</span>) <span class="comment">// &#x27;4&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonNumber) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组值字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// &#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonArray) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;) <span class="comment">// &#x27;&#123;&quot;name&quot;:&quot;Lydia&quot;&#125;&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonArray) <span class="comment">// &#123; name: &#x27;Lydia&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="111-输出什么"><a href="#111-输出什么" class="headerlink" title="111. 输出什么?"></a>111. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;Sarah&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Lydia</li><li>B: Sarah</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>每个函数都有其自己的执行上下文。 <code>getName</code>函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量<code>name</code>。 上述情况，<code>getName</code>函数包含其自己的<code>name</code>变量：我们用<code>let</code>关键字和<code>Sarah</code>的值声明变量<code>name</code>。</p><p>带有<code>let</code>关键字（和<code>const</code>）的变量被提升，但是与<code>var</code>不同，它不会被<em><strong>初始化</strong></em>。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出<code>ReferenceError: Cannot access &#39;name&#39; before initialization</code>。</p><p>如果我们不在<code>getName</code>函数中声明<code>name</code>变量，则javascript引擎会查看原型练。会找到其外部作用域有一个名为<code>name</code>的变量，其值为<code>Lydia</code>。 在这种情况下，它将打印<code>Lydia</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>() <span class="comment">// Lydia</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="112-输出什么？"><a href="#112-输出什么？" class="headerlink" title="112. 输出什么？"></a>112. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = <span class="title function_">generatorOne</span>()</span><br><span class="line"><span class="keyword">const</span> two = <span class="title function_">generatorTwo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>a</code> and <code>a</code></li><li>B: <code>a</code> and <code>undefined</code></li><li>C: <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> and <code>a</code></li><li>D: <code>a</code> and <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过 <code>yield</code> 关键字, 我们在 <code>Generator</code> 函数里执行<code>yield</code>表达式. 通过 <code>yield*</code> 关键字, 我们可以在一个<code>Generator</code> 函数里面执行（<code>yield</code>表达式）另一个 <code>Generator</code> 函数, 或可遍历的对象 (如数组).</p><p>在函数 <code>generatorOne</code> 中, 我们通过 <code>yield</code> 关键字 yield 了一个完整的数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>。函数<code>one</code>通过<code>next</code>方法返回的对象的<code>value</code> 属性的值 (<code>one.next().value</code>) 等价于数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在函数 <code>generatorTwo</code> 中, 我们使用 <code>yield*</code> 关键字。就相当于函数<code>two</code>第一个<code>yield</code>的值, 等价于在迭代器中第一个 <code>yield</code> 的值。数组<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>就是这个迭代器. 第一个 <code>yield</code> 的值就是 <code>a</code>, 所以我们第一次调用 <code>two.next().value</code>时, 就返回<code>a</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="113-输出什么？"><a href="#113-输出什么？" class="headerlink" title="113. 输出什么？"></a>113. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;(x =&gt; x)(<span class="string">&#x27;I love&#x27;</span>)&#125;</span> to program`</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>I love to program</code></li><li>B: <code>undefined to program</code></li><li>C: <code>$&#123;(x =&gt; x)(&#39;I love&#39;) to program</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>带有模板字面量的表达式首先被执行。相当于字符串会包含表达式，这个立即执行函数 <code>(x =&gt; x)(&#39;I love&#39;)</code> 返回的值. 我们向箭头函数 <code>x =&gt; x</code> 传递 <code>&#39;I love&#39;</code> 作为参数。<code>x</code> 等价于返回的 <code>&#39;I love&#39;</code>。这就是结果 <code>I love to program</code>。</p></div></div><hr><h2 id="114-将会发生什么"><a href="#114-将会发生什么" class="headerlink" title="114. 将会发生什么?"></a>114. 将会发生什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">alert</span>: <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Alert!&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>setInterval</code> 的回调不会被调用</li><li>B: <code>setInterval</code> 的回调被调用一次</li><li>C: <code>setInterval</code> 的回调仍然会被每秒钟调用</li><li>D: 我们从没调用过 <code>config.alert()</code>, config 为 <code>null</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一般情况下当我们将对象赋值为 <code>null</code>, 那些对象会被进行 <em>垃圾回收（garbage collected）</em> 因为已经没有对这些对象的引用了。然而，<code>setInterval</code>的参数是一个箭头函数（所以上下文绑定到对象 <code>config</code> 了），回调函数仍然保留着对 <code>config</code>的引用。只要存在引用，对象就不会被垃圾回收。因为没有被垃圾回收，<code>setInterval</code> 的回调每1000ms (1s)会被调用一次。</p></div></div><hr><h2 id="115-哪一个方法会返回-Hello-world-？"><a href="#115-哪一个方法会返回-Hello-world-？" class="headerlink" title="115. 哪一个方法会返回 &#39;Hello world!&#39; ？"></a>115. 哪一个方法会返回 <code>&#39;Hello world!&#39;</code> ？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;greeting&#x27;</span></span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">set</span>(myFunc, <span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&#x27;greeting&#x27;</span>)</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">myMap.<span class="title function_">get</span>(myFunc)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 2 and 3</li><li>D: All of them</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当通过 <code>set</code> 方法添加一个键值对，一个传递给 <code>set</code>方法的参数将会是键名，第二个参数将会是值。在这个case里，键名为 <em>函数</em> <code>() =&gt; &#39;greeting&#39;</code>，值为<code>&#39;Hello world&#39;</code>。 <code>myMap</code> 现在就是 <code>{ () =&gt; &#39;greeting&#39; =&gt; &#39;Hello world!&#39; }</code>。</p><p>1 是错的，因为键名不是 <code>&#39;greeting&#39;</code> 而是 <code>() =&gt; &#39;greeting&#39;</code>。<br>3 是错的，因为我们给<code>get</code> 方法传递了一个新的函数。对象受 <em>引用</em> 影响。函数也是对象，因此两个函数严格上并不等价，尽管他们相同：他们有两个不同的内存引用地址。</p></div></div><hr><h2 id="116-输出什么？"><a href="#116-输出什么？" class="headerlink" title="116. 输出什么？"></a>116. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAge</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAgeAndName</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; &#123;</span><br><span class="line">  x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">  x.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeAge</span>(person)</span><br><span class="line"><span class="title function_">changeAgeAndName</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;name: &quot;Sarah&quot;, age: 22&#125;</code></li><li>B: <code>&#123;name: &quot;Sarah&quot;, age: 23&#125;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code></li><li>D: <code>&#123;name: &quot;Lydia&quot;, age: 23&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>函数 <code>changeAge</code> 和函数 <code>changeAgeAndName</code> 有着不同的参数，定义一个 <em>新</em> 生成的对象 <code>{ ...person }</code>。这个对象有着所有 <code>person</code> 对象 中 k&#x2F;v 值的副本。</p><p>首项, 我们调用 <code>changeAge</code> 函数并传递 <code>person</code> 对象作为它的参数。这个函数对 <code>age</code> 属性进行加一操作。<code>person</code> 现在是 <code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p><p>然后，我们调用函数 <code>changeAgeAndName</code> ，然而我们没有传递参数。取而代之，<code>x</code> 的值等价 <em>new</em> 生成的对象: <code>{ ...person }</code>。因为它是一个新生成的对象，它并不会对对象 <code>person</code> 造成任何副作用。<code>person</code> 仍然等价于 <code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p></div></div><hr><h2 id="117-下面那个选项将会返回-6"><a href="#117-下面那个选项将会返回-6" class="headerlink" title="117. 下面那个选项将会返回 6?"></a>117. 下面那个选项将会返回 <code>6</code>?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumValues</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sumValues([...1, 2, 3])</code></li><li>B: <code>sumValues([...[1, 2, 3]])</code></li><li>C: <code>sumValues(...[1, 2, 3])</code></li><li>D: <code>sumValues([1, 2, 3])</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过展开操作符 <code>...</code>，我们可以 <em>暂开</em> 单个可迭代的元素。函数 <code>sumValues</code> function 接收三个参数： <code>x</code>, <code>y</code> 和 <code>z</code>。<code>...[1, 2, 3]</code> 的执行结果为 <code>1, 2, 3</code>，将会传递给函数 <code>sumValues</code>。</p></div></div><hr><h2 id="118-输出什么？"><a href="#118-输出什么？" class="headerlink" title="118. 输出什么？"></a>118. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&quot;🥳&quot;</span>, <span class="string">&quot;🤠&quot;</span>, <span class="string">&quot;🥰&quot;</span>, <span class="string">&quot;🤪&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list[(num += <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><ul><li>A: <code>🤠</code></li><li>B: <code>🥰</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过 <code>+=</code> 操作符，我们对值 <code>num</code> 进行加 <code>1</code> 操作。 <code>num</code> 有初始值 <code>1</code>，因此 <code>1 + 1</code> 的执行结果为 <code>2</code>。数组 <code>list</code> 的第二项为 🥰，<code>console.log(list[2])</code> 输出 🥰.</p></div></div><hr><h2 id="119-输出什么？"><a href="#119-输出什么？" class="headerlink" title="119. 输出什么？"></a>119. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&quot;Hallie&quot;</span>,</span><br><span class="line"><span class="attr">pet</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span>,</span><br><span class="line"><span class="attr">breed</span>: <span class="string">&quot;Dutch Tulip Hound&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">family</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getFullName</span>?.());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">getLastName</span>?.());</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>undefined</code></li><li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li><li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过 ES10 或 TS3.7+<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE">可选链操作符 <code>?.</code></a>，我们不再需要显式检测更深层的嵌套值是否有效。如果我们尝试获取 <code>undefined</code> 或 <code>null</code> 的值 (<em>nullish</em>)，表达将会短路并返回 <code>undefined</code>.</p><p><code>person.pet?.name</code>： <code>person</code> 有一个名为 <code>pet</code> 的属性： <code>person.pet</code> 不是 nullish。它有个名为 <code>name</code> 的属性，并返回字符串 <code>Mara</code>。<br><code>person.pet?.family?.name</code>： <code>person</code> 有一个名为 <code>pet</code> 的属性： <code>person.pet</code> 不是 nullish. <code>pet</code> <em>并没有</em> 一个名为 <code>family</code> 的属性, <code>person.pet.family</code> 是 nullish。表达式返回 <code>undefined</code>。<br><code>person.getFullName?.()</code>： <code>person</code> 有一个名为 <code>getFullName</code> 的属性： <code>person.getFullName()</code> 不是 nullish 并可以被调用，返回字符串 <code>Lydia Hallie</code>。<br><code>member.getLastName?.()</code>: <code>member</code> is not defined: <code>member.getLastName()</code> is nullish. The expression returns <code>undefined</code>.</p></div></div><hr><h2 id="120-输出什么？"><a href="#120-输出什么？" class="headerlink" title="120. 输出什么？"></a>120. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groceries = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;peanuts&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (groceries.<span class="title function_">indexOf</span>(<span class="string">&quot;banana&quot;</span>)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;We have to buy bananas!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`We don&#x27;t have to buy bananas!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: We have to buy bananas!</li><li>B: We don’t have to buy bananas</li><li>C: <code>undefined</code></li><li>D: <code>1</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们传递了一个状态 <code>groceries.indexOf(&quot;banana&quot;)</code> 给if条件语句。<code>groceries.indexOf(&quot;banana&quot;)</code> 返回 <code>0</code>， 一个 falsy 的值。因为if条件语句的状态为 falsy，<code>else</code> 块区内的代码执行，并且 <code>We don&#39;t have to buy bananas!</code> 被输出.</p></div></div><hr><h2 id="121-输出什么"><a href="#121-输出什么" class="headerlink" title="121. 输出什么?"></a>121. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">languages</span>: [],</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">language</span>(<span class="params">lang</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">languages</span>.<span class="title function_">push</span>(lang);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">language</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>function language(lang) &#123; this.languages.push(lang &#125;</code></li><li>B: <code>0</code></li><li>C: <code>[]</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>方法 <code>language</code> 是一个 <code>setter</code>。Setters 并不保存一个实际值，它们的使命在于 <em>修改</em> 属性。当调用方法 <code>setter</code>， 返回 <code>undefined</code>。</p></div></div><hr><h2 id="122-输出什么？"><a href="#122-输出什么？" class="headerlink" title="122. 输出什么？"></a>122. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;object&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;string&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code></li><li>B: <code>true</code> <code>false</code></li><li>C: <code>false</code> <code>false</code></li><li>D: <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>typeof name</code> 返回 <code>&quot;string&quot;</code>。字符串 <code>&quot;string&quot;</code> 是一个 truthy 的值，因此 <code>!typeof name</code> 返回一个布尔值 <code>false</code>。 <code>false === &quot;object&quot;</code> 和 <code>false === &quot;string&quot;</code> 都返回 <code>false</code>。</p><p>（如果我们想检测一个值的类型，我们应该用 <code>!==</code> 而不是 <code>!typeof</code>）</p></div></div><hr><h2 id="123-输出什么"><a href="#123-输出什么" class="headerlink" title="123. 输出什么?"></a>123. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>4</code> <code>5</code> <code>6</code></li><li>B: <code>6</code> <code>5</code> <code>4</code></li><li>C: <code>4</code> <code>function</code> <code>function</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>函数 <code>add</code> 是一个返回 返回箭头函数的箭头函数 的箭头函数（still with me?）。第一个函数接收一个值为 <code>4</code> 的参数 <code>x</code>。我们调用第二个函数，它接收一个值为 <code>5</code> 的参数 <code>y</code>。然后我们调用第三个函数，它接收一个值为 <code>6</code> 的参数 <code>z</code>。当我们尝试在最后一个箭头函数中获取 <code>x</code>, <code>y</code> 和 <code>z</code> 的值，JS 引擎根据作用域链去找 <code>x</code> 和 <code>y</code> 的值。得到 <code>4</code> <code>5</code> <code>6</code>.</p></div></div><hr><h2 id="124-输出什么？"><a href="#124-输出什么？" class="headerlink" title="124. 输出什么？"></a>124. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">range</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> gen) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise &#123;1&#125;</code> <code>Promise &#123;2&#125;</code> <code>Promise &#123;3&#125;</code></li><li>B: <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>C: <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们给 函数range 传递： <code>Promise{1}</code>, <code>Promise{2}</code>, <code>Promise{3}</code>，Generator 函数 <code>range</code> 返回一个全是 async object promise 数组。我们将 async object 赋值给变量 <code>gen</code>，之后我们使用<code>for await ... of</code> 进行循环遍历。我们将返回的 Promise 实例赋值给 <code>item</code>： 第一个返回 <code>Promise{1}</code>， 第二个返回 <code>Promise{2}</code>，之后是 <code>Promise{3}</code>。因为我们正 <em>awaiting</em> <code>item</code> 的值，resolved 状态的 promsie，promise数组的resolved <em>值</em> 以此为： <code>1</code>，<code>2</code>，<code>3</code>.</p></div></div><hr><h2 id="125-输出什么？"><a href="#125-输出什么？" class="headerlink" title="125. 输出什么？"></a>125. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params">&#123; x, y, z &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> <code>3</code></li><li>B: <code>&#123;1: 1&#125;</code> <code>&#123;2: 2&#125;</code> <code>&#123;3: 3&#125;</code></li><li>C: <code>&#123; 1: undefined &#125;</code> <code>undefined</code> <code>undefined</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>myFunc</code> 期望接收一个包含 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象作为它的参数。因为我们仅仅传递三个单独的数字值 (1, 2, 3) 而不是一个含有 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象 ({x: 1, y: 2, z: 3})， <code>x</code>, <code>y</code> 和 <code>z</code> 有着各自的默认值 <code>undefined</code>.</p></div></div><hr><h2 id="126-输出什么？"><a href="#126-输出什么？" class="headerlink" title="126. 输出什么？"></a>126. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFine</span>(<span class="params">speed, amount</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formattedSpeed = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;unit&#x27;</span>, <span class="attr">unit</span>: <span class="string">&#x27;mile-per-hour&#x27;</span> &#125;</span><br><span class="line">  &#125;).<span class="title function_">format</span>(speed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formattedAmount = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;USD&#x27;</span> &#125;</span><br><span class="line">  &#125;).<span class="title function_">format</span>(amount)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`The driver drove <span class="subst">$&#123;formattedSpeed&#125;</span> and has to pay <span class="subst">$&#123;formattedAmount&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFine</span>(<span class="number">130</span>, <span class="number">300</span>))</span><br></pre></td></tr></table></figure><ul><li>A: The driver drove 130 and has to pay 300</li><li>B: The driver drove 130 mph and has to pay $300.00</li><li>C: The driver drove undefined and has to pay undefined</li><li>D: The driver drove 130.00 and has to pay 300.00</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过方法 <code>Intl.NumberFormat</code>，我们可以格式化任意区域的数字值。我们对数字值 <code>130</code> 进行 <code>mile-per-hour</code> 作为 <code>unit</code> 的 <code>en-US</code> 区域 格式化，结果为 <code>130 mph</code>。对数字值 <code>300</code> 进行 <code>USD</code> 作为 <code>currentcy</code> 的 <code>en-US</code> 区域格式化，结果为 <code>$300.00</code>.</p></div></div><hr><h2 id="127-输出什么？"><a href="#127-输出什么？" class="headerlink" title="127. 输出什么？"></a>127. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spookyItems = [<span class="string">&quot;👻&quot;</span>, <span class="string">&quot;🎃&quot;</span>, <span class="string">&quot;🕸&quot;</span>];</span><br><span class="line">(&#123; <span class="attr">item</span>: spookyItems[<span class="number">3</span>] &#125; = &#123; <span class="attr">item</span>: <span class="string">&quot;💀&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spookyItems);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;]</code></li><li>B: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code></li><li>C: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &#123; item: &quot;💀&quot; &#125;]</code></li><li>D: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过解构对象们，我们可以从右手边的对象中拆出值，并且将拆出的值分配给左手边对象同名的属性。在这种情况下，我们将值 “💀” 分配给 <code>spookyItems[3]</code>。相当于我们正在篡改数组 <code>spookyItems</code>，我们给它添加了值 “💀”。当输出 <code>spookyItems</code> 时，结果为 <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code>。</p></div></div><hr><h2 id="128-输出什么？"><a href="#128-输出什么？" class="headerlink" title="128. 输出什么？"></a>128. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(age));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(age));</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li><li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过方法 <code>Number.isNaN</code>，你可以检测你传递的值是否为 <em>数字值</em> 并且是否等价于 <code>NaN</code>。<code>name</code> 不是一个数字值，因此 <code>Number.isNaN(name)</code> 返回 <code>false</code>。<code>age</code> 是一个数字值，但它不等价于 <code>NaN</code>，因此 <code>Number.isNaN(age)</code> 返回 <code>false</code>.</p><p>通过方法 <code>isNaN</code>， 你可以检测你传递的值是否一个 number。<code>name</code> 不是一个 <code>number</code>，因此 <code>isNaN(name)</code> 返回 <code>true</code>. <code>age</code> 是一个 <code>number</code> 因此 <code>isNaN(age)</code> 返回 <code>false</code>.</p></div></div><hr><h2 id="129-输出什么？"><a href="#129-输出什么？" class="headerlink" title="129. 输出什么？"></a>129. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomValue = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> randomValue);</span><br><span class="line"><span class="keyword">const</span> randomValue = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>通过 <code>const</code> 关键字声明的变量在被初始化之前不可被引用：这被称之为 _暂时性死区_。在函数 <code>getInfo</code> 中, 变量 <code>randomValue</code> 声明在<code>getInfo</code> 的作用域的此法环境中。在想要对 <code>typeof randomValue</code> 进行log之前，变量 <code>randomValue</code> 仍未被初始化： 错误<code>ReferenceError</code> 被抛出! JS引擎并不会根据作用域链网上寻找该变量，因为我们已经在 <code>getInfo</code> 函数中声明了 <code>randomValue</code> 变量。</p></div></div><hr><h2 id="130-输出什么？"><a href="#130-输出什么？" class="headerlink" title="130. 输出什么？"></a>130. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Woah some cool data&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> myPromise);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Oops didn&#x27;t work`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh finally!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Woah some cool data</code></li><li>B: <code>Oh finally!</code></li><li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li><li>D: <code>Oops didn&#39;t work</code> <code>Oh finally!</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在 <code>try</code> 块区，我们打印 <code>myPromise</code> 变量的 awaited 值： <code>&quot;Woah some cool data&quot;</code>。因为<code>try</code> 块区没有错误抛出，<code>catch</code> 块区的代码并不执行。<code>finally</code> 块区的代码 <em>总是</em> 执行，<code>&quot;Oh finally!&quot;</code> 被输出。</p></div></div><hr><h2 id="131-输出什么？"><a href="#131-输出什么？" class="headerlink" title="131. 输出什么？"></a>131. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🥑&quot;</span>, [<span class="string">&quot;✨&quot;</span>, <span class="string">&quot;✨&quot;</span>, [<span class="string">&quot;🍕&quot;</span>, <span class="string">&quot;🍕&quot;</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emojis.<span class="title function_">flat</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]]</code></li><li>B: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>C: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>D: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过方法 <code>flat</code>， 我们可以创建一个新的, 已被扁平化的数组。被扁平化的深度取决于我们传递的值。在这个case里，我们传递了值 <code>1</code> (并不必要，这是默认值)，相当于只有第一层的数组才会被连接。即这个 case 里的 <code>[&#39;🥑&#39;]</code> and <code>[&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>。连接这两个数组得到结果 <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>.</p></div></div><hr><h2 id="132-输出什么？"><a href="#132-输出什么？" class="headerlink" title="132. 输出什么？"></a><a name=20191224></a>132. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterOne = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterTwo = counterOne;</span><br><span class="line">counterTwo.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterOne.<span class="property">count</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>2</code></li><li>D: <code>3</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>counterOne</code> 是类 <code>Counter</code> 的一个实例。类 Counter 包含一个<code>count</code> 属性在它的构造函数里， 和一个 <code>increment</code> 方法。首先，我们通过 <code>counterOne.increment()</code> 调用方法 <code>increment</code> 两次。现在, <code>counterOne.count</code> 为 <code>2</code>.</p><img src="https://i.imgur.com/KxLlTm9.png" width="400"><p>然后，我们创建一个新的变量 <code>counterTwo</code> 并将 <code>counterOne</code> 的引用地址赋值给它。因为对象受引用地址的影响，我们刚刚创建了一个新的对象，其引用地址和 <code>counterOne</code> 的等价。因此它们指向同一块内存地址，任何对其的副作用都会影响 <code>counterTwo</code>。现在 <code>counterTwo.count</code> 为 <code>2</code>。</p><p>我们调用 <code>counterTwo.increment()</code> 将 <code>count</code> 的值设为 <code>3</code>。然后，我们打印 <code>counterOne</code> 里的count，结果为 <code>3</code>。</p><img src="https://i.imgur.com/BNBHXmc.png" width="400"></div></div><hr><h2 id="133-输出什么？"><a href="#133-输出什么？" class="headerlink" title="133. 输出什么？"></a>133. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Promise!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">funcTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> myPromise;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> res);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">funcOne</span>();</span><br><span class="line"><span class="title function_">funcTwo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise! Last line! Promise! Last line! Last line! Promise!</code></li><li>B: <code>Last line! Timeout! Promise! Last line! Timeout! Promise!</code></li><li>C: <code>Promise! Last line! Last line! Promise! Timeout! Timeout!</code></li><li>D: <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>首先，我们调用 <code>funcOne</code>。在函数 <code>funcOne</code> 的第一行，我们调用<code>myPromise</code> promise _异步操作_。当JS引擎在忙于执行 promise，它继续执行函数 <code>funcOne</code>。下一行 <em>异步操作</em> <code>setTimeout</code>，其回调函数被 Web API 调用。 (详情请参考我关于event loop的文章.)</p><p>promise 和 timeout 都是异步操作，函数继续执行当JS引擎忙于执行promise 和 处理 <code>setTimeout</code> 的回调。相当于 <code>Last line!</code> 首先被输出， 因为它不是异步操作。执行完 <code>funcOne</code> 的最后一行，promise 状态转变为 resolved，<code>Promise!</code> 被打印。然而，因为我们调用了 <code>funcTwo()</code>, 调用栈不为空，<code>setTimeout</code> 的回调仍不能入栈。</p><p>我们现在处于 <code>funcTwo</code>，先 <em>awaiting</em> myPromise。通过 <code>await</code> 关键字， 我们暂停了函数的执行直到 promise 状态变为 resolved (或 rejected)。然后，我们输出 <code>res</code> 的 awaited 值（因为 promise 本身返回一个 promise）。 接着输出 <code>Promise!</code>。</p><p>下一行就是 <em>异步操作</em> <code>setTimeout</code>，其回调函数被 Web API 调用。</p><p>我们执行到函数 <code>funcTwo</code> 的最后一行，输出 <code>Last line!</code>。现在，因为 <code>funcTwo</code> 出栈，调用栈为空。在事件队列中等待的回调函数（<code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcOne</code>, and <code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcTwo</code>）以此入栈。第一个回调输出 <code>Timeout!</code>，并出栈。然后，第二个回调输出 <code>Timeout!</code>，并出栈。得到结果 <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></p></div></div><hr><h2 id="134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？"><a href="#134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？" class="headerlink" title="134. 我们怎样才能在 index.js 中调用 sum.js? 中的 sum？"></a>134. 我们怎样才能在 <code>index.js</code> 中调用 <code>sum.js?</code> 中的 <code>sum</code>？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> sum <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sum(4)</code></li><li>B: <code>sum.sum(4)</code></li><li>C: <code>sum.default(4)</code></li><li>D: 默认导出不用 <code>*</code> 来导入，只能具名导出</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用符号 <code>*</code>，我们引入文件中的所有值，包括默认和具名。如果我们有以下文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&quot;./info&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><p>将会输出以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;I love JavaScript&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 <code>sum</code> 为例，相当于以下形式引入值 <code>sum</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">default</span>: <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>) &#123; <span class="keyword">return</span> x + x &#125; &#125;</span><br></pre></td></tr></table></figure><p>我们可以通过调用 <code>sum.default</code> 来调用该函数</p></div></div><hr><h2 id="135-输出什么？"><a href="#135-输出什么？" class="headerlink" title="135. 输出什么？"></a>135. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line"><span class="attr">set</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Added a new property!&quot;</span>),</span><br><span class="line"><span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Accessed a property!&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">person.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>Added a new property!</code></li><li>B: <code>Accessed a property!</code></li><li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li><li>D: 没有任何输出</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用 Proxy 对象，我们可以给一个对象添加自定义行为。在这个 case，我们传递一个包含以下属性的对象 <code>handler</code> : <code>set</code> and <code>get</code>。每当我门 <em>设置</em> 属性值时 <code>set</code> 被调用，每当我们 <em>获取</em> 时 <code>get</code> 被调用。</p><p>第一个参数是一个空对象 <code>{}</code>，作为 <code>person</code> 的值。对于这个对象，自定义行为被定义在对象 <code>handler</code>。如果我们向对象 <code>person</code> 添加属性，<code>set</code> 将被调用。如果我们获取 <code>person</code> 的属性, <code>get</code> 将被调用。</p><p>首先，我们向 proxy 对象(<code>person.name = &quot;Lydia&quot;</code>)添加一个属性 <code>name</code>。<code>set</code> 被调用并输出 <code>&quot;Added a new property!&quot;</code>。</p><p>然后，我们获取 proxy 对象的一个属性，对象 handler 的属性 <code>get</code> 被调用。输出 <code>&quot;Accessed a property!&quot;</code>。</p></div></div><hr><h2 id="136-以下哪一项会对对象-person-有副作用？"><a href="#136-以下哪一项会对对象-person-有副作用？" class="headerlink" title="136. 以下哪一项会对对象 person 有副作用？"></a>136. 以下哪一项会对对象 <code>person</code> 有副作用？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>person.age = 21</code></li><li>C: <code>delete person.name</code></li><li>D: <code>Object.assign(person, &#123; age: 21 &#125;)</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用 <code>Object.seal</code> 我们可以防止新属性 _被添加_，或者存在属性 <em>被移除</em>.</p><p>然而，你仍然可以对存在属性进行更改。</p></div></div><hr><h2 id="137-以下哪一项会对对象-person-有副作用？"><a href="#137-以下哪一项会对对象-person-有副作用？" class="headerlink" title="137. 以下哪一项会对对象 person 有副作用？"></a>137. 以下哪一项会对对象 <code>person</code> 有副作用？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line"><span class="attr">street</span>: <span class="string">&quot;100 Main St&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>delete person.address</code></li><li>C: <code>person.address.street = &quot;101 Main St&quot;</code></li><li>D: <code>person.pet = &#123; name: &quot;Mara&quot; &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用方法 <code>Object.freeze</code> 对一个对象进行 _冻结_。不能对属性进行添加，修改，删除。</p><p>然而，它仅 对对象进行 <em>浅</em> 冻结，意味着只有 对象中的 <em>直接</em> 属性被冻结。如果属性是另一个 object，像案例中的 <code>address</code>，<code>address</code> 中的属性没有被冻结，仍然可以被修改。</p></div></div><hr><h2 id="138-输出什么？"><a href="#138-输出什么？" class="headerlink" title="138. 输出什么？"></a>138. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; x + x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">num = <span class="number">2</span>, value = add(num)</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li><li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li><li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li><li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>首先我们不传递任何参数调用 <code>myFunc()</code>。因为我们没有传递参数，<code>num</code> 和 <code>value</code> 获取它们各自的默认值：num 为 <code>2</code>, 而 <code>value</code> 为函数 <code>add</code> 的返回值。对于函数 <code>add</code>，我们传递值为2的 <code>num</code> 作为参数。函数 <code>add</code> 返回 <code>4</code> 作为 <code>value</code> 的值。</p><p>然后，我们调用 <code>myFunc(3)</code> 并传递值 <code>3</code> 参数 <code>num</code> 的值。我们没有给 <code>value</code> 传递值。因为我们没有给参数 <code>value</code> 传递值，它获取默认值：函数 <code>add</code> 的返回值。对于函数 <code>add</code>，我们传递值为3的 <code>num</code>给它。函数 <code>add</code> 返回 <code>6</code> 作为 <code>value</code> 的值。</p></div></div><hr><h2 id="139-输出什么？"><a href="#139-输出什么？" class="headerlink" title="139. 输出什么？"></a>139. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  #number = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#number++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>()</span><br><span class="line">counter.<span class="title function_">increment</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.#number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在 ES2020 中，通过 <code>#</code> 我们可以给 class 添加私有变量。在 class 的外部我们无法获取该值。当我们尝试输出 <code>counter.#number</code>，语法错误被抛出：我们无法在 class <code>Counter</code> 外部获取它!</p></div></div><hr><h2 id="140-选择哪一个？"><a href="#140-选择哪一个？" class="headerlink" title="140. 选择哪一个？"></a>140. 选择哪一个？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 1&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Paul&quot;</span>, <span class="string">&quot;Lisa&quot;</span>] &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 2&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Laura&quot;</span>, <span class="string">&quot;Tim&quot;</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getMembers</span>(<span class="params">members</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; members.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> members[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getTeams</span>(<span class="params">teams</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; teams.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// ✨ SOMETHING IS MISSING HERE ✨</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">getTeams</span>(teams);</span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Paul&quot;, done: false &#125;</span></span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Lisa&quot;, done: false &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>yield getMembers(teams[i].members)</code></li><li>B: <code>yield* getMembers(teams[i].members)</code></li><li>C: <code>return getMembers(teams[i].members)</code></li><li>D: <code>return yield getMembers(teams[i].members)</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>为了遍历 <code>teams</code> 数组中对象的属性 <code>members</code> 中的每一项，我们需要将 <code>teams[i].members</code> 传递给 Generator 函数 <code>getMembers</code>。Generator 函数返回一个 generator 对象。为了遍历这个 generator 对象中的每一项，我们需要使用 <code>yield*</code>.</p><p>如果我们没有写 <code>yield</code>，<code>return yield</code> 或者 <code>return</code>，整个 Generator 函数不会第一时间 return 当我们调用 <code>next</code> 方法.</p></div></div><hr><h2 id="141-输出什么？"><a href="#141-输出什么？" class="headerlink" title="141. 输出什么？"></a>141. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">hobbies</span>: [<span class="string">&quot;coding&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addHobby</span>(<span class="params">hobby, hobbies = person.hobbies</span>) &#123;</span><br><span class="line">hobbies.<span class="title function_">push</span>(hobby);</span><br><span class="line"><span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;running&quot;</span>, []);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;dancing&quot;</span>);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;baking&quot;</span>, person.<span class="property">hobbies</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hobbies</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;coding&quot;]</code></li><li>B: <code>[&quot;coding&quot;, &quot;dancing&quot;]</code></li><li>C: <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li><li>D: <code>[&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>函数 <code>addHobby</code> 接受两个参数，<code>hobby</code> 和有着对象 <code>person</code> 中数组 <code>hobbies</code> 默认值的 <code>hobbies</code>。</p><p>首相，我们调用函数 <code>addHobby</code>，并给 <code>hobby</code> 传递 <code>&quot;running&quot;</code> 以及给 <code>hobbies</code> 传递一个空数组。因为我们给 <code>hobbies</code> 传递了空数组，<code>&quot;running&quot;</code> 被添加到这个空数组。</p><p>然后，我们调用函数 <code>addHobby</code>，并给 <code>hobby</code> 传递 <code>&quot;dancing&quot;</code>。我们不向 <code>hobbies</code> 传递值，因此它获取其默认值 —— 对象 <code>person</code> 的 属性 <code>hobbies</code>。我们向数组 <code>person.hobbies</code> push <code>dancing</code>。</p><p>最后，我们调用函数 <code>addHobby</code>，并向 <code>hobby</code> 传递 值 <code>&quot;bdaking&quot;</code>，并且向 <code>hobbies</code> 传递 <code>person.hobbies</code>。我们向数组 <code>person.hobbies</code> push <code>dancing</code>。</p><p>pushing <code>dancing</code> 和 <code>baking</code> 之后，<code>person.hobbies</code> 的值为 <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></p></div></div><hr><h2 id="142-输出什么？"><a href="#142-输出什么？" class="headerlink" title="142. 输出什么？"></a>142. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m a bird. 🦢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flamingo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m pink. 🌸&quot;</span>);</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Flamingo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>I&#39;m pink. 🌸</code></li><li>B: <code>I&#39;m pink. 🌸</code> <code>I&#39;m a bird. 🦢</code></li><li>C: <code>I&#39;m a bird. 🦢</code> <code>I&#39;m pink. 🌸</code></li><li>D: Nothing, we didn’t call any method</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们创建了类 <code>Flamingo</code> 的实例 <code>pet</code>。当我们实例化这个实例，<code>Flamingo</code> 中的 <code>constructor</code> 被调用。首相，输出 <code>&quot;I&#39;m pink. 🌸&quot;</code>, 之后我们调用<code>super()</code>。<code>super()</code> 调用父类的构造函数，<code>Bird</code>。<code>Bird</code> 的构造函数被调用，并输出 <code>&quot;I&#39;m a bird. 🦢&quot;</code>。</p></div></div><hr><h2 id="143-哪一个选项会导致报错？"><a href="#143-哪一个选项会导致报错？" class="headerlink" title="143. 哪一个选项会导致报错？"></a>143. 哪一个选项会导致报错？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🎄&quot;</span>, <span class="string">&quot;🎅🏼&quot;</span>, <span class="string">&quot;🎁&quot;</span>, <span class="string">&quot;⭐&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span> emojis.<span class="title function_">push</span>(<span class="string">&quot;🦌&quot;</span>);</span><br><span class="line"><span class="comment">/* 2 */</span> emojis.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">/* 3 */</span> emojis = [...emojis, <span class="string">&quot;🥂&quot;</span>];</span><br><span class="line"><span class="comment">/* 4 */</span> emojis.<span class="property">length</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 1 and 2</li><li>C: 3 and 4</li><li>D: 3</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>const</code> 关键字意味着我们不能 <em>重定义</em> 变量中的值，它 _仅可读_。而然，值本身不可修改。数组 <code>emojis</code> 中的值可被修改，如 push 新的值, 拼接，又或者将数组的长度设置为0。</p></div></div><hr><h2 id="144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-Lydia-Hallie-21-的输出？"><a href="#144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-Lydia-Hallie-21-的输出？" class="headerlink" title="144. 我们需要向对象 person 添加什么，以致执行 [...person] 时获得形如 [&quot;Lydia Hallie&quot;, 21] 的输出？"></a>144. 我们需要向对象 <code>person</code> 添加什么，以致执行 <code>[...person]</code> 时获得形如 <code>[&quot;Lydia Hallie&quot;, 21]</code> 的输出？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...person] <span class="comment">// [&quot;Lydia Hallie&quot;, 21]</span></span><br></pre></td></tr></table></figure><ul><li>A: 不需要，对象默认就是可迭代的</li><li>B: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* this[x] &#125;</code></li><li>C: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* Object.values(this) &#125;</code></li><li>D: <code>*[Symbol.iterator]() &#123; for (let x in this) yield this &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>对象默认并不是可迭代的。如果迭代规则被定义，则一个对象是可迭代的（An iterable is an iterable if the iterator protocol is present）。我们可以通过添加迭代器symbol <code>[Symbol.iterator]</code> 来定义迭代规则，其返回一个 generator 对象，比如说构建一个 generator 函数 <code>*[Symbol.iterator]() {}</code>。如果我们想要返回数组 <code>[&quot;Lydia Hallie&quot;, 21]</code>: <code>yield* Object.values(this)</code>，这个 generator 函数一定要 yield 对象 <code>person</code> 的<code>Object.values</code>。</p></div></div><hr><h2 id="145-输出什么？"><a href="#145-输出什么？" class="headerlink" title="145. 输出什么？"></a>145. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num) count += <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4<div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在 <code>forEach</code> 循环内部的 <code>if</code> 会判断 <code>num</code> 的值是truthy或者是falsy。因为 <code>nums</code> 数组的第一个数字是 <code>0</code>，一个falsy值， <code>if</code> 语句代码块不会被执行。<code>count</code> 仅仅在 <code>nums</code> 数组的其他3个数字 <code>1</code>，<code>2</code>，<code>3</code> 时加1。因为 <code>count</code> 执行了3次加 <code>1</code> 运算，所以 <code>count</code> 的值为 <code>3</code>。</p></div></div></li></ul><hr><h2 id="146-输出是什么？"><a href="#146-输出是什么？" class="headerlink" title="146. 输出是什么？"></a>146. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFruit</span>(<span class="params">fruits</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits?.[<span class="number">1</span>]?.[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>], [<span class="string">&#x27;🍍&#x27;</span>]])</span><br><span class="line"><span class="title function_">getFruit</span>()</span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍍&#x27;</span>], [<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>]])</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code>, <code>undefined</code>, 🍌</li><li>B: <code>[]</code>, <code>null</code>, 🍌</li><li>C: <code>[]</code>, <code>[]</code>, 🍌</li><li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>?</code> 允许我们去选择性地访问对象内部更深层的嵌套属性。 我们尝试打印 <code>fruits</code> 数组索引值为 <code>1</code> 的子数组内部的索引值为 <code>1</code> 的元素。 如果在 <code>fruits</code> 数组索引值 为 <code>1</code> 的位置不存在元素，会直接返回 <code>undefined</code>。 如果 <code>fruits</code> 数组在索引值为 <code>1</code> 的位置存在元素，但是子数组在索引值为 <code>1</code> 的位置不存在元素，也会返回 <code>undefined</code>。</p><p>首先，我们尝试打印 <code>[[&#39;🍊&#39;, &#39;🍌&#39;], [&#39;🍍&#39;]]</code> 的子数组 <code>[&#39;🍍&#39;]</code> 的第2个元素。这个子数组只包含一个元素，也就意味着在索引值为 <code>1</code> 的位置不存在元素，所以返回的是 <code>undefined</code> 。</p><p>其次，我们在没有传入任何参数调用了 <code>getFruits</code> 函数，也就意味着形参 <code>fruits</code> 的默认值为<code>undefined</code>。因为我们选择性地链接了 <code>fruits</code> 在索引值为 <code>1</code> 的元素，因为在索引值为 <code>1</code> 的位置不存在元素，因此返回的是 <code>undefined</code> 。</p><p>最后，我们尝试打印 <code>[&#39;🍍&#39;], [&#39;🍊&#39;, &#39;🍌&#39;]</code> 的子数组 <code>[&#39;🍊&#39;, &#39;🍌&#39;]</code> 的第2个元素。子数组索引值为 <code>1</code>的位置为 <code>🍌</code> ，因此它被打印出了。</p></div></div><hr><h2 id="147-输出什么？"><a href="#147-输出什么？" class="headerlink" title="147. 输出什么？"></a>147. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calc</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Calc</span>().<span class="title function_">increase</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="property">count</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们设置 <code>calc</code> 变量为 <code>Calc</code> 类的一个新实例。 然后，我们初始化一个 <code>Calc</code> 的新实例，而且调用了这个实例的 <code>increase</code> 方法。因为count属性是在 <code>Calc</code> class的constructor内部的，所以count属性不会在 <code>Calc</code> 的原型链上共享出去。这就意味着calc实例的count值不会被更新，count仍然是 <code>0</code>。</p></div></div><hr><h2 id="148-输出什么"><a href="#148-输出什么" class="headerlink" title="148. 输出什么?"></a>148. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;e@mail.com&quot;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateUser</span> = (<span class="params">&#123; email, password &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (email) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, &#123; email &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (password) &#123;</span><br><span class="line">user.<span class="property">password</span> = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updatedUser = <span class="title function_">updateUser</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;new@email.com&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(updatedUser === user)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code></li><li>B: <code>true</code></li><li>C: <code>TypeError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p> <code>updateUser</code> 函数更新user的 <code>email</code> 和 <code>password</code> 属性的值， 如果它们的值传入函数， 函数返回的就是 <code>user</code> 对象。 <code>updateUser</code> 函数的返回值是 <code>user</code> 对象，意味着updatedUser的值与 <code>user</code> 指向的是同一个 <code>user</code> 对象。<code>updatedUser === user</code> 为 <code>true</code>.</p></div></div><hr><h2 id="149-输出什么"><a href="#149-输出什么" class="headerlink" title="149. 输出什么?"></a>149. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fruit.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.<span class="title function_">unshift</span>(<span class="string">&#x27;🍇&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruit)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>B: <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>C: <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>D: <code>[&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>首先，我们在fruit数组上调用 <code>slice</code> 方法。 slice方法不会修改原始数组，但是会返回从数组切片下来的值：香蕉emoji。<br>其次，我们在fruit数组上调用 <code>splice</code> 方法。 splice方法会修改原始数组，也就意味着fruit数组此时为 <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code>。<br>最后，我们在fruit数组上调用 <code>unshift</code> 方法，通过添加一个值的方式改变了原始数组，添加的是’🍇’，它成为了数组的第一个元素。现在fruit数组的组成为 <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code>。</p></div></div><hr><h2 id="150-输出什么"><a href="#150-输出什么" class="headerlink" title="150. 输出什么?"></a>150. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐶&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> cat = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐈&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">animals[dog] = &#123; ...dog, <span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span> &#125;</span><br><span class="line">animals[cat] = &#123; ...cat, <span class="attr">name</span>: <span class="string">&quot;Sara&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals[dog])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; emoji: &quot;🐶&quot;, name: &quot;Mara&quot; &#125;</code></li><li>B: <code>&#123; emoji: &quot;🐈&quot;, name: &quot;Sara&quot; &#125;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象的键会被转换为字符串。</p><p>因为  <code>dog</code> 的值是一个对象，   <code>animals[dog]</code> 实际上意味着我们创建了一个叫做 <code>&quot;object Object&quot;</code> 的属性来代表新的对象。  <code>animals[&quot;object Object&quot;]</code> 现在等于 <code>{ emoji: &quot;🐶&quot;, name: &quot;Mara&quot;}</code>。</p><p><code>cat</code> 也是一个对象，<code>animals[cat]</code> 实际上意味着我们在用新的cat的属性覆盖  <code>animals[``&quot;``object Object``&quot;``]</code> 的值。</p><p>打印  <code>animals[dog]</code>，实际上是<code>animals[&quot;object Object&quot;]</code>，这是因为转化<code>dog</code>对象为一个字符串结果 <code>&quot;object Object&quot;</code> ，所以返回 <code>{ emoji: &quot;🐈&quot;, name: &quot;Sara&quot; }</code>。</p></div></div><hr><h2 id="151-输出什么"><a href="#151-输出什么" class="headerlink" title="151. 输出什么?"></a>151. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span>,</span><br><span class="line"><span class="attr">updateEmail</span>: <span class="function"><span class="params">email</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">email</span> = email</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">updateEmail</span>(<span class="string">&quot;new@email.com&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">email</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>my@email.com</code></li><li>B: <code>new@email.com</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>updateEmail</code> 函数是一个箭头函数，它没有和 <code>user</code> 对象绑定。这就意味着 <code>this</code> 关键字不会引用到 <code>user</code> 对象，但是会引用到全局对象。 <code>user</code> 对象内部的 <code>email</code> 的值不会更新。当打印 <code>user.email</code> 的时候， 原始值 <code>my@email.com</code> 被返回。</p></div></div><hr><h2 id="152-输出什么"><a href="#152-输出什么" class="headerlink" title="152. 输出什么?"></a>152. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Second&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise4 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Fourth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runPromises</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])</span><br><span class="line"><span class="keyword">const</span> res2  = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise3, promise4])</span><br><span class="line"><span class="keyword">return</span> [res1, res2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runPromises</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]]</code></li><li>B: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]]</code></li><li>C: <code>[[&#39;First&#39;, &#39;Second&#39;]]</code></li><li>D: <code>&#39;Third&#39;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p> <code>Promise.all</code> 方法可以并行式运行promise。如果其中一个promise失败了，<code>Promise.all</code> 方法会带上被reject的promise的值_rejects_。在这个例子中， <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 值reject。我们在调用 <code>runPromises</code> 时在 <code>runPromises</code> 函数内部的 <code>catch</code> 方法去捕获任意error从而捕获到被reject的值。因为 <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 被reject，所以只有 <code>&quot;Third&quot;</code> 打印。</p></div></div><hr><h2 id="153-哪个作为method的值可以打印-name-Lydia-age-22"><a href="#153-哪个作为method的值可以打印-name-Lydia-age-22" class="headerlink" title="153. 哪个作为method的值可以打印{ name: &quot;Lydia&quot;, age: 22 }?"></a>153. 哪个作为<code>method</code>的值可以打印<code>&#123; name: &quot;Lydia&quot;, age: 22 &#125;</code>?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">&quot;Lydia&quot;</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> method = <span class="comment">/* ?? */</span></span><br><span class="line"><span class="title class_">Object</span>[method](keys.<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [keys[i], values[i]]</span><br><span class="line">&#125;)) <span class="comment">// &#123; name: &quot;Lydia&quot;, age: 22 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>entries</code></li><li>B: <code>values</code></li><li>C: <code>fromEntries</code></li><li>D: <code>forEach</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p> <code>fromEntries</code> 方法可以将二维数组转换为对象。在每个子数组的第一个元素是key，在每个子数组的第二个元素是value。在这个例子中，我们映射了 <code>keys</code> 数组，它返回了一个数组，数组的第一个元素为keys数组当前索引的值，第二个元素为values数组当前索引的值。</p><p>这样就创建了一个包含正确keys和values的子数组的数组，因此结果为<code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p></div></div><hr><h2 id="154-输出什么"><a href="#154-输出什么" class="headerlink" title="154. 输出什么?"></a>154. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createMember</span> = (<span class="params">&#123; email, address = &#123;&#125;&#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> validEmail = <span class="regexp">/.+\@.+\..+/</span>.<span class="title function_">test</span>(email)</span><br><span class="line"><span class="keyword">if</span> (!validEmail) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Valid email pls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">email,</span><br><span class="line"><span class="attr">address</span>: address ? address : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="title function_">createMember</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; email: &quot;my@email.com&quot;, address: null &#125;</code></li><li>B: <code>&#123; email: &quot;my@email.com&quot; &#125;</code></li><li>C: <code>&#123; email: &quot;my@email.com&quot;, address: &#123;&#125; &#125;</code></li><li>D: <code>&#123; email: &quot;my@email.com&quot;, address: undefined &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p> <code>address</code> 的默认值是一个空对象 <code>{}</code>。当我们设置 <code>member</code> 变量为 <code>createMember</code> 函数返回的对象，我们没有为address参数传值，意味着address的值为默认的空对象 <code>{}</code>。一个空对象是一个truthy值，意味着 <code>address ? address : null</code> 条件会返回 <code>true</code>。address的值为空对象 <code>{}</code>。</p></div></div><hr><h2 id="155-输出什么"><a href="#155-输出什么" class="headerlink" title="155. 输出什么?"></a>155. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomValue = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line">randomValue = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">typeof</span> randomValue === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It&#x27;s not a string!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Yay it&#x27;s a string!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>It&#39;s not a string!</code></li><li>B: <code>Yay it&#39;s a string!</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p> <code>if</code> 语句的条件判断 <code>!typeof randomValue</code> 的值是否等于 <code>&quot;string&quot;</code>。 <code>!</code> 操作符将这个值转化为一个布尔值。如果值是truthy的话，返回值会是 <code>false</code>，如果值是falsy，返回值会是 <code>true</code>。在这里， <code>typeof randomValue</code> 的返回值是一个truthy值 <code>&quot;number&quot;</code>，意味着 <code>!typeof randomValue</code> 的值是一个布尔值 <code>false</code>。</p><p> <code>!typeof randomValue === &quot;string&quot;</code> 总是返回false，因为我们实际上是在执行 <code>false === &quot;string&quot;</code>。因为条件返回的是 <code>false</code>，所以 <code>else</code> 语句中的代码块会被运行，因此打印 <code>Yay it&#39;s a string!</code> 。</p></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop</title>
      <link href="/posts/2a798ab5.html"/>
      <url>/posts/2a798ab5.html</url>
      
        <content type="html"><![CDATA[<h2 id="调用栈（执行栈）"><a href="#调用栈（执行栈）" class="headerlink" title="调用栈（执行栈）"></a>调用栈（执行栈）</h2><ul><li>专门用来执行代码的栈</li><li>不是栈内存</li><li>LIFO: last in first out</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>异步任务排队的位置<ul><li>事件队列：Event Queue</li><li>微任务队列：Microsoft Queue<ul><li>Promise.then()</li></ul></li><li>宏任务队列：Macrosoft Queue<ul><li>整体代码</li><li>定时器</li></ul></li><li>FIFO: first in first out</li></ul></li></ul><p><a href="https://imgtu.com/i/gPRW3F"><img src="https://z3.ax1x.com/2021/04/28/gPRW3F.png" alt="gPRW3F.png"></a></p><h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><ul><li>提供异步机制的</li><li>分配任务到哪一个队列</li><li>会在每一次调用栈空的时候进行 计时 并 分配</li></ul><h2 id="事件轮询（客户端-事件循环）"><a href="#事件轮询（客户端-事件循环）" class="headerlink" title="事件轮询（客户端 事件循环）"></a>事件轮询（客户端 事件循环）</h2><ul><li>就是 JS 代码的同步异步执行机制</li><li>轮流询问 宏任务队列 和 微任务队列</li><li>从 宏任务 开始，一个宏任务，清空一次微任务队列<ul><li>再一个宏任务，清空一次微任务队列</li><li>直到微任务队列清空完毕，再次访问宏任务队列也没有任务的时候</li><li>Event Loop暂停</li></ul></li></ul><p><a href="https://imgtu.com/i/gPWTMQ"><img src="https://z3.ax1x.com/2021/04/28/gPWTMQ.png" alt="gPWTMQ.png"></a></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><a href="https://imgtu.com/i/gPRfc4"><img src="https://z3.ax1x.com/2021/04/28/gPRfc4.png" alt="gPRfc4.png"></a></p><p><a href="https://imgtu.com/i/gPRcNV"><img src="https://z3.ax1x.com/2021/04/28/gPRcNV.png" alt="gPRcNV.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化开发</title>
      <link href="/posts/b96efc28.html"/>
      <url>/posts/b96efc28.html</url>
      
        <content type="html"><![CDATA[<h1 id="没有模块化开发的时候"><a href="#没有模块化开发的时候" class="headerlink" title="没有模块化开发的时候"></a>没有模块化开发的时候</h1><ul><li>问题：<ol><li>没有办法维护</li><li>全局变量污染</li><li>依赖关系不清</li><li>必须按顺序引入文件</li></ol></li></ul><h1 id="IIFE-伪模块化标准-2003-2011"><a href="#IIFE-伪模块化标准-2003-2011" class="headerlink" title="IIFE 伪模块化标准(2003~2011)"></a>IIFE 伪模块化标准(2003~2011)</h1><ul><li>Immediaitely Invoked Function Expression </li><li>自执行函数<code>(function () &#123;&#125;)()</code></li><li>解决问题:<ol><li>依赖不清<ul><li>直接在自执行函数的参数位置，能看到依赖了哪些模块</li></ul></li><li>变量全局污染<ul><li>你后面的代码该用什么变量用什么</li></ul></li></ol></li><li>问题:<ol><li>文件顺序不能动</li><li>只能知道我依赖的几个模块，但是模块在哪个文件中不好说</li></ol></li></ul><h1 id="CommonJS-模块化标准"><a href="#CommonJS-模块化标准" class="headerlink" title="CommonJS 模块化标准"></a>CommonJS 模块化标准</h1><ul><li>2009 年，nodejs 出现了</li><li>使用JS去做服务端语言</li><li>伴生的是 CommonJS 模块化标准</li><li>缺点:只能在后端JS里面用</li></ul><h1 id="AMD-模块化标准-依赖前置"><a href="#AMD-模块化标准-依赖前置" class="headerlink" title="AMD 模块化标准 - 依赖前置"></a>AMD 模块化标准 - 依赖前置</h1><ul><li><p>Async Module Definition</p></li><li><p>2011出现的，社区里面发起的</p></li><li><p>因为非官方，没有关键字，大家书写了一套叫做 require.js 的第三方文件</p></li><li><p>来实现模块化标准</p></li><li><p>把每一个js文件独立出来了</p></li><li><p>使用了导入导出的语法来实现模块化</p></li><li><p>在JS文件里面引入另一个JS文件</p></li><li><p>页面只需要引入最后的整合文件就可以了</p></li><li><p>语法：</p><ul><li><p>定义模块(调用define 的方法)</p><ol><li><p>独立模块定义</p><ul><li>每一个模块文件开始执行define()</li><li>我不依赖其他文件，我就是一个单纯的模块</li><li>向外暴露的内容，直接return 出去就好了</li></ul></li><li><p>依赖其他模块的模块(我也是一个模块文件，但是我依赖的以他模块的内容)</p><ul><li>使用define() 定义</li><li>语法: <code>define([ 依赖文件1,依赖文件2, ... ], function (模块A,模块B) &#123;&#125;)</code></li></ul></li></ol></li><li><p>导入其他模块</p><ul><li>使用这个方法require()</li><li>语法: <code>require([ 依赖文件1,依赖文件2, ... ], function (模块1, 模块2)&#123;&#125;)</code></li></ul></li></ul></li><li><p>解决问题:</p><ol><li><p>依赖很清晰</p><ul><li>因为只有一个文件，那么所有的东西都在一个文件里面出现</li></ul></li><li><p>变量全局污染</p><ul><li>没有全局污染，都在私有作用域</li></ul></li></ol></li><li><p>问题:</p><ul><li>依赖前置<ul><li>不管多少行以后使用的东西，都会在打开页面的时候就加再进来</li><li>缺点：首屏加载时间长</li><li>优点：后期操作流畅</li></ul></li></ul></li></ul><h1 id="CMD-通用模块定义-即时依赖"><a href="#CMD-通用模块定义-即时依赖" class="headerlink" title="CMD 通用模块定义 - 即时依赖"></a>CMD 通用模块定义 - 即时依赖</h1><ul><li><p>Common Module Defineion</p></li><li><p>2011左右，社区里面出现的一个标准</p></li><li><p>淘宝”玉伯”，开发一了个CMD的模块化标准</p></li><li><p>依赖于一个叫做sea.js的文件来实现的模块化标准</p></li><li><p>使用:文件需要引入一个sea.js的文件</p><ol><li>独立模块定义<ul><li>define( function ( require, exports, module) { })<ul><li>require() 用来导入其他文件的</li><li>module.exports是为了本文件导出内容的</li><li>exports是module. exports的别名</li><li>var exports &#x3D; module。exports</li></ul></li></ul></li><li>依赖其他模块的模块<ul><li>你需要依赖其他文件模块<ul><li>在define( function ( require, exports, module) {</li><li>在你需要的位置使用require() 方法来导入</li><li>var modA &#x3D; require( ‘地址’)</li></ul></li></ul></li><li>资源整合<ul><li>使用seajs.use()</li><li>语法: seajs.use([‘你要 依赖的模块’]，function (模块A) {})</li></ul></li></ol></li><li><p>解决问题</p><ul><li>依赖前置</li><li>按需加载，在你需要的时候，在加载</li><li>也留下了依赖前置的接口</li></ul></li><li><p>问题:</p><ul><li>即时依赖<ul><li>首屏加载快</li><li>操作不够流畅</li></ul></li></ul></li></ul><h1 id="ES6-Module-依赖前置"><a href="#ES6-Module-依赖前置" class="headerlink" title="ES6 Module - 依赖前置"></a>ES6 Module - 依赖前置</h1><ul><li>2015年发布，ES6 语法里面自带了一个模块化标准</li><li>各大浏览器厂商并不买账</li><li>2016年开始，Vue出现了，人家出现了一个脚手架(开发的大框架直接给你搭建好)</li><li>搭建这个架子的时候，内置了ES6模块化标准</li><li>2018 年，各大浏览器厂商开始原生支持ES6模块化标准</li><li>2018 年中，Chrome 率先原生支持ES6模块化</li><li>变成了JS的语法，和关键字，不需要任何第三方文件的引入<ul><li>特点:页面必须在服务器上打开<ul><li>live server 插件</li><li>如果你想使用模块化语法，script 标签要加一个属性type&#x3D;” module”</li></ul></li></ul></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>每一个文件都可以作为独立模块，页都可以作为整合文件</li><li>导出语法<ol><li>export default 导出的内容</li><li>export var num &#x3D; 200</li></ol></li><li>导入语法<ol><li>接收export default 导出<ul><li><code>import 变量 from&#39;哪一个JS文件&#39;</code></li></ul></li><li>接收export导出的那个<ul><li><code>import &#123;接收变量&#125; from&#39; 哪-一个JS文件&#39;</code></li></ul></li></ol></li></ol><h1 id="ES2020-发布新标准"><a href="#ES2020-发布新标准" class="headerlink" title="ES2020 发布新标准"></a>ES2020 发布新标准</h1><ul><li>多了一个按需加载的模块化</li><li>语法: <code>import(你要加载的文件).then(function(res)&#123;&#125;)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript面向对象</title>
      <link href="/posts/28239a8d.html"/>
      <url>/posts/28239a8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>面向对象 英文Object Oriented，缩写OO </li><li>面向对象是一种软件开发方法，它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的灵活性、重用性和扩展性。 </li><li>面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物，是一种高级的编程思想。 </li><li>面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。 </li><li>面向对象的三大基本特征：封装、继承、多态</li><li>封装：封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。该逻辑单元负责将所描述的属性隐藏起来，外界对客体内部属性的所有访问只能通过提供的用户接口实现。对象是封装的最基本单位。 </li><li>继承：继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。 </li><li>多态：多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。说白了多态就是相同的事物，一个接口，多种实现，同时在最初的程序设定时，有可能会根据程序需求的不同，而不确定哪个函数实现，通过多态不需要修改源代码，就可以实现一个接口多种解决方案。 <ul><li>多态的表现形式重写与重载。 <ul><li>什么是重写 <ul><li>子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。方法重写又称方法覆盖。</li></ul></li><li>什么是重载 <ul><li>重载就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。在JavaScript中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的，所以 JavaScript 没有真正意义的重载。</li></ul></li></ul></li></ul></li><li>抽象：抽象是指强调实体的本质、内在的属性。在系统开发中，抽象指的是在决定如何实现对象之前的对象的意义和行为。使用抽象可以尽可能避免过早考虑一些细节。 </li><li>类与对象<ul><li>类描述了一组有相同特性和相同行为的对象，具有相同属性和相同方法的对象的抽象就是类。 </li><li>类的实例是对象 <ul><li>对象把数据及对数据的操作方法放在一起，作为一个相互依存的整体。</li></ul></li><li>对象的抽象是类 <ul><li>类与对象的关系：模板  -&gt;  产品 </li><li>“JavaScript中所有事物都是对象”，如 字符串、数组、函数…等等。 </li><li>因为所有事物均继承自Object，都是Object的实例。 </li><li>对象是带有属性和方法的集合。 </li><li>变量和属性：<ul><li>变量是自由的，属性是属于对象的，是与对象相关的值。</li></ul></li><li>函数和方法：<ul><li>函数是自由的，方法是属于对象的，是与对象相关的函数。</li></ul></li></ul></li></ul></li><li>面向： 面（脸），向（朝着）</li><li>面向过程： 脸朝着过程 &#x3D;》 关注着过程的编程模式</li><li>面向对象： 脸朝着对象 &#x3D;》 关注着对象的编程模式</li><li>实现一个效果<ul><li>在面向过程的时候，我们要关注每一个元素，每一个元素之间的关系，顺序，。。。</li><li>在面向对象的时候，我们要关注的就是找到一个对象来帮我做这个事情，我等待结果</li></ul></li><li>例子 🌰： 我要吃面条<ul><li>面向过程<ul><li>用多少面粉</li><li>用多少水</li><li>怎么和面</li><li>怎么切面条</li><li>做开水</li><li>煮面</li><li>吃面</li></ul></li><li>面向对象<ul><li>找到一个面馆</li><li>叫一碗面</li><li>等着吃</li></ul></li><li>面向对象就是对面向过程的封装</li></ul></li><li>我们以前的编程思想是，每一个功能，都按照需求一步一步的逐步完成</li><li>我们以后的编程思想是，每一个功能，都先创造一个 <strong>面馆</strong>，这个 <strong>面馆</strong> 能帮我们作出一个 <strong>面（完成这个功能的对象）</strong>，然后用 <strong>面馆</strong> 创造出一个 <strong>面</strong>，我们只要等到结果就好了</li></ul><h2 id="面向对象与面向过程的区别"><a href="#面向对象与面向过程的区别" class="headerlink" title="面向对象与面向过程的区别"></a>面向对象与面向过程的区别</h2><ul><li>面向过程是一种直接的的编程方法，它是按照编程的思路考虑问题，通过顺序执行一组语句来实现一个功能。</li><li>面向过程可以说是从细节方面考虑问题</li><li>面向对象可以说是从宏观方面考虑问题 </li><li>面向过程  &#x3D;&#x3D;&gt;  ‘自己造电脑’</li><li>面向对象  &#x3D;&#x3D;&gt;  ‘自己组装电脑’</li></ul><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h2><ul><li>ECMAScript提供了多个原生对象，如 Object、Array、String、Boolean、Number、Date…等等。 </li><li>此外，JavaScript允许自定义创建对象。</li></ul><h3 id="调用系统内置的构造函数创建对象"><a href="#调用系统内置的构造函数创建对象" class="headerlink" title="调用系统内置的构造函数创建对象"></a>调用系统内置的构造函数创建对象</h3><ul><li><p>js 给我们内置了一个 Object 构造函数</p></li><li><p>这个构造函数就是用来创造对象的</p></li><li><p>当 构造函数 和 new 关键字连用的时候，就可以为我们创造出一个对象</p></li><li><p>因为 js 是一个动态的语言，那么我们就可以动态的向对象中添加成员了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 就能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Object</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常操作对象</span></span><br><span class="line">o1.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">o1.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">o1.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字面量的方式创建一个对象"><a href="#字面量的方式创建一个对象" class="headerlink" title="字面量的方式创建一个对象"></a>字面量的方式创建一个对象</h3><ul><li><p>直接使用字面量的形式，也就是直接写 <code>&#123;&#125;</code></p></li><li><p>可以在写的时候就添加好成员，也可以动态的添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量方式创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个</span></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line">o2.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">o2.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">o2.<span class="property">gender</span> = <span class="string">&#x27;女&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用工厂函数的方式创建对象"><a href="#使用工厂函数的方式创建对象" class="headerlink" title="使用工厂函数的方式创建对象"></a>使用工厂函数的方式创建对象</h3><ul><li><p>先书写一个工厂函数</p></li><li><p>这个工厂函数里面可以创造出一个对象，并且给对象添加一些属性，还能把对象返回</p></li><li><p>使用这个工厂函数创造对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先创建一个工厂函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 手动创建一个对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动的向对象中添加成员</span></span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  obj.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动返回一个对象</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用这个工厂函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="title function_">createObj</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="title function_">createObj</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用自定义构造函数创建对象"><a href="#使用自定义构造函数创建对象" class="headerlink" title="使用自定义构造函数创建对象"></a>使用自定义构造函数创建对象</h3><ul><li><p>工厂函数需要经历三个步骤</p><ul><li>手动创建对象</li><li>手动添加成员</li><li>手动返回对象</li></ul></li><li><p>构造函数会比工厂函数简单一下</p><ul><li>自动创建对象</li><li>手动添加成员</li><li>自动返回对象</li></ul></li><li><p>先书写一个构造函数</p></li><li><p>在构造函数内向对象添加一些成员</p></li><li><p>使用这个构造函数创造一个对象（和 new 连用）</p></li><li><p>构造函数可以创建对象，并且创建一个带有属性和方法的对象</p></li><li><p>面向对象就是要想办法找到一个有属性和方法的对象</p></li><li><p>面向对象就是我们自己制造 <strong>构造函数</strong> 的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先创造一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;man&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;woman&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数详解"><a href="#构造函数详解" class="headerlink" title="构造函数详解"></a>构造函数详解</h2><ul><li>我们了解了对象的创建方式</li><li>我们的面向对象就是要么能直接得到一个对象</li><li>要么就弄出一个能创造对象的东西，我们自己创造对象</li><li>我们的构造函数就能创造对象，所以接下来我们就详细聊聊 <strong>构造函数</strong></li></ul><h3 id="构造函数的基本使用"><a href="#构造函数的基本使用" class="headerlink" title="构造函数的基本使用"></a>构造函数的基本使用</h3><ul><li><p>和普通函数一样，只不过 <strong>调用的时候要和 new 连用</strong>，不然就是一个普通函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()  <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="title class_">Person</span>()      <span class="comment">// 什么也得不到，这个就是普通函数调用</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>不写 new 的时候就是普通函数调用，没有创造对象的能力</strong></li></ul></li><li><p>首字母大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title function_">person</span>() <span class="comment">// 能得到一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// 能得到一个对象</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>首字母不大写，只要和 new 连用，就有创造对象的能力</strong></li></ul></li><li><p>当调用的时候如果不需要传递参数可以不写 <code>()</code>，建议都写上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()  <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>    <span class="comment">// 能得到一个空对象 </span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>如果不需要传递参数，那么可以不写 （），如果传递参数就必须写</strong></li></ul></li><li><p>构造函数内部的 this，由于和 new 连用的关系，是指向当前实例对象的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()  <span class="comment">// 本次调用的时候，this =&gt; o1</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()  <span class="comment">// 本次调用的时候，this =&gt; o2</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>每次 new 的时候，函数内部的 this 都是指向当前这次的实例化对象</strong></li></ul></li><li><p>因为构造函数会自动返回一个对象，所以构造函数内部不要写 return</p><ul><li>你如果 return 一个基本数据类型，那么写了没有意义</li><li>如果你 return 一个引用数据类型，那么构造函数本身的意义就没有了</li></ul></li></ul><h3 id="使用构造函数创建一个对象"><a href="#使用构造函数创建一个对象" class="headerlink" title="使用构造函数创建一个对象"></a>使用构造函数创建一个对象</h3><ul><li><p>我们在使用构造函数的时候，可以通过一些代码和内容来向当前的对象中添加一些内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>我们得到的两个对象里面都有自己的成员 <strong>name</strong> 和 <strong>age</strong></li></ul></li><li><p>我们在写构造函数的时候，是不是也可以添加一些方法进去呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello constructor&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>显然是可以的，我们的到的两个对象中都有 <code>sayHi</code> 这个函数</li><li>也都可以正常调用</li></ul></li><li><p>但是这样好不好呢？缺点在哪里？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello constructor&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ul><li>这样的话，那么我们两个对象内的 <code>sayHi</code> 函数就是一个代码一摸一样，功能一摸一样</li><li>但是是两个函数空间，占用两个内存空间</li><li>也就是说 <code>o1.sayHi</code> 是一个地址，<code>o2.sayHi</code> 是一个地址</li><li>所以我们执行 <code>console.log(o1.sayHi === o2.sayHi)</code> 的到的结果是 <code>false</code></li><li>缺点： <strong>一摸一样的函数出现了两次，占用了两个空间地址</strong></li></ul></li><li><p>怎么解决这个问题呢？</p><ul><li>就需要用到一个东西，叫做 <strong>原型</strong></li></ul></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li><p>原型的出现，就是为了解决 <strong>构造函数的缺点</strong></p></li><li><p>也就是给我们提供了一个给对象添加函数的方法</p></li><li><p>不然构造函数只能给对象添加属性，不能合理的添加函数就太 LOW 了</p></li></ul><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ul><li><p><strong>每一个函数天生自带一个成员，叫做 prototype，是一个对象空间</strong></p></li><li><p>即然每一个函数都有，构造函数也是函数，构造函数也有这个对象空间</p></li><li><p>prototype(原型)属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含特定类型的所有实例共享的属性和方法，即这个原型对象是用来给实例共享属性和方法的。 而每个实例内部都有一个指向原型对象的指针。 使用这个原型对象来共享实例的属性和方法的模式就叫原型模式</p></li><li><p>这个 <code>prototype</code> 对象空间可以由函数名来访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 是一个对象</span></span><br></pre></td></tr></table></figure><ul><li>即然是个对象，那么我们就可以向里面放入一些东西</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;prototype&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们发现了一个叫做 <code>prototype</code> 的空间是和函数有关联的</p></li><li><p>并且可以向里面存储一些东西</p></li><li><p>重点： <strong>在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的</strong></p></li><li><p>那实例化对象怎么使用能？</p></li></ul><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><ul><li><p><strong>每一个对象都天生自带一个成员，叫做 <code>__proto__</code>，是一个对象空间</strong></p></li><li><p>即然每一个对象都有，实例化对象也是对象，那么每一个实例化对象也有这个成员</p></li><li><p>这个 <code>__proto__</code> 对象空间是给每一个对象使用的</p></li><li><p>当你访问一个对象中的成员的时候</p><ul><li>如果这个对象自己本身有这个成员，那么就会直接给你结果</li><li>如果没有，就会去 <code>__proto__</code> 这个对象空间里面找，里面有的话就给你结果</li><li>未完待续。。。</li></ul></li><li><p>那么这个 <code>__proto__</code> 又指向哪里呢？</p><ul><li>这个对象是由哪个构造函数 new 出来的</li><li>那么这个对象的 <code>__proto__</code> 就指向这个构造函数的 <code>prototype</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>我们发现实例化对象的 <code>__proto__</code> 和所属的构造函数的 <code>prototype</code> 是一个对象空间</li><li>我们可以通过构造函数名称来向 <code>prototype</code> 中添加成员</li><li>对象在访问的时候自己没有，可以自动去自己的 <code>__proto__</code> 中查找</li><li>那么，我们之前构造函数的缺点就可以解决了<ul><li>我们可以把函数放在构造函数的 <code>prototype</code> 中</li><li>实例化对象访问的时候，自己没有，就会自动去 <code>__proto__</code> 中找</li><li>那么也可以使用了</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Person&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 自己没有 <code>sayHi</code> 方法，就会去自己的 <code>__proto__</code> 中查找</li><li><code>p1.__proto__</code> 就是 <code>Person.prototype</code></li><li>我们又向 <code>Person.prototype</code> 中添加了 <code>sayHi</code> 方法</li><li>所以 <code>p1.sayHi</code> 就可以执行了</li></ul></li><li><p>到这里，当我们实例化多个对象的时候，每个对象里面都没有方法</p><ul><li>都是去所属的构造函数的 <code>prototype</code> 中查找</li><li>那么每一个对象使用的函数，其实都是同一个函数</li><li>那么就解决了我们构造函数的缺点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayHi</span> === p2.<span class="property">sayHi</span>)</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 是 <code>Person</code> 的一个实例</li><li><code>p2</code> 是 <code>Person</code> 的一个实例</li><li>也就是说 <code>p1.__proto__</code> 和 <code>p2.__proto__</code> 指向的都是 <code>Person.prototype</code></li><li>当 <code>p1</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>当 <code>p2</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>那么两个实例化对象就是找到的一个方法，也是执行的一个方法</li></ul></li><li><p>结论</p><ul><li>当我们写构造函数的时候</li><li><strong>属性我们直接写在构造函数体内</strong></li><li><strong>方法我们写在原型上</strong></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> //原型模式创建对象</span><br><span class="line">function Person()&#123;</span><br><span class="line"> &#125;</span><br><span class="line">Person.prototype.name=&#x27;钟女士&#x27;;</span><br><span class="line">Person.prototype.age=80;</span><br><span class="line">Person.prototype.gender=&#x27;女&#x27;;</span><br><span class="line">var person1= new Person();</span><br><span class="line">console.log(person1)</span><br><span class="line">//简写原型模式</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">   constructor:Person</span><br><span class="line">   name:&#x27;钟女士&#x27;，</span><br><span class="line">   age:80,</span><br><span class="line">   gender:&#x27;女&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">var p=new Person()</span><br><span class="line">console.log(p)</span><br></pre></td></tr></table></figure><p>注：每个原型对象都有constructor属性，由于简写模式重写了默认的prototype对象，所以constructor也会被重新定义，不再指向他的构造函数，所以可以自己写一个constructor属性指向他的构造函数 </p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li>每个构造函数都有原型对象，每个构造函数实例都包含一个指向原型对象的内部指针（proto），如果我们让<code>第一个构造函数的原型对象(prototype)等于第二个构造函数的实例</code>，结果<code>第一个构造函数的原型对象(prototype)将包含一个指向第二个原型对象的指针</code>，再然<code>第三个原型对象(prototype)等于第一个构造函数的实例</code>，这样<code>第三个原型对象(prototype)也将包含指向第一个原型对象的指针</code>，以此类推，就够成了实例于原型的链条，这就是原型链的基本概念</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">One</span>(<span class="params"></span>)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Two</span>(<span class="params"></span>)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Three</span>(<span class="params"></span>)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title class_">Two</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">One</span>();</span><br><span class="line"> <span class="title class_">Three</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Two</span>();</span><br><span class="line"> <span class="keyword">var</span> three=<span class="keyword">new</span> <span class="title class_">Three</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(three.<span class="property">__proto__</span>===<span class="title class_">Three</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//true</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(three.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Two</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//true</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(three.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">One</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">//true</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(three.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在对象实例中，访问对象原型的方法</p><p>1、使用proto属性<br>此属性是浏览器支持的一个属性，并不是ECMAScript里的属性</p><p>语法：实例对象._<em>proto</em>_.函数()</p><p>2.Object.getPrototypeOf( )：返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。 </p><p>语法：Object.getPrototypeOf(实例对象)</p><p>3.使用constructor.prototype的方法<br>对于不支持proto的浏览器，可以使用constructor，访问到对象的构造函数，在用prototype访问到原型</p><p>语法：实例对象.constructor.prototype.函数()</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li><p>对象的 <code>__proto__</code> 里面也有一个成员叫做 <strong><code>constructor</code></strong></p></li><li><p>这个属性就是指向当前这个对象所属的构造函数</p></li><li><p>可以用来判断复杂数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">constructor</span> == <span class="title class_">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;.<span class="property">constructor</span> == <span class="title class_">Function</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="property">constructor</span> == <span class="title class_">Date</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="原型链的访问原则"><a href="#原型链的访问原则" class="headerlink" title="原型链的访问原则"></a>原型链的访问原则</h3><ul><li>我们之前说过，访问一个对象的成员的时候，自己没有就会去 <code>__proto__</code> 中找</li><li>接下来就是，如果 <code>__proto__</code> 里面没有就再去 <code>__proto__</code> 里面找</li><li>一直找到 <code>Object.prototype</code> 里面都没有，那么就会返回 <code>undefiend</code></li></ul><h3 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h3><ul><li>到这里，我们就会觉得，如果是赋值的话，那么也会按照原型链的规则来</li><li>但是： <strong>并不是！并不是！并不是！</strong> 重要的事情说三遍</li><li>赋值的时候，就是直接给对象自己本身赋值<ul><li>如果原先有就是修改</li><li>原先没有就是添加</li><li>不会和 <code>__proto__</code> 有关系</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>到了这里，我们就发现了面向对象的思想模式了</p><ul><li>当我想完成一个功能的时候</li><li>先看看内置构造函数有没有能给我提供一个完成功能对象的能力</li><li>如果没有，我们就自己写一个构造函数，能创造出一个完成功能的对象</li><li>然后在用我们写的构造函数 new 一个对象出来，帮助我们完成功能就行了</li></ul></li><li><p>比如： tab选项卡</p><ul><li>我们要一个对象</li><li>对象包含一个属性：是每一个点击的按钮</li><li>对象包含一个属性：是每一个切换的盒子</li><li>对象包含一个方法：是点击按钮能切换盒子的能力</li><li>那么我们就需要自己写一个构造函数，要求 new 出来的对象有这些内容就好了</li><li>然后在用构造函数 new 一个对象就行了</li></ul></li></ul><hr><h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h1><p>传统的javascript中只有对象，没有类的概念。它是基于原型的面向对象语言。原型对象特点就是将自身的属性共享给新对象。这样的写法相对于其它传统面向对象语言来讲，很有一种独树一帜的感觉！非常容易让人困惑！</p><p>如果要生成一个对象实例，需要先定义一个构造函数，然后通过new操作符来完成。构造函数示例： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数名和实例化构造名相同且大写（非强制，但这么写有助于区分构造函数和普通函数）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我的名字叫&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;今年&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;laotie&quot;</span>,<span class="number">88</span>);<span class="comment">//通过构造函数创建对象，必须使用new 运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">say</span>());<span class="comment">//我的名字叫laotie今年88岁了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数生成实例的执行过程：</span></span><br><span class="line"><span class="comment">1.当使用了构造函数，并且new 构造函数(),后台会隐式执行new Object()创建对象;</span></span><br><span class="line"><span class="comment">2.将构造函数的作用域给新对象，（即new Object()创建出的对象），而函数体内的this就代表new Object()出来的对象。</span></span><br><span class="line"><span class="comment">3.执行构造函数的代码。</span></span><br><span class="line"><span class="comment">4.返回新对象（后台直接返回）;*/</span></span><br></pre></td></tr></table></figure><p>ES6引入了Class（类）这个概念，通过class关键字可以定义类。该关键字的出现使得其在对象写法上更加清晰，更像是一种面向对象的语言。 </p><h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><ul><li>类表达式可以为匿名或命名。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Example</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 命名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Example</span> = <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意要点：不可重复声明。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier &#x27;Example&#x27; has already been </span></span><br><span class="line"><span class="comment">// declared</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Example</span> = <span class="keyword">class</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier &#x27;Example&#x27; has already been </span></span><br><span class="line"><span class="comment">// declared</span></span><br></pre></td></tr></table></figure><h2 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h2><ul><li>静态属性：class 本身的属性，即直接定义在类内部的属性（ Class.propname ），不需要实例化</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="comment">// 新提案</span></span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 目前可行写法</span></span><br><span class="line"><span class="title class_">Example</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>公共属性</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;&#125;</span><br><span class="line"><span class="title class_">Example</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>实例属性：定义在实例对象（ this ）上的属性。</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name 属性  返回跟在 class 后的类名(存在时)。</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Example</span>=<span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Example</span>.<span class="property">name</span>); <span class="comment">// Exam</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Example</span>=<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Example</span>.<span class="property">name</span>); <span class="comment">// Example</span></span><br></pre></td></tr></table></figure><h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><ul><li><p>constructor 方法是类的默认方法，创建类的实例化对象时被调用。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是constructor&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Example</span>(); <span class="comment">// 我是constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor中返回对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Test &#123;</span></span><br><span class="line"><span class="comment">    constructor()&#123;</span></span><br><span class="line"><span class="comment">        // 默认返回实例对象 this</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">console.log(new Test() instanceof Test); // true</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">class Example &#123;</span></span><br><span class="line"><span class="comment">    constructor()&#123;</span></span><br><span class="line"><span class="comment">        // 指定返回对象</span></span><br><span class="line"><span class="comment">        return new Test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">console.log(new Example() instanceof Example); // false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>静态方法</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Example</span>.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><p>原型方法 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> exam = <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">exam.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p>实例方法 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果将之前的代码改为ES6的写法就会是这个样子： </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;<span class="comment">//定义了一个名字为Person的类</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;<span class="comment">//constructor是一个构造方法，用来接收参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;<span class="comment">//this代表的是实例对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;<span class="comment">//这是一个类的方法，注意千万不要加上function</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的名字叫&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;今年&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;laotie&quot;</span>,<span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">say</span>());<span class="comment">//我的名字叫laotie今年88岁了</span></span><br></pre></td></tr></table></figure><p>  注：<br>        1.在类中声明方法的时候，千万不要给该方法加上function关键字<br>        2.方法之间不要用逗号分隔，否则会报错</p><ul><li><p>由下面代码可以看出类实质上就是一个函数。类自身指向的就是构造函数。所以可以认为ES6中的类其实就是构造函数的另外一种写法！ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person</span>);<span class="comment">//function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>以下代码说明构造函数的prototype属性，在ES6的类中依然存在着。<br> <code>console.log(Person.prototype);//输出的结果是一个对象</code><br> 实际上类的原型方法都定义在类的prototype属性上。代码证明下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//定义与类中相同名字的方法。成功实现了覆盖！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是来证明的，你叫&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;今年&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;laotie&quot;</span>,<span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">say</span>());<span class="comment">//我是来证明的，你叫laotie今年88岁了</span></span><br></pre></td></tr></table></figure></li><li><p>当然也可以通过prototype属性对类添加方法。如下： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addFn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是通过prototype新增加的方法,名字叫addFn&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;laotie&quot;</span>,<span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">addFn</span>());<span class="comment">//我是通过prototype新增加的方法,名字叫addFn</span></span><br></pre></td></tr></table></figure></li><li><p>还可以通过Object.assign方法来为对象动态增加方法 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>,&#123;</span><br><span class="line">    <span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getAge</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;laotie&quot;</span>,<span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getName</span>());<span class="comment">//laotie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getAge</span>());<span class="comment">//88</span></span><br></pre></td></tr></table></figure></li><li><p>constructor方法是类的构造函数的默认方法，通过new命令生成对象实例时，自动调用该方法。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;啦啦啦，今天天气好晴朗&quot;</span>);<span class="comment">//当实例化对象时该行代码会执行。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Box</span>();</span><br></pre></td></tr></table></figure></li><li><p>constructor方法如果没有显式定义，会隐式生成一个constructor方法。所以即使你没有添加构造函数，构造函数也是存在的。constructor方法默认返回实例对象this，但是也可以指定constructor方法返回一个全新的对象，让返回的实例对象不是该类的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Desk</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xixi</span>=<span class="string">&quot;我是一只小小小小鸟！哦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Desk</span>();<span class="comment">// 这里没有用this哦，直接返回一个全新的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">xixi</span>);<span class="comment">//我是一只小小小小鸟！哦</span></span><br></pre></td></tr></table></figure></li><li><p>constructor中定义的属性可以称为<code>实例属性</code>（即定义在this对象上），constructor外声明的属性都是定义在原型上的，可以称为<code>原型属性</code>（即定义在class上)。hasOwnProperty()函数用于判断属性是否是实例属性。其结果是一个布尔值， true说明是实例属性，false说明不是实例属性。in操作符会在通过对象能够访问给定属性时返回true,无论该属性存在于实例中还是原型中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num1</span> = num1;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num2</span>=num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> box=<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">12</span>,<span class="number">88</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;num1&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;num2&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sum&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num1&quot;</span> <span class="keyword">in</span> box);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num2&quot;</span> <span class="keyword">in</span> box);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum&quot;</span> <span class="keyword">in</span> box);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say&quot;</span> <span class="keyword">in</span> box);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>类的所有实例共享一个原型对象，它们的原型都是Person.prototype，所以<strong>proto</strong>属性是相等的 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num1</span> = num1;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num2</span>=num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num1</span>+<span class="variable language_">this</span>.<span class="property">num2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//box1与box2都是Box的实例。它们的__proto__都指向Box的prototype</span></span><br><span class="line"><span class="keyword">var</span> box1=<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">12</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">var</span> box2=<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">__proto__</span>===box2.<span class="property">__proto__</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>由此，也可以通过<strong>proto</strong>来为类增加方法。使用实例的<strong>proto</strong>属性改写原型，会改变Class的原始定义，影响到所有实例，所以不推荐使用！ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num1</span> = num1;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num2</span>=num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> box1=<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">12</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">var</span> box2=<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line">box1.<span class="property">__proto__</span>.<span class="property">sub</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num2</span>-<span class="variable language_">this</span>.<span class="property">num1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="title function_">sub</span>());<span class="comment">//76</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box2.<span class="title function_">sub</span>());<span class="comment">//20</span></span><br></pre></td></tr></table></figure></li><li><p><strong>class不存在变量提升</strong>，所以需要先定义再使用。因为ES6不会把类的声明提升到代码头部，但是ES5就不一样,<strong>ES5存在变量提升</strong>,可以先使用，然后再定义。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5可以先使用再定义,存在变量提升</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6不能先使用再定义,不存在变量提升 会报错</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();<span class="comment">//B is not defined</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript运动函数</title>
      <link href="/posts/3ee5605f.html"/>
      <url>/posts/3ee5605f.html</url>
      
        <content type="html"><![CDATA[<h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><ul><li>运动原理：使用计时器，持续改变元素的属性</li><li>运动速度：取决于每次所走距离的多少</li><li>运动停止：判断什么时候到达目标位置，并清除计时器</li></ul><h4 id="匀速运动"><a href="#匀速运动" class="headerlink" title="匀速运动"></a>匀速运动</h4><ul><li>运动频率和运动速度保持不变!</li><li>运动频率：计时器时间</li><li>运动速度：每次改变的量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function move(dom,target) &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = setInterval(function () &#123;</span><br><span class="line">        if (target &gt; dom.offsetLeft) &#123;//判断运动方向</span><br><span class="line">            var speed = 5;//右走</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var speed = -5;//左走</span><br><span class="line">        &#125;</span><br><span class="line">        // 剩余的运动量 &lt; 每次所走的运动量</span><br><span class="line">        if (Math.abs(dom.offsetLeft - target) &lt;= Math.abs(speed)) &#123;</span><br><span class="line">            clearInterval(timer);//运动结束</span><br><span class="line">            dom.style.left = target + &#x27;px&#x27;;//手动设置终点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dom.style.left = dom.offsetLeft + speed + &#x27;px&#x27;;//每次的运动</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,20);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓冲运动"><a href="#缓冲运动" class="headerlink" title="缓冲运动"></a>缓冲运动</h4><ul><li>运动速度发生变化，由快到慢</li></ul><p>缓冲运动的关键： </p><p>1.频率不变，速度逐渐变慢</p><p>​var speed &#x3D; (target - obj.offsetLeft) &#x2F; 10; </p><p>2.对速度取整，避免数据丢失</p><p>​speed &#x3D; speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function move(dom,target) &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = setInterval(function () &#123;</span><br><span class="line">        var speed = (target - dom.offsetLeft) / 10;//持续变化的速度</span><br><span class="line">        speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed);//对速度取整，避免数据丢失</span><br><span class="line">        // 剩余的运动量 &lt; 每次所走的运动量</span><br><span class="line">        if (Math.abs(dom.offsetLeft - target) &lt;= Math.abs(speed)) &#123;</span><br><span class="line">            clearInterval(timer);//运动结束</span><br><span class="line">            dom.style.left = target + &#x27;px&#x27;;//手动设置终点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dom.style.left = dom.offsetLeft + speed + &#x27;px&#x27;;//每次的运动</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,20);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="透明度运动"><a href="#透明度运动" class="headerlink" title="透明度运动"></a>透明度运动</h4><ul><li>透明度变量：var opa&#x3D;30; </li><li>IE浏览器：box.style.filter &#x3D; ‘alpha(opacity:’ + opa + ‘)’; </li><li>其他浏览器：box.style.opacity &#x3D; opa&#x2F;100;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function move(dom,target) &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = setInterval(function () &#123;</span><br><span class="line">        if (target &gt; opa) &#123;//运动方向</span><br><span class="line">            var speed = 2;//透明度增加</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var speed = -2;//透明度减少</span><br><span class="line">        &#125;</span><br><span class="line">        // 剩余的运动量 &lt; 每次所走的运动量</span><br><span class="line">        if (Math.abs(opa - target) &lt;= Math.abs(speed)) &#123;</span><br><span class="line">            clearInterval(timer);//运动结束</span><br><span class="line">            dom.style.opacity = target / 100;//手动设置终点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            opa += speed;</span><br><span class="line">            dom.style.opacity = opa / 100;//每次的运动</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多元素进行相同的运动，属性都不能共用！ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var box = document.querySelectorAll(&#x27;.box&#x27;);</span><br><span class="line"></span><br><span class="line">for(var i = 0; i &lt; box.length; i++)&#123;</span><br><span class="line">    box[i].opa = 30;</span><br><span class="line">    box[i].timer = null;</span><br><span class="line">    box[i].onmouseover = function () &#123;</span><br><span class="line">        move(this,100);</span><br><span class="line">    &#125;</span><br><span class="line">    box[i].onmouseout = function () &#123;</span><br><span class="line">        move(this,30);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function move(dom,target) &#123;</span><br><span class="line">    clearInterval(dom.timer);</span><br><span class="line">    dom.timer = setInterval(function () &#123;</span><br><span class="line">        if (target &gt; dom.opa) &#123;//运动方向</span><br><span class="line">            var speed = 2;//透明度增加</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var speed = -2;//透明度减少</span><br><span class="line">        &#125;</span><br><span class="line">        // 剩余的运动量 &lt; 每次所走的运动量</span><br><span class="line">        if (Math.abs(dom.opa - target) &lt;= Math.abs(speed)) &#123;</span><br><span class="line">            clearInterval(dom.timer);//运动结束</span><br><span class="line">            dom.style.opacity = target / 100;//手动设置终点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dom.opa += speed;</span><br><span class="line">            dom.style.opacity = dom.opa / 100;//每次的运动</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swiper插件制作轮播图：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><h3 id="多属性运动"><a href="#多属性运动" class="headerlink" title="多属性运动"></a>多属性运动</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5和ES6</title>
      <link href="/posts/31430fd1.html"/>
      <url>/posts/31430fd1.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES5和ES6"><a href="#ES5和ES6" class="headerlink" title="ES5和ES6"></a>ES5和ES6</h1><ul><li>我们所说的 ES5 和 ES6 其实就是在 js 语法的发展过程中的一个版本而已</li><li>比如我们使用的微信<ul><li>最早的版本是没有支付功能的</li><li>随着时间的流逝，后来出现了一个版本，这个版本里面有支付功能了</li></ul></li><li>ECMAScript 就是 js 的语法<ul><li>以前的版本没有某些功能</li><li>在 ES5 这个版本的时候增加了一些功能</li><li>在 ES6 这个版本的时候增加了一些功能</li></ul></li><li>因为浏览器是浏览器厂商生产的<ul><li>ECMAScript 发布了新的功能以后，浏览器厂商需要让自己的浏览器支持这些功能</li><li>这个过程是需要时间的</li><li>所以到现在，基本上大部分浏览器都可以比较完善的支持了</li><li>只不过有些浏览器还是不能全部支持</li><li>这就出现了兼容性问题</li><li>所以我们写代码的时候就要考虑哪些方法是 ES5 或者 ES6 的，看看是不是浏览器都支持</li></ul></li></ul><h2 id="ES5-增加的数组常用方法"><a href="#ES5-增加的数组常用方法" class="headerlink" title="ES5 增加的数组常用方法"></a>ES5 增加的数组常用方法</h2><h3 id="数组方法之-forEach"><a href="#数组方法之-forEach" class="headerlink" title="数组方法之 forEach"></a>数组方法之 forEach</h3><ul><li><p><code>forEach</code> 用于遍历数组，和 for 循环遍历数组一个道理</p></li><li><p>语法： <code>数组.forEach(function (item, index, arr) &#123;&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment">// forEach 就是将数组循环遍历，数组中有多少项，那么这个函数就执行多少回</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 在这个函数内部</span></span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是每一项对应的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>上面的代码就等价于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(arr[i], i, arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组方法之-map"><a href="#数组方法之-map" class="headerlink" title="数组方法之 map"></a>数组方法之 map</h3><ul><li><p><code>map</code> 用于遍历数组，和 forEach 基本一致，只不过是有一个返回值</p></li><li><p>语法： <code>数组.map(function (item, index, arr) &#123;&#125;)</code></p></li><li><p>返回值： 一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment">// forEach 就是将数组循环遍历，数组中有多少项，那么这个函数就执行多少回</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数里面的三个参数和 forEach 一样</span></span><br><span class="line">  <span class="comment">// 我们可以在这里操作数组中的每一项，</span></span><br><span class="line">  <span class="comment">// return 操作后的每一项</span></span><br><span class="line">  <span class="keyword">return</span> item + <span class="string">&#x27;11&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&quot;a11&quot;, &quot;b11&quot;, &quot;c11&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>返回值就是我们每次对数组的操作</li><li>等价于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  newArr.<span class="title function_">push</span>(<span class="title function_">fn</span>(arr[i], i, arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="string">&#x27;11&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组方法之-filter"><a href="#数组方法之-filter" class="headerlink" title="数组方法之 filter"></a>数组方法之 filter</h3><ul><li><p><code>filter</code> ： 是将数组遍历一遍，按照我们的要求把数数组中符合的内容过滤出来</p></li><li><p>语法： <code>数组.filter(function (item, index, arr) &#123;&#125;)</code></p></li><li><p>返回值： 根据我们的条件过滤出来的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部的三个参数和 forEach 一样</span></span><br><span class="line">  <span class="comment">// 我们把我们的条件 return 出去</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li>新数组里面全都是大于 2 的数字</li><li>等价于</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">fn</span>(arr[i], i, arr)) &#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure></li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON与XML都是常见的数据格式</p><p>JSON（JavaScript Object Notation）轻量级数据格式；XML 是一种可扩展标记语言，与HTML都是标记语言 </p><p><a href="https://imgtu.com/i/6cRw36"><img src="https://s3.ax1x.com/2021/03/17/6cRw36.png" alt="6cRw36.png"></a></p><ul><li><p>JSON的优势：<br>​轻量级，体积小，节省流量，提高加载速度<br>​解析成原生JS对象，解析比XML更快<br>​查找数据无需查找标签，更快速更高效<br>在数据传输流程中，JSON是以文本即字符串的形式传递的，而JS操作的是JSON对象<br>所以，JSON对象和JSON字符串之间的相互转换是关键：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json1 = <span class="string">&#x27;&#123; &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; &#125;&#x27;</span>; <span class="comment">// JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> json2 = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;cxh&quot;</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;man&quot;</span> &#125;; <span class="comment">//  JSON对 象</span></span><br><span class="line"><span class="comment">//由JSON字符串转换为JSON对象</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + json1 + <span class="string">&#x27;)&#x27;</span>); </span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json1); <span class="comment">// 需严格的json格式（注：字符串中的属性必须要使用双引号引起来）</span></span><br><span class="line"><span class="comment">//将JSON对象转化为JSON字符串</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json2);</span><br></pre></td></tr></table></figure></li></ul><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><ul><li><p>每一个函数内部都有一个关键字是 <code>this</code> </p></li><li><p>可以让我们直接使用的</p></li><li><p>重点： <strong>函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系</strong></p></li><li><p>函数内部的 this 指向谁，取决于函数的调用方式</p><ul><li><p>全局定义的函数直接调用，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></li><li><p>对象内部的方法调用，<code>this =&gt; 调用者</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 此时 this 指向 obj</span></span><br></pre></td></tr></table></figure></li><li><p>定时器的处理函数，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 此时定时器处理函数里面的 this 指向 window</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理函数，<code>this =&gt; 事件源</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当你点击 div 的时候，this 指向 div</span></span><br></pre></td></tr></table></figure></li><li><p>自调用函数，<code>this =&gt; window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="准确检测数据类型"><a href="#准确检测数据类型" class="headerlink" title="准确检测数据类型"></a>准确检测数据类型</h3><p>​使用于所有数据类型</p><p>​语法：Object.prototype.toString.call(你要检测的数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof  只能准确的检测基本数据类型</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;typeof&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="number">123</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="literal">true</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="literal">undefined</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="literal">null</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="regexp">/^abc$/</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>()</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;准确检测&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="regexp">/^abc$/</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>()</span><br></pre></td></tr></table></figure><h3 id="call-和-apply-和-bind"><a href="#call-和-apply-和-bind" class="headerlink" title="call 和 apply 和 bind"></a>call 和 apply 和 bind</h3><ul><li>刚才我们说过的都是函数的基本调用方式里面的 this 指向</li><li>我们还有三个可以忽略函数本身的 this 指向转而指向别的地方</li><li>这三个方法就是 <strong>call</strong> &#x2F; <strong>apply</strong> &#x2F; <strong>bind</strong></li><li>是强行改变 this 指向的方法</li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul><li><p><code>call</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>语法： <code>函数名.call(要改变的 this 指向，要给函数传递的参数1，要给函数传递的参数2， ...)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>fn()</code> 的时候，函数内部的 this 指向 window</li><li><code>fn.call(obj, 1, 2)</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li><li>使用 call 方法的时候<ul><li>会立即执行函数</li><li>第一个参数是你要改变的函数内部的 this 指向</li><li>第二个参数开始，依次是向函数传递参数</li></ul></li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><ul><li><p><code>apply</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>语法： <code>函数名.apply(要改变的 this 指向，[要给函数传递的参数1， 要给函数传递的参数2， ...])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><ul><li><code>fn()</code> 的时候，函数内部的 this 指向 window</li><li><code>fn.apply(obj, [1, 2])</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li><li>使用 apply 方法的时候<ul><li>会立即执行函数</li><li>第一个参数是你要改变的函数内部的 this 指向</li><li>第二个参数是一个 <strong>数组</strong>，数组里面的每一项依次是向函数传递的参数</li></ul></li></ul></li></ul><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li><p><code>bind</code> 方法是附加在函数调用后面使用，可以忽略函数本身的 this 指向</p></li><li><p>和 call &#x2F; apply 有一些不一样，就是不会立即执行函数，而是返回一个已经改变了 this 指向的函数</p></li><li><p>语法： <code>var newFn = 函数名.bind(要改变的 this 指向); newFn(传递参数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> newFn = fn.<span class="title function_">bind</span>(obj)</span><br><span class="line"><span class="title function_">newFn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>bind 调用的时候，不会执行 fn 这个函数，而是返回一个新的函数</li><li>这个新的函数就是一个改变了 this 指向以后的 fn 函数</li><li><code>fn(1, 2)</code> 的时候 this 指向 window</li><li><code>newFn(1, 2)</code> 的时候执行的是一个和 fn 一摸一样的函数，只不过里面的 this 指向改成了 obj</li></ul></li></ul><h2 id="ES6新增的内容"><a href="#ES6新增的内容" class="headerlink" title="ES6新增的内容"></a>ES6新增的内容</h2><ul><li>之前的都是 ES5 的内容</li><li>接下来我们聊一下 ES6 的内容</li></ul><h3 id="let-和-const-关键字"><a href="#let-和-const-关键字" class="headerlink" title="let 和 const 关键字"></a>let 和 const 关键字</h3><ul><li><p>我们以前都是使用 <code>var</code> 关键字来声明变量的</p></li><li><p>在 ES6 的时候，多了两个关键字 <code>let</code> 和 <code>const</code>，也是用来声明变量的</p></li><li><p>只不过和 var 有一些区别</p><ol><li><code>let</code> 和 <code>const</code> 不允许重复声明变量</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 var 的时候重复声明变量是没问题的，只不过就是后面会把前面覆盖掉</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 let 重复声明变量的时候就会报错了</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 const 重复声明变量的时候就会报错</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>let</code> 和 <code>const</code> 声明的变量不会在预解析的时候解析（也就是没有变量提升）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为预解析（变量提升）的原因，在前面是有这个变量的，只不过没有赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 let 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 const 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p><code>let</code> 和 <code>const</code> 声明的变量会被所有代码块限制作用范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量只有函数能限制其作用域，其他的不能限制</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>let</code> 和 <code>const</code> 的区别</p><ol><li><p><code>let</code> 声明的变量的值可以改变，<code>const</code> 声明的变量的值不可以改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span> <span class="comment">// 这里就会报错了，因为 const 声明的变量值不可以改变（我们也叫做常量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//obj存储的是对象的地址，给obj添加内容，地址不变。因此不报错</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">age</span>=<span class="number">23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure></li><li><p><code>let</code> 声明的时候可以不赋值，<code>const</code> 声明的时候必须赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num <span class="comment">// 这里就会报错了，因为 const 声明的时候必须赋值</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Map-和-Set"><a href="#Map-和-Set" class="headerlink" title="Map 和 Set"></a>Map 和 Set</h2><ul><li>Map 和 Set 是 ES6 新增的两个数据类型</li><li>都是属于内置构造函数</li><li>使用 new 的方式来实例化使用</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><p>Set 是一个构造函数，用来生成 Set 数据结构，它类似于数组，但是成员的值都是唯一的、没有重复的， 初始化 Set 可以接受一个数组或类数组对象作为参数，也可以创建一个空的 Set： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Set</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(0)</span></span><br><span class="line"><span class="comment">        length: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>我们可以在 new 的时候直接向内部添加数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化的时候直接添加数据要以数组的形式添加</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="literal">true</span>, <span class="string">&#x27;hwllo&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set(7) &#123;1, 2, 3, &#123;…&#125;, ƒ, …&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Set</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(7)</span></span><br><span class="line"><span class="comment">        0: 1</span></span><br><span class="line"><span class="comment">        1: 2</span></span><br><span class="line"><span class="comment">        2: 3</span></span><br><span class="line"><span class="comment">        3: Object</span></span><br><span class="line"><span class="comment">        4: function () &#123;&#125;</span></span><br><span class="line"><span class="comment">        5: true</span></span><br><span class="line"><span class="comment">        6: &quot;hwllo&quot;</span></span><br><span class="line"><span class="comment">        length: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>看上去是一个类似数组的数据结构，但不是数组，就是 <strong>Set 数据结构</strong></p></li></ul><h4 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h4><ul><li><p><code>size</code>  ： 用来获取该数据结构中有多少数据的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="literal">true</span>, <span class="string">&#x27;hwllo&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ul><li>看上去是一个和数组数据类型差不多的数据结构</li><li>想要获取该数据类型中的成员数量，<strong>需要使用 size 属性</strong></li></ul></li><li><p><code>add</code> : 用来向该数据类型中追加数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">0</span>)</span><br><span class="line">s.<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">s.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>这个方法就是向该数据类型中追加数据使用的</li></ul></li><li><p><code>delete</code> : 是删除该数据结构中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">0</span>)</span><br><span class="line">s.<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">s.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear</code> ： 清空数据结构中的所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">0</span>)</span><br><span class="line">s.<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">s.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>has</code> ： 查询数据解构中有没有某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">0</span>)</span><br><span class="line">s.<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">s.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">0</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>forEach</code> : 用来遍历 Set 数据结构的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">0</span>)</span><br><span class="line">s.<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">s.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 0   &#123;&#125;   function () &#123;&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法介绍的差不多了，有一个问题出现了，那就是</p></li><li><p>我们的方法要么是添加，要么是删除，要么是查询，没有获取</p></li><li><p>因为要获取 Set 结构里面的数据需要借助一个 <code>...</code> 展开运算符</p></li><li><p>把他里面的东西都放到一个数组里面去，然后再获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">const</span> a = [...s]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// (6) [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">0</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...s][<span class="number">0</span>]) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>又一个问题出现了，new 的时候需要以数组的形式传递</p></li><li><p>然后获取的时候又要转成数组的形式获取</p></li><li><p>那么我为什么不一开始就定义数组，要这个 Set 数据类型干什么</p></li><li><p>这就不得不提到一个 Set 的特点</p></li><li><p><strong>Set 不允许存储重复的数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">4</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>)  <span class="comment">// 此时 size 是 4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li><p>Map 是一个构造函数，用来生成 Map 数据结构，它类似于对象，也是键值对的集合，但是“键”可以是非字符串， 初始化 Map 需要一个二维数组，或者直接初始化一个空的 Map： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Map</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(0)</span></span><br><span class="line"><span class="comment">        length: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>我们的对象中不管存储什么，key 一定是一个字符串类型</p></li><li><p>但是再 Map 里面，我们的 key 可以为任意数据类型</p></li><li><p>我们也管 Map 叫做 （值 &#x3D; 值 的数据类型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MAP 是 ES6 的一个新的数据类型</span></span><br><span class="line"><span class="comment">// MAP 是一个类似于 对象 的数据集合</span></span><br><span class="line"><span class="comment">// 对象是一个 键值对 的集合 key : value</span></span><br><span class="line"><span class="comment">// 对象的成员都是 键 = 值</span></span><br><span class="line"><span class="comment">// MAP 我们也叫做 值 = 值 的数据集合</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 先认识一下对象</span></span><br><span class="line"><span class="comment">// **对象的 key 都是字符串，并且不管设置什么，对象的 key 只能是字符串**</span></span><br><span class="line"><span class="comment">// 如果你想把引用数据类型当作对象的 key 来使用，那么再添加到对象中的时候</span></span><br><span class="line"><span class="comment">// 会自动把这个引用数据类型转换成字符串的形式</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">var</span> a = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">var</span> b = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">toString</span>())</span><br><span class="line">  </span><br><span class="line"> obj[a] = <span class="number">1</span></span><br><span class="line"> obj[b] = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// MAP 可以把一个引用数据类型当作 key 来使用</span></span><br><span class="line"><span class="comment">// 使用方式就是 new Map()</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="comment">//   初始化的时候就给一些值</span></span><br><span class="line"><span class="comment">//   传递的参数需要是一个数组</span></span><br><span class="line"><span class="comment">//   数组需要是一个 二维数组</span></span><br><span class="line"><span class="comment">//   二维数组里面的每一个小数组接受两个数据</span></span><br><span class="line"><span class="comment">//   这个两个数据可以是任意数据类型</span></span><br><span class="line"><span class="comment">//   这个两个数据第一个就是 key，第二个就是 value</span></span><br><span class="line"><span class="comment">// const m = new Map([[&#x27;name&#x27;, &#x27;Jack&#x27;], [&#123; a: 100 &#125;, 18]])</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用方法和属性-1"><a href="#常用方法和属性-1" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h3><ul><li><p><code>size</code> ： 用来获取该数据类型中数据的个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[&#123;&#125;, &#123;&#125;], [<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;], [<span class="literal">true</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete</code> : 用来删除该数据集合中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[&#123;&#125;, &#123;&#125;], [<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;], [<span class="literal">true</span>, <span class="number">1</span>]])</span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>set</code> : 用来向该数据集合中添加数据使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>get</code> : 用来获取该数据集合中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="literal">true</span>)) <span class="comment">// function () &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear</code> : 清除数据集合中的所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>has</code> ： 用来判断数据集合中是否存在某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="literal">true</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>forEach ：遍历 MAP 数据集合中的成员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const m = new Map()</span><br><span class="line">m.set(&#123; name: &#x27;Jack&#x27; &#125;, &#123; age: 18 &#125;)</span><br><span class="line">m.forEach(function (item) &#123;</span><br><span class="line">    console.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li><p>箭头函数是 ES6 里面一个简写函数的语法方式</p></li><li><p>重点： <strong>箭头函数只能简写函数表达式，不能简写声明式函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 不能简写</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法： <code>(函数的行参) =&gt; &#123; 函数体内要执行的代码 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="箭头函数的特殊性"><a href="#箭头函数的特殊性" class="headerlink" title="箭头函数的特殊性"></a>箭头函数的特殊性</h3><ul><li><p>箭头函数内部没有 this的指向，箭头函数的 this 是上下文的 this</p></li><li><p>也就是说箭头函数上一级的this是什么，那么箭头函数里面的this也就是什么。</p></li><li><p>箭头函数中的this和函数的调用没关系，和函数在哪里创建有关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在箭头函数定义的位置往上数，这一行是可以打印出 this 的</span></span><br><span class="line"><span class="comment">// 因为这里的 this 是 window</span></span><br><span class="line"><span class="comment">// 所以箭头函数内部的 this 就是 window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 这个位置是箭头函数的上一级，但是不能打印出 this</span></span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数内部的 this 是书写箭头函数的上一级一个可以打印出 this 的位置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;hello&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div1=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div1.<span class="property">onclick</span>= <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//div对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> <span class="title function_">fn</span>=(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">fn</span>()  <span class="comment">//div对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//        var fn= function () &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//            console.log(this)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//        &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//        fn()  //window对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>按照我们之前的 this 指向来判断，两个都应该指向 obj</li><li>但是 fun 因为是箭头函数，所以 this 不指向 obj，而是指向 fun 的外层，就是 window</li></ul></li><li><p>箭头函数内部没有 <code>arguments</code> 这个参数集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会打印一个伪数组 [1, 2, 3]</span></span><br><span class="line">obj.<span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会直接报错</span></span><br></pre></td></tr></table></figure></li><li><p>函数的行参只有一个的时候可以不写 <code>()</code> 其余情况必须写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一个行参，可以不写小括号&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两个或两个以上参数，必须写小括号&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数体只有一行代码的时候，可以不写 <code>&#123;&#125;</code> ，并且会自动 return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fun</span>: <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="number">10</span>)) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数传递参数的时候的默认值"><a href="#函数传递参数的时候的默认值" class="headerlink" title="函数传递参数的时候的默认值"></a>函数传递参数的时候的默认值</h3><ul><li><p>我们在定义函数的时候，有的时候需要一个默认值出现</p></li><li><p>就是当我不传递参数的时候，使用默认值，传递参数了就使用传递的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a = a || <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>在 ES6 中我们可以直接把默认值写在函数的行参位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>这个默认值的方式箭头函数也可以使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">a = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>箭头函数如果你需要使用默认值的话，那么一个参数的时候也需要写 （）</strong></li></ul></li></ul><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li>解构赋值：解析一个数据结构并赋值</li><li>作用：就是快速的从对象或者数组中取出成员的一个语法方式</li></ul><h4 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h4><ul><li><p>快速的从对象中获取成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的方法向得到对象中的成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = obj.<span class="property">name</span></span><br><span class="line"><span class="keyword">let</span> age = obj.<span class="property">age</span></span><br><span class="line"><span class="keyword">let</span> gender = obj.<span class="property">gender</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值的方式从对象中获取成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 &#123;&#125; 表示我要从 obj 这个对象中获取成员了</span></span><br><span class="line"><span class="comment">// name age gender 都得是 obj 中有的成员</span></span><br><span class="line"><span class="comment">// obj 必须是一个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, gender &#125; = obj</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的方法向得到对象中的成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义变量接收对象里面拿出来的成员</span></span><br><span class="line"><span class="keyword">let</span> username=obj.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构赋值的方式从对象中获取成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构赋值的时候可以给变量起一个别名</span></span><br><span class="line"><span class="keyword">let</span>&#123;<span class="attr">name</span>:username&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多级解构赋值</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span>,</span><br><span class="line">    <span class="attr">info</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1001</span>,</span><br><span class="line">        <span class="attr">class</span>:<span class="number">1913</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问id属性</span></span><br><span class="line"><span class="keyword">let</span>&#123;info&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"><span class="keyword">let</span>&#123;id&#125;=info</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line"><span class="comment">//可以书写在一行</span></span><br><span class="line"><span class="keyword">let</span>&#123;<span class="attr">info</span>:&#123;id&#125;&#125;=obj</span><br><span class="line"><span class="comment">//起别名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">info</span>:&#123;<span class="attr">id</span>:userId&#125;&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userId)</span><br></pre></td></tr></table></figure></li></ul><h4 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h4><ul><li><p>快速的从数组中获取成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用解构赋值的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面的 [] 表示要从 arr 这个数组中获取成员了</span></span><br><span class="line"><span class="comment">// a b c 分别对应这数组中的索引 0 1 2</span></span><br><span class="line"><span class="comment">// arr 必须是一个数组</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多级解构数组</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="keyword">let</span>[a,b,[c,d]]=arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><code>&#123;&#125;</code> 是专门解构对象使用的</li><li><code>[]</code> 是专门解构数组使用的</li><li>不能混用</li></ul><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><ul><li><p>ES5 中我们表示字符串的时候使用 <code>&#39;&#39;</code> 或者 <code>&quot;&quot;</code></p></li><li><p>在 ES6 中，我们还有一个东西可以表示字符串，就是 **&#96;&#96;**（反引号）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`hello world`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str) <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>和单引号、双引号的区别</p><ol><li><p>反引号可以换行书写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个单引号或者双引号不能换行，换行就会报错了</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这个就报错了</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hello </span></span><br><span class="line"><span class="string">world&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 是可以使用的</span></span><br></pre></td></tr></table></figure></li><li><p>反引号可以直接在字符串里面拼接变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 需要字符串拼接变量的时候</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span> + num + <span class="string">&#x27;world&#x27;</span> + num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接写在字符串里面不好使</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hellonumworldnum&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2) <span class="comment">// hellonumworldnum</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模版字符串拼接变量</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello<span class="subst">$&#123;num&#125;</span>world<span class="subst">$&#123;num&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// hello100world100</span></span><br></pre></td></tr></table></figure><ul><li>在 <strong>&#96;&#96;</strong> 里面的 <code>$&#123;&#125;</code> 就是用来书写变量的位置</li></ul></li></ol></li></ul><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><ul><li><p>ES6 里面新添加了一个运算符 <code>...</code> ，叫做展开运算符</p></li><li><p>作用是把数组展开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></li><li><p>合并数组的时候可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure></li><li><p>也可以合并对象使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  ...obj,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br></pre></td></tr></table></figure></li><li><p>在函数传递参数的时候也可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(...arr)</span><br><span class="line"><span class="comment">// 等价于 fn(1, 2, 3)</span></span><br></pre></td></tr></table></figure><h3 id="对象的简易书写"><a href="#对象的简易书写" class="headerlink" title="对象的简易书写"></a>对象的简易书写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age=<span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> sex=<span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="comment">//当定义对象时，如果里面的属性名和属性值一样，那么可以省略属性值不写</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">name,</span><br><span class="line">age,</span><br><span class="line">sex,</span><br><span class="line"><span class="comment">//obj里的fn是箭头函数</span></span><br><span class="line"><span class="attr">fn</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//obj里面的fun是一个函数表达式</span></span><br><span class="line"><span class="attr">fun</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//在对象中声明了一个成员叫作f，值为function()&#123;&#125;，不是箭头函数</span></span><br><span class="line"><span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><ul><li><p>将含有length属性，以数字为key(索引)的对象、类数组转成真正的数组。 </p></li><li><p>Array.from(obj, map函数); </p></li><li><p>第一个参数为要转换的对象，第二个参数为一个函数，可选，类似map函数。 </p></li><li><p>map函数 : 遍历数组–操作数组–返回数组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>( <span class="function">(<span class="params">item</span>) =&gt;</span> &#123; <span class="keyword">return</span> item*<span class="number">2</span> &#125; );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( newArr );</span><br><span class="line">元素集合：</span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line">lis.<span class="title function_">push</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line"></span><br><span class="line">将lis集合转成 数组：</span><br><span class="line">lis = <span class="title class_">Array</span>.<span class="title function_">from</span>(lis);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( lis )</span><br><span class="line">lis.<span class="title function_">push</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line"></span><br><span class="line">将对象转成 数组：</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span> : <span class="number">10</span> ,</span><br><span class="line">    <span class="string">&quot;1&quot;</span> : <span class="number">20</span> ,</span><br><span class="line">    <span class="string">&quot;2&quot;</span> : <span class="number">30</span> ,</span><br><span class="line">    <span class="string">&quot;length&quot;</span> : <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>( obj );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( arr );</span><br><span class="line"></span><br><span class="line">第二个参数是一个匿名函数 实现的是map功能：</span><br><span class="line"><span class="keyword">var</span> newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>( obj , <span class="function">(<span class="params">item</span>) =&gt;</span> &#123; <span class="keyword">return</span> item*<span class="number">2</span>; &#125; )</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( newArr );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5 的对象属性名都是字符串，这容易造成属性名的冲突。</span></span><br><span class="line"><span class="comment">//ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在创建symbol类型数据时的参数只是作为标识使用，直接使用 Symbol() 也是可以的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;xm&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( s );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="keyword">typeof</span> s );</span><br><span class="line"></span><br><span class="line">对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 <span class="title class_">Symbol</span> 类型。</span><br><span class="line"><span class="keyword">var</span> xm = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [xm] : <span class="string">&quot;小明&quot;</span> <span class="comment">//对象的属性是Symbol类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Symbol类型的属性 取值是 必须 obj[xm] 不能用obj.xm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj[xm] );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xm&#x27;</span>,</span><br><span class="line">    [s4]: <span class="string">&#x27;xh&#x27;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;age&#x27;</span>)]: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &quot;xm&quot;, Symbol(): &quot;xh&quot;, Symbol(age): 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// xm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[s4]); <span class="comment">// xh 访问对象的Symbol属性的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="title class_">Symbol</span>(<span class="string">&#x27;age&#x27;</span>)]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改symbol类型的属性</span></span><br><span class="line">obj[xm] = <span class="string">&quot;web前端&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj[xm] );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的Symbol属性不会被遍历出来（可以用来保护对象的某个属性）</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;sname&quot;</span>:<span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skill&quot;</span> : <span class="string">&quot;web&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> age = <span class="title class_">Symbol</span>();</span><br><span class="line">obj[age] = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj );</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> key <span class="keyword">in</span> obj )&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot; -&gt; &quot;</span> + obj[key] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">getOwnPropertySymbols</span> 方法会返回当前对象的所有 <span class="title class_">Symbol</span> 属性，返回数组</span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [id]: <span class="string">&#x27;007&#x27;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>)]: <span class="string">&#x27;xiaocuo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[Symbol(id),Symbol(name)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[arr[<span class="number">0</span>]]);  <span class="comment">//&#x27;007&#x27;  访问对象的Symbol属性的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//虽然这样保证了Symbol的唯一性，但我们不排除希望能够多次使用同一个symbol值的情况。</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( s1 === s2 ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//官方提供了全局注册并登记的方法：</span></span><br><span class="line"><span class="keyword">let</span> name1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//检测到未创建后新建 </span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//检测到已创建后返回 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1 === name2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过symbol对象获取到参数值：</span></span><br><span class="line"><span class="keyword">let</span> name1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> name2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;丽丽&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(name1));  <span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(name2)); <span class="comment">// &#x27;丽丽&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>art-template前端模板引擎</title>
      <link href="/posts/3762f4c.html"/>
      <url>/posts/3762f4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h2 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><pre><code>+ 帮助我们快速渲染页面+ 三体分离(结构 样式 行为)+ 一般都是第三方文件引入使用</code></pre><h3 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h3><pre><code>+ art-template 前后端都能用+ underscroll 后端js不能用+ e.js 后端js不能用+ template 后端js不能用</code></pre><h2 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h2><pre><code>+ 特点  1. html 和 js 代码分离  2. 有自己独立的语法，但也可以使用原生js 语法+ 安装  - 方法1、npm安装(require(&#39;art-template&#39;))    + 在要使用的项目文件夹下安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template</span><br></pre></td></tr></table></figure>  - 方法2、浏览器实时编译(引入外部文件template-web.js)    + 从github下载放在lib文件夹里面的template-web.js    ``` html        &lt;link rel=&quot;stylesheet&quot; href=&quot;template-web.js&quot;&gt;    ```  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> art-template </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_RegExp</title>
      <link href="/posts/ad65cb4e.html"/>
      <url>/posts/ad65cb4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><ul><li><p>正则表达式，又名 “规则表达式”</p></li><li><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。 </p></li><li><p>正则表达式通常用来检索、替换那些符合某个规则的文本。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str1)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>上面的变量 <code>reg</code> 就是定制好的规则</li><li>检测 <code>str1</code> 这个字符串的时候，符合规则</li><li>检测 <code>str2</code> 这个字符串的时候，不符合规则</li></ul></li></ul><h2 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h2><ul><li>想制定 “规则”，必须要按照人家要求的方式来制定</li><li>把一些字母和符号写在 <code>//</code> 中间的东西，叫做正则表达式，比如 <code>/abcdefg/</code></li><li>创建正则表达式有两个方式 <strong>字面量</strong> 和 <strong>构造函数创建</strong></li></ul><h3 id="字面量创建"><a href="#字面量创建" class="headerlink" title="字面量创建"></a>字面量创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面就是字面量创建一个正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abcdefg/</span></span><br></pre></td></tr></table></figure><ul><li>这个正则表达式就可以去检测字符串了</li></ul><h3 id="构造函数创建"><a href="#构造函数创建" class="headerlink" title="构造函数创建"></a>构造函数创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">构造函数方式:<span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern, attributes);</span><br><span class="line">例：<span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line">构造函数中的正则可以是常量字符串或一个<span class="variable constant_">JS</span>变量</span><br><span class="line"></span><br><span class="line">pattern 为一个字符串或匹配规则</span><br><span class="line">attributes 为可选字符串，包含属性g、i 和 m</span><br><span class="line">    g：代表全局匹配 (继续往下匹配)</span><br><span class="line">    i：代表不区分大小写匹配</span><br><span class="line">    m：代表多行匹配（针对^和$模式）</span><br></pre></td></tr></table></figure><ul><li>使用构造函数方式创建的和字面量创建的，得到的结果一样</li></ul><h2 id="正则表达式里面的符号"><a href="#正则表达式里面的符号" class="headerlink" title="正则表达式里面的符号"></a>正则表达式里面的符号</h2><ul><li>知道了怎么创建一个正则表达式以后，我们就来详细的说一下正则表达式里面涉及到的一些符号了</li></ul><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><p><code>.</code> ： 匹配非换行的任意字符</p></li><li><p><code>\</code> ： 转译符号，把有意义的 <strong>符号</strong> 转换成没有意义的 <strong>字符</strong>，把没有意义的 <strong>字符</strong> 转换成有意义的 <strong>符号</strong></p></li><li><p><code>\s</code> ： 匹配空白字符（空格&#x2F;制表符&#x2F;…）</p></li><li><p><code>\S</code> ： 匹配非空白字符</p></li><li><p><code>\d</code> ： 匹配数字</p></li><li><p><code>\D</code> ： 匹配非数字</p></li><li><p><code>\w</code> ： 匹配数字字母下划线</p></li><li><p><code>\W</code> ： 匹配非数字字母下划线</p></li><li><p>有了元字符我们就可以简单的制定一些规则了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a b&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;#@$&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul><li><p><code>*</code> ： 前一个内容重复至少 0 次，也就是可以出现 <strong>0 ～ 正无穷</strong> 次</p></li><li><p><code>+</code> ： 前一个内容重复至少 1 次，也就是可以出现 <strong>1 ～ 正无穷</strong> 次</p></li><li><p><code>?</code> ： 前一个内容重复 0 或者 1 次，也就是可以出现 <strong>0 ～ 1</strong> 次</p></li><li><p><code>&#123;n&#125;</code> ： 前一个内容重复 n 次，也就是必须出现 <strong>n</strong> 次</p></li><li><p><code>&#123;n,&#125;</code> ： 前一个内容至少出现 n 次，也就是出现 <strong>n ～ 正无穷</strong> 次</p></li><li><p><code>&#123;n,m&#125;</code> ： 前一个内容至少出现 n 次至多出现 m 次，也就是出现 <strong>n ～ m</strong> 次</p></li><li><p>限定符是配合元字符使用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 0 ～ 正无穷次都可以</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 1 ～ 正无穷次都可以</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 0 ~ 1 次都可以</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d?/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字必须出现 3 次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 3 ～ 正无穷次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&#x27;abcd1234567&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str4)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字只能出现 3 ～ 5 次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,5&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&#x27;abc12345&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str4)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><ul><li><p><code>^</code> ： 表示开头</p></li><li><p><code>$</code> ： 表示结尾</p></li><li><p>边界符是限定字符串的开始和结束的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面表示从开头到结尾只能有数字，并且出现 3 ～ 5 次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,5&#125;$/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str3)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str4)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str5)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str6)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><ul><li><p><code>()</code> ： 限定一组元素</p></li><li><p><code>[]</code> ： 字符集合，表示写在 <code>[]</code> 里面的任意一个都行</p></li><li><p><code>[^]</code> ： 反字符集合，表示写在 <code>[^]</code> 里面之外的任意一个都行</p></li><li><p><code>-</code> ： 范围，比如 <code>a-z</code> 表示从字母 a 到字母 z 都可以</p></li><li><p><code>|</code> ： 或，正则里面的或 <code>a|b</code> 表示字母 a 或者 b 都可以</p></li><li><p>现在我们就可以把若干符号组合在一起使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是一个简单的邮箱验证</span></span><br><span class="line"><span class="comment">// 非_$开头，任意字符出现至少6次，一个@符号，(163|126|qq|sina)中的任意一个，一个点，(com|cn|net)中的任意一个</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[^_$].&#123;6,&#125;@(163|126|qq|sina)\.(com|cn|net)$/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="标示符"><a href="#标示符" class="headerlink" title="标示符"></a>标示符</h3><ul><li><code>i</code> ： 表示忽略大小写<ul><li>这个 i 是写在正则的最后面的</li><li><code>/\w/i</code></li><li>就是在正则匹配的时候不去区分大小写</li></ul></li><li><code>g</code> ： 表示全局匹配<ul><li>这个 g 是写在正则的最后面的</li><li><code>/\w/g</code></li><li>就是全局匹配字母数字下划线</li></ul></li></ul><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><ul><li>正则提供了一些方法给我们使用</li><li>用来检测和捕获字符串中的内容的</li></ul><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ul><li><p><code>test</code> 是用来检测字符串是否符合我们正则的标准</p></li><li><p>语法： <code>正则.test(字符串)</code></p></li><li><p>返回值： boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\d+/</span>.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\d+/</span>.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><ul><li><p><code>exec</code> 是把字符串中符合条件的内容捕获出来</p></li><li><p>语法： <code>正则.exec(字符串)</code></p></li><li><p>返回值： 把字符串中符合正则要求的第一项以及一些其他信息，以数组的形式返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123world456你好789&#x27;</span></span><br><span class="line"><span class="keyword">var</span> res = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[&quot;123&quot;, index: 5, input: &quot;hello123world456你好789&quot;, groups: undefined]</span></span><br><span class="line"><span class="comment">    0: &quot;123&quot;</span></span><br><span class="line"><span class="comment">    groups: undefined</span></span><br><span class="line"><span class="comment">    index: 5</span></span><br><span class="line"><span class="comment">    input: &quot;hello123world456你好789&quot;</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">  __proto__: Array(0)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>数组第 0 项就是匹配到的字符串内容</li><li>index 属性表示从字符串的索引几开始是匹配的到字符串</li></ul></li></ul><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><ul><li><p>compile： 该方法可以重编辑指定的正则表达式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var num=&#x27;13520006789&#x27;;</span><br><span class="line">var reg=/^13[4-9]\d&#123;8&#125;$/g;</span><br><span class="line">console.log(reg.test(num));</span><br><span class="line">reg.compile(/^13[0-3][0-9]&#123;8&#125;$/,&#x27;g&#x27;);//修改正则</span><br><span class="line">console.log(reg.test(num));//false</span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><ul><li>字符串中有一些方法也是可以和正则一起使用的</li></ul><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><ul><li><p><code>search</code> 是查找字符串中是否有满足正则条件的内容</p></li><li><p>语法： <code>字符串.search(正则)</code></p></li><li><p>返回值 ： 有的话返回开始索引，没有返回 -1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(reg)) <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">search</span>(reg)) <span class="comment">// -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><ul><li><p><code>match</code> 找到字符串中符合正则条件的内容返回</p></li><li><p>语法： <code>字符串.match(正则)</code></p></li><li><p>返回值 ： </p><ul><li>没有标示符 g 的时候，是和 exec 方法一样</li><li>有标示符 g 的时候，是返回一个数组，里面是匹配到的每一项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123world456&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg)) </span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 5, input: &quot;hello123wor456&quot;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">match</span>(reg)) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123world456&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg)) </span><br><span class="line"><span class="comment">// [&quot;123&quot;, &quot;456&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">match</span>(reg)) <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><ul><li><p><code>replace</code> 是将字符串中满足正则条件的字符串替换掉</p></li><li><p>语法： <code>字符串.replace(正则，要替换的字符串)</code></p></li><li><p>返回值 ： 替换后的字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123world456&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg,<span class="string">&#x27;666&#x27;</span>)) <span class="comment">// hello666world456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">replace</span>(reg)) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello123world456&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg,<span class="string">&#x27;666&#x27;</span>)) <span class="comment">// hello666world666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">replace</span>(reg)) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常见正则表达式"><a href="#常见正则表达式" class="headerlink" title="常见正则表达式"></a>常见正则表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">过滤HTML标签</span><br><span class="line">尖括号里是除了尖括号之外其他字符  /&lt;[^&lt;&gt;]+&gt;/g</span><br><span class="line"></span><br><span class="line">匹配邮政编码</span><br><span class="line">开头非0的6位数字  /^[1-9]\d&#123;5&#125;$/</span><br><span class="line"></span><br><span class="line">文件格式检测</span><br><span class="line">文件格式结尾为 .格式   </span><br><span class="line">/\.(png|jpe?g|gif)$/    </span><br><span class="line">/\.(mp4|webm|ogg|mp3|wav)$/</span><br><span class="line"></span><br><span class="line">手机号</span><br><span class="line">/^(1|\+861)[3-8]&#123;1&#125;\d&#123;9&#125;$/</span><br><span class="line"></span><br><span class="line">身份证</span><br><span class="line">身份证号码为15位或者18位，15位为全数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X </span><br><span class="line">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span><br><span class="line"></span><br><span class="line">中文检测</span><br><span class="line">/[\u4e00-\u9fa5]+/g</span><br><span class="line"></span><br><span class="line">QQ号验证  </span><br><span class="line">/^[1-9]\d&#123;4,10&#125;$/</span><br><span class="line"></span><br><span class="line">座机号码</span><br><span class="line">010-86123456-2345</span><br><span class="line">023-67622000-02</span><br><span class="line">0755-66608483</span><br><span class="line">开头为0，后面是2或三位数字加上 - 开头为非零的八位数字，结尾是 - 加1到4位数字的分机号</span><br><span class="line">(0\d&#123;2,3&#125;-)?[1-9]\d&#123;7,8&#125;(-\d&#123;1,4&#125;)?</span><br><span class="line"></span><br><span class="line">邮箱格式</span><br><span class="line">简单验证  /^\w+@[a-z0-9]+\.[a-z]+$/</span><br><span class="line">具体验证  /^\w&#123;2,18&#125;@[0-9a-z]&#123;1,10&#125;(\.[a-z]&#123;2,3&#125;)&#123;1,2&#125;$/</span><br><span class="line"></span><br><span class="line">删除多余空格  </span><br><span class="line"> str.replace(/\s+/,&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">删除首尾空格</span><br><span class="line">str.replace(/^\s+/,&#x27;&#x27;);</span><br><span class="line">str.replace(/\s+$/,&#x27;&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_EVENT</title>
      <link href="/posts/d7924347.html"/>
      <url>/posts/d7924347.html</url>
      
        <content type="html"><![CDATA[<h1 id="EVENT（上）"><a href="#EVENT（上）" class="headerlink" title="EVENT（上）"></a>EVENT（上）</h1><ul><li>之前我们简单的了解过一些事件，比如 <code>onclick</code> &#x2F; <code>onload</code> &#x2F; <code>onscroll</code> &#x2F; …</li><li>今天开始，我们详细的学习一些 <strong>事件</strong></li></ul><h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><ul><li><p>一个事件由什么东西组成</p><ul><li>触发谁的事件：事件源</li><li>触发什么事件：事件类型</li><li>触发以后做什么：事件处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 谁来触发事件 =&gt; oDiv =&gt; 这个事件的事件源就是 oDiv</span></span><br><span class="line"><span class="comment">// 触发什么事件 =&gt; onclick =&gt; 这个事件类型就是 click</span></span><br><span class="line"><span class="comment">// 触发之后做什么 =&gt; function () &#123;&#125; =&gt; 这个事件的处理函数</span></span><br></pre></td></tr></table></figure><ul><li>我们想要在点击 div 以后做什么事情，就把我们要做的事情写在事件处理函数里面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你点击了 div&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当我们点击 div 的时候，就会执行事件处理函数内部的代码</li><li>每点击一次，就会执行一次事件处理函数</li></ul></li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ul><li><p>什么是事件对象？</p></li><li><p>就是当你触发了一个事件以后，对该事件的一些描述信息</p></li><li><p>例如：</p><ul><li>你触发一个点击事件的时候，你点在哪个位置了，坐标是多少</li><li>你触发一个键盘事件的时候，你按的是哪个按钮</li><li>…</li></ul></li><li><p>每一个事件都会有一个对应的对象来描述这些信息，我们就把这个对象叫做 <strong>事件对象</strong></p></li><li><p>浏览器给了我们一个 <strong>黑盒子</strong>，叫做 <code>window.event</code>，就是对事件信息的所有描述</p><ul><li>比如点击事件</li><li>你点在了 <code>0，0</code> 位置，那么你得到的这个事件对象里面对应的就会有这个点位的属性</li><li>你点在了 <code>10, 10</code> 位置，那么你得到的这个事件对象里面对应的就会有这个点位的属性</li><li>…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个玩意很好用，但是一般来说，好用的东西就会有 <strong>兼容性问题</strong></p></li><li><p>在 <code>IE低版本</code> 里面这个东西好用，但是在 <code>高版本IE</code> 和 <code>Chrome</code> 里面不好使了</p></li><li><p>我们就得用另一种方式来获取 <strong>事件对象</strong></p></li><li><p>在每一个事件处理函数的行参位置，默认第一个就是 <strong>事件对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// e 就是和 IE 的 window.event 一样的东西</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>综上所述，我们以后在每一个事件里面，想获取事件对象的时候，都用兼容写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">X</span>轴坐标点信息)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">Y</span>轴坐标点信息)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="点击事件的光标坐标点获取"><a href="#点击事件的光标坐标点获取" class="headerlink" title="点击事件的光标坐标点获取"></a>点击事件的光标坐标点获取</h2><ul><li>刚才即然说了，可以获取到坐标点，那么接下来我们就学习一下怎么获取坐标点</li><li>我们的每一个点击事件的坐标点都不是一对，因为要有一个相对的坐标系</li><li>例如：<ul><li>相对事件源（你点击的元素）</li><li>相对页面</li><li>相对浏览器窗口</li><li>…</li></ul></li><li>因为都不一样，所以我们获取的 <strong>事件对象</strong> 里面的属性也不一样</li></ul><h3 id="相对于你点击的元素来说"><a href="#相对于你点击的元素来说" class="headerlink" title="相对于你点击的元素来说"></a>相对于你点击的元素来说</h3><ul><li><p><code>offsetX</code> 和 <code>offsetY</code></p></li><li><p>是相对于你点击的元素的边框内侧开始计算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册点击事件</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件对象兼容写法</span></span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetY</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://imgtu.com/i/6cRIKS"><img src="https://s3.ax1x.com/2021/03/17/6cRIKS.jpg" alt="6cRIKS.jpg"></a></p><h3 id="相对于浏览器窗口你点击的坐标点"><a href="#相对于浏览器窗口你点击的坐标点" class="headerlink" title="相对于浏览器窗口你点击的坐标点"></a>相对于浏览器窗口你点击的坐标点</h3><ul><li><p><code>clientX</code> 和 <code>clientY</code></p></li><li><p>是相对于浏览器窗口来计算的，不管你页面滚动到什么情况，都是根据窗口来计算坐标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册点击事件</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件对象兼容写法</span></span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://imgtu.com/i/6cRHEj"><img src="https://s3.ax1x.com/2021/03/17/6cRHEj.jpg" alt="6cRHEj.jpg"></a></p><h3 id="相对于页面你点击的坐标点"><a href="#相对于页面你点击的坐标点" class="headerlink" title="相对于页面你点击的坐标点"></a>相对于页面你点击的坐标点</h3><ul><li><p><code>pageX</code> 和 <code>pageY</code></p></li><li><p>是相对于整个页面的坐标点，不管有没有滚动，都是相对于页面拿到的坐标点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册点击事件</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件对象兼容写法</span></span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://imgtu.com/i/6cR4v8"><img src="https://s3.ax1x.com/2021/03/17/6cR4v8.jpg" alt="6cR4v8.jpg"></a></p><ul><li><p>根据页面左上角来说</p><ul><li>margin-left 是 30</li><li>左边框是 10</li><li>左右 padding 各是 20</li><li>内容区域是 300</li><li><strong>pageX : 300 + 20 + 20 + 10 + 30 &#x3D; 380</strong></li><li>margin-top 是 20</li><li>上边框是 10</li><li>上下 padding 各是 20</li><li>内容区域是 300</li><li><strong>pageY : 300 + 20 + 20 + 10 + 20 &#x3D; 270</strong></li></ul></li></ul><p>注：</p><ul><li>X Y 一般出现在坐标系 <ul><li>描述一个点位 </li><li>当你看到 X Y 这一类的东西的时候 </li><li>和元素没有关系，和鼠标的点有关系 </li><li>就是在事件对象里面获取</li></ul></li><li>width height left top 一般出现在距离或者位置 <ul><li>描述一个距离或者位置关系 </li><li>一般出现在元素身上</li></ul></li></ul><h2 id="点击按键信息（了解）"><a href="#点击按键信息（了解）" class="headerlink" title="点击按键信息（了解）"></a>点击按键信息（了解）</h2><ul><li>我们的鼠标一般都有两个按键，一个左键一个右键</li><li>我们的事件对象里面也有这个信息，确定你点击的是左键还是右键</li><li>我们使用 <code>事件对象.button</code> 来获取信息</li><li><code>0</code> 为鼠标左键，<code>2</code> 为鼠标右键</li></ul><h2 id="常见的事件（了解）"><a href="#常见的事件（了解）" class="headerlink" title="常见的事件（了解）"></a>常见的事件（了解）</h2><ul><li>我们在写页面的时候经常用到的一些事件</li><li>大致分为几类，<strong>浏览器事件</strong> &#x2F; <strong>鼠标事件</strong> &#x2F; <strong>键盘事件</strong> &#x2F; <strong>表单事件</strong> &#x2F; <strong>触摸事件</strong></li><li>不需要都记住，但是大概要知道</li></ul><h3 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h3><ul><li><code>load</code> ： 页面全部资源加载完毕</li><li><code>scroll</code> ： 浏览器滚动的时候触发</li><li><code>resize</code> ： 浏览器窗口改变事件</li><li>…</li></ul><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li><code>click</code> ：点击事件</li><li><code>dblclick</code> ：双击事件</li><li><code>contextmenu</code> ： 右键单击事件</li><li><code>mousedown</code> ：鼠标左键按下事件</li><li><code>mouseup</code> ：鼠标左键抬起事件</li><li><code>mousemove</code> ：鼠标移动</li><li><code>mouseover</code> ：鼠标移入事件</li><li><code>mouseout</code> ：鼠标移出事件</li><li><code>mouseenter</code> ：鼠标移入事件（不冒泡）</li><li><code>mouseleave</code> ：鼠标移出事件（不冒泡）</li><li><code>selectstart</code>：选中事件（不被 input 和 textarea 标签支持 ）</li><li><code>select</code>：选中事件（支持 input 和 textarea 标签）</li><li>…</li></ul><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><code>keyup</code> ： 键盘抬起事件</li><li><code>keydown</code> ： 键盘按下事件</li><li><code>keypress</code> ： 键盘按下再抬起事件（键盘产生可打印字符事件）</li><li>…</li></ul><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><ul><li><code>change</code> : 表单内容改变事件</li><li><code>input</code> : 表单内容输入事件</li><li><code>submit</code> : 表单提交事件</li><li><code>focus</code> ：获得焦点事件</li><li><code>blur</code> ：失去焦点事件</li><li>…</li></ul><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><ul><li><code>touchstart</code> ： 触摸开始事件</li><li><code>touchend</code> ： 触摸结束事件</li><li><code>touchmove</code> ： 触摸移动事件</li><li>…</li></ul><h2 id="键盘事件-1"><a href="#键盘事件-1" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul><li><p>刚才了解了一下鼠标事件，现在来聊聊键盘事件</p></li><li><p>我们在键盘事件里面最主要的就是要做两个事情</p><ul><li>判断点击的是哪个按键</li><li>有没有组合按键，<strong>shift + a</strong> &#x2F; <strong>ctrl + b</strong> &#x2F; …</li></ul></li><li><p>我们先要明确一个问题，就是是不是所有元素都可以绑定键盘事件</p><ul><li>我们说事件有一个关键的东西是，该事件是由谁来触发的</li><li>一个 div 元素在页面上，我怎么能让一个键盘事件触发在 div 上</li><li>所以说，我们一般只给能在页面上选中的元素（表单元素） 和 <code>document</code> 来绑定键盘事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// code.. &#125; </span></span><br><span class="line">oInput.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// code.. &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="确定按键"><a href="#确定按键" class="headerlink" title="确定按键"></a>确定按键</h3><ul><li><p>我们的键盘上每一个按键都有一个自己独立的编码</p></li><li><p>我们就是靠这个编码来确定我们按下的是哪个按键的</p></li><li><p>我们通过 <code>事件对象.keyCode</code> 或者 <code>事件对象.which</code> 来获取</p></li><li><p>为什么要有两个呢，是因为 FireFox2.0 不支持 <code>keycode</code> 所以要用 <code>which</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">keyup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 事件对象的兼容写法</span></span><br><span class="line">  e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取键盘码的兼容写法</span></span><br><span class="line">  <span class="keyword">var</span> keyCode = e.<span class="property">keyCode</span> || e.<span class="property">which</span></span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyCode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="常见的键盘码（了解）"><a href="#常见的键盘码（了解）" class="headerlink" title="常见的键盘码（了解）"></a>常见的键盘码（了解）</h4><ul><li>8： 删除键（delete）</li><li>9： 制表符（tab）</li><li>13： 回车键（ebter）</li><li>16： 上档键（shift）</li><li>17： ctrl 键</li><li>18： alt 键</li><li>27： 取消键（esc）</li><li>32： 空格键（space）</li><li>…</li></ul><h3 id="组合按键"><a href="#组合按键" class="headerlink" title="组合按键"></a>组合按键</h3><ul><li><p>组合案件最主要的就是 <code>alt</code> &#x2F; <code>shift</code> &#x2F; <code>ctrl</code> 三个按键</p></li><li><p>在我点击某一个按键的时候判断一下这三个键有没有按下，有就是组合了，没有就是没有组合</p></li><li><p>事件对象里面也为我们提供了三个属性</p><ul><li><code>altKey</code> ：alt 键按下得到 true，否则得到 false</li><li><code>shiftKey</code> ：shift 键按下得到 true，否则得到 false</li><li><code>ctrlKey</code> ：ctrl 键按下得到 true，否则得到 false</li></ul></li><li><p>我们就可以通过这三个属性来判断是否按下了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  keyCode = e.<span class="property">keyCode</span> || e.<span class="property">which</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">altKey</span> &amp;&amp; keyCode === <span class="number">65</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你同时按下了 alt 和 a&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件的绑定方式"><a href="#事件的绑定方式" class="headerlink" title="事件的绑定方式"></a>事件的绑定方式</h2><ul><li><p>我们现在给一个注册事件都是使用 <code>onxxx</code> 的方式</p></li><li><p>但是这个方式不是很好，只能给一个元素注册一个相同类型的事件</p></li><li><p>一旦写了第二个事件，那么第一个就被覆盖了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oDiv.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当你点击的时候，只会执行第二个，第一个就没有了</li></ul></li><li><p>我们还有一种事件监听的方式去给元素绑定事件</p></li><li><p>使用 <code>addEventListener</code> 的方式添加</p><ul><li>这个方法不兼容，在 IE 里面要使用 <code>attachEvent</code></li></ul></li></ul><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><ul><li><p><code>addEventListener</code> :  非 IE 7 8 下使用</p></li><li><p>语法： <code>元素.addEventListener(&#39;事件类型&#39;， 事件处理函数， 冒泡还是捕获)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><ul><li>当你点击 div 的时候，两个函数都会执行，并且会按照你注册的顺序执行</li><li>先打印 <code>我是第一个事件</code> 再打印 <code>我是第二个事件</code></li><li>注意： <strong>事件类型的时候不要写 on，点击事件就是 click，不是 onclick</strong></li></ul></li><li><p><code>attachEvent</code> ：IE 7 8 下使用</p></li><li><p>语法： <code>元素.attachEvent(&#39;事件类型&#39;， 事件处理函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oDiv.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第一个事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">oDiv.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是第二个事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当你点击 div 的时候，两个函数都会执行，并且会按照你注册的顺序倒叙执行</li><li>先打印 <code>我是第二个事件</code> 再打印 <code>我是第一个事件</code></li><li>注意： <strong>事件类型的时候要写 on，点击事件就行 onclick</strong></li></ul></li><li><p><code>removeEventListener </code>:  非 IE 7 8 下使用</p></li><li><p>语法：元素.removeEventListener(‘事件类型’， 事件处理函数， 冒泡还是捕获) </p></li><li><p><code>detachEvent</code>：IE 7 8 下使用</p></li><li><p>语法：<code>元素.detachEvent(&#39;事件类型&#39;， 事件处理函数)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = document.getElementById(&quot;myDIV&quot;);</span><br><span class="line">if (x.removeEventListener) &#123;                   // // 所有浏览器，除了 IE 8 及更早IE版本</span><br><span class="line">    x.removeEventListener(&quot;mousemove&quot;, myFunction);</span><br><span class="line">&#125; else if (x.detachEvent) &#123;                   // IE 8 及更早IE版本</span><br><span class="line">    x.detachEvent(&quot;onmousemove&quot;, myFunction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="两个方式的区别"><a href="#两个方式的区别" class="headerlink" title="两个方式的区别"></a>两个方式的区别</h3><ul><li>注册事件的时候事件类型参数的书写<ul><li><code>addEventListener</code> ： 不用写 on</li><li><code>attachEvent</code> ： 要写 on</li></ul></li><li>参数个数<ul><li><code>addEventListener</code> ： 一般是三个常用参数</li><li><code>attachEvent</code> ： 两个参数</li></ul></li><li>执行顺序<ul><li><code>addEventListener</code> ： 顺序注册，顺序执行</li><li><code>attachEvent</code> ： 顺序注册，倒叙执行</li></ul></li><li>适用浏览器<ul><li><code>addEventListener</code> ： 非 IE 7 8 的浏览器</li><li><code>attachEvent</code> ： IE 7 8 浏览器</li></ul></li></ul><h1 id="EVENT（下）"><a href="#EVENT（下）" class="headerlink" title="EVENT（下）"></a>EVENT（下）</h1><ul><li><p>今天来聊一聊事件的执行机制</p></li><li><p>什么是事件的执行机制呢？</p><ul><li><p>思考一个问题？</p></li><li><p>当一个大盒子嵌套一个小盒子的时候，并且两个盒子都有点击事件</p></li><li><p>你点击里面的小盒子，外面的大盒子上的点击事件要不要执行</p></li></ul></li></ul><p><a href="https://imgtu.com/i/6cRoDg"><img src="https://s3.ax1x.com/2021/03/17/6cRoDg.jpg" alt="6cRoDg.jpg"></a></p><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><ul><li>事件传播也称为事件流，指的是事件的流向，事件的执行顺序。 </li><li>就像上面那个图片一样，我们点击在红色盒子身上的同时，也是点击在了粉色盒子上</li><li>这个是既定事实，那么两个盒子的点击事件都会触发</li><li>这个就叫做 <strong>事件的传播</strong><ul><li><strong>当元素触发一个事件的时候，其父元素也会触发相同类型的事件，父元素的父元素也会触发相同类型的事件</strong></li><li>就像上面的图片一样</li><li>点击在红色盒子上的时候，会触发红色盒子的点击事件</li><li>也是点击在了粉色的盒子上，也会触发粉色盒子的点击事件</li><li>也是点击在了 body 上，也会触发 body 的点击事件</li><li>也是点击在了 html 上，也会触发 html 的点击事件</li><li>也是点击在了 document 上，也会触发 document 的点击事件</li><li>也是点击在了 window 上，也会触发 window 的点击事件</li><li>也就是说，页面上任何一个元素触发事件，都会一层一层最终导致 window 的相同事件触发，前提是各层级元素得有注册相同的事件，不然不会触发</li></ul></li><li>在事件传播的过程中，有一些注意的点：<ol><li>只会传播同类事件</li><li>只会从点击元素开始按照 html 的结构逐层向上元素的事件会被触发</li><li>内部元素不管有没有该事件，只要上层元素有该事件，那么上层元素的事件就会被触发</li></ol></li><li>到现在，我们已经了解了事件的传播，我们再来思考一个问题<ul><li>事件确实会从自己开始，到 window 的所有相同事件都会触发</li><li>是因为我们点在自己身上，也确实逐层的点在了直至 window 的每一个元素身上</li><li>但是到底是先点在自己身上，还是先点在了 window 身上呢</li><li>先点在自己身上，就是先执行自己的事件处理函数，逐层向上最后执行 window 的事件处理函数</li><li>反之，则是先执行 window 的事件处理函数，逐层向下最后执行自己身上的事件处理函数</li></ul></li></ul><h2 id="冒泡、捕获、目标"><a href="#冒泡、捕获、目标" class="headerlink" title="冒泡、捕获、目标"></a>冒泡、捕获、目标</h2><ul><li>我们刚才聊过了，每一个事件，都是有可能从自己到 window ，有可能要执行多个同类型事件</li><li>那么这个执行的顺序就有一些说法了</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>你是点击在哪个元素身上了，那么这个事件的 <strong>目标</strong> 就是什么</li></ul><h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><ul><li>就是从事件 <strong>目标</strong> 的事件处理函数开始，依次向外，直到 window 的事件处理函数触发</li><li>也就是从下向上的执行事件处理函数</li></ul><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><ul><li>就是从 window 的事件处理函数开始，依次向内，只要事件 <strong>目标</strong> 的事件处理函数执行</li><li>也就是从上向下的执行事件处理函数</li></ul><h3 id="冒泡和捕获的区别"><a href="#冒泡和捕获的区别" class="headerlink" title="冒泡和捕获的区别"></a>冒泡和捕获的区别</h3><ul><li>就是在事件的传播中，多个同类型事件处理函数的执行顺序不同</li></ul><p><a href="https://imgtu.com/i/6cRTbQ"><img src="https://s3.ax1x.com/2021/03/17/6cRTbQ.png" alt="6cRTbQ.png"></a></p><h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><ul><li><p>因为事件传播会让点在里层的时候也会点击在外层</p></li><li><p>两个元素的事件都会被触发</p></li><li><p>如果想只触发当前点击对象的事件，不想让外层的事件触发</p></li><li><p>可以使用不冒泡e.cancelBubble&#x3D;true（IE）或不传播 e.stopPropagation()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var inner = document.querySelector(&#x27;.inner&#x27;)</span><br><span class="line">    var center = document.querySelector(&#x27;.center&#x27;)</span><br><span class="line">    var out = document.querySelector(&#x27;.out&#x27;)</span><br><span class="line">    inner.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">      e = e || window.event</span><br><span class="line">      this.innerHTML += 1</span><br><span class="line">      console.log(e)</span><br><span class="line"></span><br><span class="line">      // 不冒泡</span><br><span class="line">      // e.cancelBubble = true</span><br><span class="line"></span><br><span class="line">      // 不传播</span><br><span class="line">      // e.stopPropagation()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    center.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">      e = e || window.event</span><br><span class="line">      this.innerHTML += 2</span><br><span class="line"></span><br><span class="line">      // e.stopPropagation()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    out.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">      this.innerHTML += 3</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li>就是把我要做的事情委托给别人来做</li><li>因为我们的冒泡机制，点击子元素的时候，也会同步触发父元素的相同事件</li><li>所以我们就可以把子元素的事件委托给父元素来做</li></ul><h3 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h3><ul><li><p>点击子元素的时候，不管子元素有没有点击事件，只要父元素有点击事件，那么就可以触发父元素的点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 ul 的点击事件，我被触发了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>像上面一段代码，当你点击 ul 的时候肯定会触发</li><li>但是当你点击 li 的时候，其实也会触发</li></ul></li></ul><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><ul><li><p>target 这个属性是事件对象里面的属性，表示你点击的目标</p></li><li><p>当你触发点击事件的时候，你点击在哪个元素上，target 就是哪个元素</p></li><li><p>这个 target 也不兼容，在 IE 下要使用 srcElement</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> target = e.<span class="property">target</span> || e.<span class="property">srcElement</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码，当你点击 ul 的时候，target 就是 ul</li><li>当你点击在 li 上面的时候，target 就是 li</li></ul></li></ul><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><ul><li><p>这个时候，当我们点击 li 的时候，也可以触发 ul 的点击事件</p></li><li><p>并且在事件内部，我们也可以拿到你点击的到底是 ul 还是 li</p></li><li><p>这个时候，我们就可以把 li 的事件委托给 ul 来做</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oUl = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> target = e.<span class="property">target</span> || e.<span class="property">srcElement</span></span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 判断你点击的是 li</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 确定点击的是 li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 因为当你点击在 ul 上面的时候，nodeName 应该是 &#x27;UL&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 去做点击 li 的时候该做的事情了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 li，我被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码，我们就可以把 li 要做的事情委托给 ul 来做</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>为什么要用事件委托<ul><li>我页面上本身没有 li</li><li>我通过代码添加了一些 li</li><li>添加进来的 li 是没有点击事件的</li><li>我每次动态的操作完 li 以后都要从新给 li 绑定一次点击事件</li><li>比较麻烦</li><li>这个时候只要委托给 ul 就可以了</li><li>因为新加进来的 li 也是 ul 的子元素，点击的时候也可以触发 ul 的点击事件</li></ul></li><li>事件委托的书写<ul><li>元素的事件只能委托给结构父级或者再结构父级的同样的事件上</li><li>li 的点击事件，就不能委托给 ul 的鼠标移入事件</li><li>li 的点击事件，只能委托给 ul 或者在高父级的点击事件上</li></ul></li></ul><p>委托优点：</p><ol><li><p>提高性能和效率</p></li><li><p>减少事件注册，节省内存占用</p></li><li><p>新增元素无需再次注册事件</p></li></ol><h2 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h2><ul><li>默认行为，就是不用我们注册，它自己就存在的事情<ul><li>比如我们点击鼠标右键的时候，会自动弹出一个菜单</li><li>比如我们点击 a 标签的时候，我们不需要注册点击事件，他自己就会跳转页面</li><li>…</li></ul></li><li>这些不需要我们注册就能实现的事情，我们叫做 <strong>默认事件</strong></li></ul><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><ul><li><p>有的时候，我们不希望浏览器执行默认事件</p><ul><li>比如我给 a 标签绑定了一个点击事件，我点击你的时候希望你能告诉我你的地址是什么</li><li>而不是直接跳转链接</li><li>那么我们就要把 a 标签原先的默认事件阻止，不让他执行默认事件</li></ul></li><li><p>我们有两个方法来阻止默认事件</p><ul><li><code>e.preventDefault()</code> : 非 IE 使用</li><li><code>e.returnValue = false</code> ：IE 使用</li><li>直接return false</li></ul></li><li><p>我们阻止默认事件的时候也要写一个兼容的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击我试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oA = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">href</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    e.<span class="property">preventDefault</span> ? e.<span class="title function_">preventDefault</span>() : e.<span class="property">returnValue</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样写完以后，你点击 a 标签的时候，就不会跳转链接了</li><li>而是会在控制台打印出 a 标签的 href 属性的值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基础</title>
      <link href="/posts/b18b9acc.html"/>
      <url>/posts/b18b9acc.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript发展历史"><a href="#JavaScript发展历史" class="headerlink" title="JavaScript发展历史"></a>JavaScript发展历史</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 1994年，网景公司(Netscape)发布了Navigator浏览器0.9版，这是世界上第一款比较成熟的网络浏览器，轰动一时。但是这是一款名副其实的浏览器--只能浏览页面，浏览器无法与用户互动,当时解决这个问题有两个办法，一个是采用现有的语言,许它们直接嵌入网页。另一个是发明一种全新的语言。</span><br><span class="line">liveScript ==&gt; javaScript ==&gt; ECMAscript</span><br><span class="line"></span><br><span class="line">2. 1995年Sun公司将Oak语言改名为Java，正式向市场推出。Sun公司大肆宣传，许诺这种语言可以&quot;一次编写，到处运行&quot;(Write Once, Run Anywhere)，它看上去很可能成为未来的主宰。</span><br><span class="line"></span><br><span class="line">3. 网景公司动了心，决定与Sun公司结成联盟</span><br><span class="line"></span><br><span class="line">4. 34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他,他只用10天时间就把Javascript设计出来了。（多肽语言）</span><br><span class="line"></span><br><span class="line">5.  (1)借鉴C语言的基本语法;</span><br><span class="line">    (2)借鉴Java语言的数据类型和内存管理;</span><br><span class="line">    (3)借鉴Scheme语言，将函数提升到&quot;第一等公民&quot;(first class)的地位;</span><br><span class="line">    (4)借鉴Self语言，使用基于原型(prototype)的继承机制。</span><br><span class="line"></span><br><span class="line">JavaScript兼容于ECMA标准，通常也称为ECMAScript</span><br><span class="line">ECMAScript（简称ES）版本名称了解：</span><br><span class="line">1997年7月，ECMAScript 1.0发布。</span><br><span class="line">1998年6月，ECMAScript 2.0版发布。</span><br><span class="line">1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持。（ES3）</span><br><span class="line">2008年7月ECMAScript 4.0版本比较激进被废弃，替代方案将现有功能小幅度升级发布为ECMAScript 3.1，之后改名为ECMAScript 5，所以各类文章所说的ECMAScript 3.1等同于ECMAScript 5（ES5）</span><br><span class="line">2011年6月，ECMAscript 5.1版发布，到了2012年底，所有主要浏览器都支持ECMAScript 5.1版的全部功能。</span><br><span class="line">在这之后，版本发布规则发生变化， 标准委员会决定，标准在每年的6月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的6月份，草案就自然变成了新一年的版本，只要用年份标记就可以了。</span><br><span class="line">2015年6月发布了ECMAScript 6.0 版本正式名称就是《ECMAScript 2015标准》（简称 ES2015）-&gt; ES6</span><br><span class="line">2016年6月小幅修订的《ECMAScript 2016标准》如期发布（简称 ES2016）</span><br><span class="line">2017（简称 ES2017）</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JavaScript是一种基于对象（Object）和事件驱动（Event Driven）的弱类型脚本语言，使用JavaScript可以轻松的实现与HTML的交互操作，并且完成丰富的页面交互效果</span><br><span class="line"></span><br><span class="line">基于对象：</span><br><span class="line">指的是程序的内部已经为用户提供好了若干个对象，用户直接使用这些对象即可。</span><br><span class="line"></span><br><span class="line">面向对象：</span><br><span class="line">java属于面向对象的语言，面向对象是指用户自己定义类，对象需要用户自己产生。</span><br><span class="line"></span><br><span class="line">脚本：凡是不能独立执行需要依赖其他程序的，通常都叫做脚本。</span><br><span class="line"></span><br><span class="line">弱类型：允许变量类型的隐式转换，允许强制类型转换</span><br></pre></td></tr></table></figure><h1 id="JavaScript能干什么"><a href="#JavaScript能干什么" class="headerlink" title="JavaScript能干什么"></a>JavaScript能干什么</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 常见的网页效果【表单验证，轮播图...】</span><br><span class="line">2. 与H5配合实现游戏【水果忍者： http://www.jq22.com/demo/html5-fruit-ninja/】</span><br><span class="line">3. 实现应用级别的程序【http://naotu.baidu.com】</span><br><span class="line">4. 实现统计效果【http://echarts.baidu.com/examples/】</span><br><span class="line">5. 地理定位等功能【http://lbsyun.baidu.com/jsdemo.htm#i4_5】</span><br><span class="line">6. 在线学编程【https://codecombat.163.com/play/】</span><br><span class="line">7. js可以实现人工智能【面部识别】</span><br><span class="line">8. ...</span><br></pre></td></tr></table></figure><h1 id="JavaScript特点"><a href="#JavaScript特点" class="headerlink" title="JavaScript特点"></a>JavaScript特点</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)脚本语言。JavaScript是一种解释型的脚本语言,C、C++等语言先编译后执行,而JavaScript是在程序的运行过程中逐行进行解释。</span><br><span class="line">(2)基于对象。JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。</span><br><span class="line">(3)简单。JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。</span><br><span class="line">(4)动态性。JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。在访问一个网页时,鼠标在网页中进行鼠标点击或上下移、窗口移动等操作JavaScript都可直接对这些事件给出相应的响应。</span><br><span class="line">(5)跨平台性。JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用,前提上机器上的浏览器支持JavaScript脚本语言,目前JavaScript已被大多数的浏览器所支持。</span><br></pre></td></tr></table></figure><h1 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. ECMASCRIPT: 定义了javascript的语法规范,描述了语言的基本语法和数据类型</span><br><span class="line">2. BOM (Browser Object Model): 浏览器对象模型</span><br><span class="line">   有一套成熟的可以操作浏览器的 API，通过 BOM 可以操作浏览器。比如： 弹出框、浏览器跳转、获取分辨率等</span><br><span class="line">3. DOM (Document Object Model): 文档对象模型</span><br><span class="line">   有一套成熟的可以操作页面元素的 API，通过 DOM 可以操作页面中的元素。比如： 增加个 div，减少个 div，给div 换个位置等</span><br></pre></td></tr></table></figure><p>总结： <strong>JS 就是通过固定的语法去操作 浏览器 和 标签结构 来实现网页上的各种效果</strong></p><h1 id="JavaScript代码的书写位置"><a href="#JavaScript代码的书写位置" class="headerlink" title="JavaScript代码的书写位置"></a>JavaScript代码的书写位置</h1><ul><li>和 <code>css</code> 一样，我们的 <code>js</code> 也可以有多种方式书写在页面上让其生效</li><li><code>js</code> 也有多种方式书写，分为 <strong>行内式</strong>， <strong>内嵌式</strong>，<strong>外链式</strong></li></ul><h2 id="行内式-JS-代码（不推荐）"><a href="#行内式-JS-代码（不推荐）" class="headerlink" title="行内式 JS 代码（不推荐）"></a>行内式 JS 代码（不推荐）</h2><ul><li><p>写在标签上的 js 代码需要依靠事件（行为）来触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写在 a 标签的 href 属性上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;我是一个弹出层&#x27;);&quot;</span>&gt;</span>点击一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写在其他元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;我是一个弹出层&#x27;)&quot;</span>&gt;</span>点一下试试看<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注：onclick 是一个事件（点击事件），当点击元素的时候执行后面的 js 代码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="内嵌式-JS-代码"><a href="#内嵌式-JS-代码" class="headerlink" title="内嵌式 JS 代码"></a>内嵌式 JS 代码</h2><ul><li><p>内嵌式的 js 代码会在页面打开的时候直接触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html 页面书写一个 script 标签，标签内部书写 js 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注：script 标签可以放在 head 里面也可以放在 body 里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="外链式-JS-代码（推荐）"><a href="#外链式-JS-代码（推荐）" class="headerlink" title="外链式 JS 代码（推荐）"></a>外链式 JS 代码（推荐）</h2><ul><li><p>外链式 js 代码只要引入了 html 页面，就会在页面打开的时候直接触发</p></li><li><p>新建一个 <code>.js</code> 后缀的文件，在文件内书写 js 代码，把写好的 js 文件引入 html 页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 index.js 文件</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是一个 html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 script 标签的 src 属性，把写好的 js 文件引入页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个页面可以引入多个 js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="常用输出-调试方法"><a href="#常用输出-调试方法" class="headerlink" title="常用输出&#x2F;调试方法"></a>常用输出&#x2F;调试方法</h1><ul><li>alert( ) 浏览器弹窗，弹出的内容就是（）括号中的内容 </li><li>document.write( ) 向文档写入字符串、html 或 javascript代码 </li><li>console.log( ) 在控制台打印相关信息 </li><li>注意：调试代码应当从最终的产品代码中删除掉</li></ul><h1 id="JS-中的注释"><a href="#JS-中的注释" class="headerlink" title="JS 中的注释"></a>JS 中的注释</h1><ul><li>学习一个语言，先学习一个语言的注释，因为注释是给我们自己看的，也是给开发人员看的</li><li>写好一个注释，有利于我们以后阅读代码</li></ul><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><ul><li><p>一般就是用来描述下面一行代码的作用</p></li><li><p>可以直接写两个 <code>/</code> ，也可以按 <code>ctrl + /</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是一个单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码表示在浏览器里面出现一个弹出层</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><ul><li><p>一般用来写一大段话，或者注释一段代码</p></li><li><p>可以直接写 <code>/**/</code> 然后在两个星号中间写注释，也可以按 shift + ctrl + &#x2F; </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我是一个多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释的代码不会执行</span></span><br><span class="line"><span class="comment">alert(&#x27;我是一个弹出层&#x27;)</span></span><br><span class="line"><span class="comment">alert(&#x27;我是一个弹出层&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>变量指的是在程序中保存数据的一个容器</li><li>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</li><li>也就是说，我们向内存中存储了一个数据，然后要给这个数据起一个名字，为了是我们以后再次找到他</li><li>语法： <code>var 变量名 = 值</code></li></ul><h2 id="定义变量及赋值"><a href="#定义变量及赋值" class="headerlink" title="定义变量及赋值"></a>定义变量及赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个变量</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给一个变量赋值</span></span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个变量的同时给其赋值</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>一个变量名只能存储一个值</li><li>当再次给一个变量赋值的时候，前面一次的值就没有了</li><li>变量名称区分大小写（JS 区分大小写）</li></ol></li></ul><h2 id="变量的命名规则和命名规范"><a href="#变量的命名规则和命名规范" class="headerlink" title="变量的命名规则和命名规范"></a>变量的命名规则和命名规范</h2><ul><li>规则： 必须遵守的，不遵守就是错<ol><li>一个变量名称可以由 <strong>数字</strong>、<strong>字母</strong>、<strong>下划线（_）</strong>、<strong>美元符号（$）</strong> 组成</li><li>严格区分大小写</li><li>不能由数字开头，不要使用中文汉字命名</li><li>不能是 <strong>保留字</strong> 或者 <strong>关键字</strong></li><li>不要出现空格</li></ol></li><li>规范： 建议遵守的（开发者默认），不遵守不会报错<ol><li>变量名尽量有意义（语义化）</li><li>遵循驼峰命名规则，由多个单词组成的时候，从第二个单词开始首字母大写</li></ol></li></ul><h2 id="JavaScript关键字"><a href="#JavaScript关键字" class="headerlink" title="JavaScript关键字"></a>JavaScript关键字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">关键字可用于表示控制语句的开始或结束，或用于执行特定操作等。</span><br><span class="line">按照规则，关键字也是语言保留的，不能用作标识符！</span><br><span class="line">break        do          try           typeof</span><br><span class="line">case         else        new           instanceof</span><br><span class="line">catch        in          return        var</span><br><span class="line">continue     for         switch        while</span><br><span class="line">function     this        with          default</span><br><span class="line">if           throw       delete        ......</span><br></pre></td></tr></table></figure><h2 id="JavaScript保留字"><a href="#JavaScript保留字" class="headerlink" title="JavaScript保留字"></a>JavaScript保留字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">保留字有可能在将来被用作关键字来使用，不能用作标识符！</span><br><span class="line">abstract     int          short         boolean</span><br><span class="line">export       interface    static        byte</span><br><span class="line">extends      long         super         char</span><br><span class="line">final        native       class         float</span><br><span class="line">throws       const        goto          private</span><br><span class="line">double       import       public        ......</span><br></pre></td></tr></table></figure><hr><h1 id="数据类型（重点）"><a href="#数据类型（重点）" class="headerlink" title="数据类型（重点）"></a>数据类型（重点）</h1><ul><li>是指我们存储在内存中的数据的类型</li><li>我们通常分为两大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ol><li>数值类型（number）<ul><li>一切数字都是数值类型（包括二进制，十进制，十六进制等）</li><li>NaN（not a number），一个非数字</li></ul></li><li>字符串类型（string）<ul><li>被引号包裹的所有内容（可以是单引号也可以是双引号）</li></ul></li><li>布尔类型（boolean）<ul><li>只有两个（true 或者 false）</li></ul></li><li>null类型（null）<ul><li>只有一个，就是 null，表示空的意思</li></ul></li><li>undefined类型（undefined）<ul><li>只有一个，就是 undefined，表示没有值的意思</li></ul></li></ol><h2 id="复杂数据类型（暂时先不讲）"><a href="#复杂数据类型（暂时先不讲）" class="headerlink" title="复杂数据类型（暂时先不讲）"></a>复杂数据类型（暂时先不讲）</h2><ol><li>对象类型（object）</li><li>函数类型（function）</li><li>。。。</li></ol><h2 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h2><ul><li>既然已经把数据分开了类型，那么我们就要知道我们存储的数据是一个什么类型的数据</li><li>使用 <code>typeof</code> 关键字来进行判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种使用方式</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种使用方式</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(s1));</span><br></pre></td></tr></table></figure><h3 id="判断一个变量是不是数字"><a href="#判断一个变量是不是数字" class="headerlink" title="判断一个变量是不是数字"></a>判断一个变量是不是数字</h3><ul><li>可以使用 <code>isNaN</code> 这个方法来判断一个变量是不是数字</li><li><code>isNaN</code> ：is not a number</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果变量是一个数字</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(n1)); <span class="comment">//=&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果变量不是一个数字</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(s1)); <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>数据类型之间的转换，比如数字转成字符串，字符串转成布尔，布尔转成数字等</li></ul><h3 id="其他数据类型转成数值"><a href="#其他数据类型转成数值" class="headerlink" title="其他数据类型转成数值"></a>其他数据类型转成数值</h3><ol><li><p><code>Number(变量)</code></p><ul><li>可以把一个变量强制转换成数值类型</li><li>可以转换小数，会保留小数</li><li>可以转换布尔值</li><li>遇到不可转换的都会返回 NaN</li></ul></li><li><p><code>parseInt(变量)</code></p><ul><li>从第一位开始检查，是数字就转换，知道一个不是数字的内容</li><li>开头就不是数字，那么直接返回 NaN</li><li>不认识小数点，只能保留整数</li></ul></li><li><p><code>parseFloat(变量)</code></p><ul><li><p>从第一位开始检查，是数字就转换，知道一个不是数字的内容</p></li><li><p>开头就不是数字，那么直接返回 NaN</p></li><li><p>认识一次小数点</p></li></ul></li><li><p>除了加法以外的数学运算</p><ul><li>运算符两边都是可运算数字才行</li><li>如果运算符任何一遍不是一个可运算数字，那么就会返回 NaN</li><li>加法不可以用</li></ul></li><li><p>Number.toFixed(n) 方法可把 Number 四舍五入保留n位小数</p></li></ol><h3 id="其他数据类型转成字符串"><a href="#其他数据类型转成字符串" class="headerlink" title="其他数据类型转成字符串"></a>其他数据类型转成字符串</h3><ol><li><code>变量.toString()</code><ul><li>有一些数据类型不能使用 <code>toString()</code> 方法，比如 undefined 和 null</li></ul></li><li><code>String(变量)</code><ul><li>所有数据类型都可以</li></ul></li><li>使用加法运算<ul><li>在 JS 里面，<code>+</code> 由两个含义</li><li>字符串拼接： 只要 <code>+</code> 任意一边是字符串，就会进行字符串拼接</li><li>加法运算：只有 <code>+</code> 两边都是数字的时候，才会进行数学运算</li></ul></li></ol><h3 id="其他数据类型转成布尔"><a href="#其他数据类型转成布尔" class="headerlink" title="其他数据类型转成布尔"></a>其他数据类型转成布尔</h3><ol><li><code>Boolean(变量)</code><ul><li>在 js 中，只有 <code>&#39;&#39;</code>、<code>0</code>、<code>null</code>、<code>undefined</code>、<code>NaN</code>，这些是 false，其余都是 true</li></ul></li></ol><hr><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>就是在代码里面进行运算的时候使用的符号，不光只是数学运算，我们在 js 里面还有很多的运算方式</li></ul><h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><ol><li><p><code>+</code></p><ul><li>只有符号两边都是数字的时候才会进行加法运算</li><li>只要符号任意一边是字符串类型，就会进行字符串拼接</li></ul></li><li><p><code>-</code></p><ul><li><p>会执行减法运算</p></li><li><p>会自动把两边都转换成数字进行运算</p></li></ul></li><li><p><code>*</code></p><ul><li>会执行乘法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>/</code></p><ul><li>会执行除法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>%</code></p><ul><li>会执行取余运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li></ol><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ol><li><p><code>=</code></p><ul><li>就是把 <code>=</code> 右边的赋值给等号左边的变量名</li><li><code>var num = 100</code></li><li>就是把 100 赋值给 num 变量</li><li>那么 num 变量的值就是 100</li></ul></li><li><p><code>+=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//=&gt; 20</span></span><br></pre></td></tr></table></figure><ul><li><code>a += 10</code> 等价于 <code>a = a + 10</code></li></ul></li><li><p><code>-=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a -= <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><ul><li><code>a -= 10</code> 等价于 <code>a = a - 10</code></li></ul></li><li><p><code>*=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//=&gt; 100</span></span><br></pre></td></tr></table></figure><ul><li><code>a *= 10</code> 等价于 <code>a = a * 10</code></li></ul></li><li><p><code>/=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure><ul><li><code>a /= 10</code> 等价于 <code>a = a / 10</code></li></ul></li><li><p><code>%=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a %= <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><ul><li><code>a %= 10</code> 等价于 <code>a = a % 10</code></li></ul></li></ol><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ol><li><code>==</code><ul><li>比较符号两边的值是否相等，不管数据类型</li><li><code>1 == &#39;1&#39;</code></li><li>两个的值是一样的，所以得到 true</li></ul></li><li><code>===</code><ul><li>比较符号两边的值和数据类型是否都相等</li><li><code>1 === &#39;1&#39;</code></li><li>两个值虽然一样，但是因为数据类型不一样，所以得到 false</li></ul></li><li><code>!=</code><ul><li>比较符号两边的值是否不等</li><li><code>1 != &#39;1&#39;</code></li><li>因为两边的值是相等的，所以比较他们不等的时候得到 false</li></ul></li><li><code>!==</code><ul><li>比较符号两边的数据类型和值是否不等</li><li><code>1 !== &#39;1&#39;</code></li><li>因为两边的数据类型确实不一样，所以得到 true</li></ul></li><li><code>&gt;=</code><ul><li>比较左边的值是否 大于或等于 右边的值</li><li><code>1 &gt;= 1</code>  true</li><li><code>1 &gt;= 0</code>  true</li><li><code>1 &gt;= 2</code>  false</li></ul></li><li><code>&lt;=</code><ul><li>比较左边的值是否 小于或等于 右边的值</li><li><code>1 &lt;= 2</code>  true</li><li><code>1 &lt;= 1</code>  true</li><li><code>1 &lt;= 0</code>  false</li></ul></li><li><code>&gt;</code><ul><li>比较左边的值是否 大于 右边的值</li><li><code>1 &gt; 0</code>  true</li><li><code>1 &gt; 1</code>  false</li><li><code>1 &gt; 2</code>  false</li></ul></li><li><code>&lt;</code><ul><li>比较左边的值是否 小于 右边的值</li><li><code>1 &lt; 2</code>  true</li><li><code>1 &lt; 1</code> false</li><li><code>1 &lt; 0</code> false</li></ul></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ol><li><code>&amp;&amp;</code><ul><li>进行 且 的运算</li><li>符号左边必须为 true 并且右边也是 true，才会返回 true</li><li>只要有一边不是 true，那么就会返回 false</li><li><code>true &amp;&amp; true</code>  true</li><li><code>true &amp;&amp; false</code>  false</li><li><code>false &amp;&amp; true</code>  false</li><li><code>false &amp;&amp; false</code>  false</li></ul></li><li><code>||</code><ul><li>进行 或 的运算</li><li>符号的左边为 true 或者右边为 true，都会返回 true</li><li>只有两边都是 false 的时候才会返回 false</li><li><code>true || true</code>  true</li><li><code>true || false</code>  true</li><li><code>false || true</code>  true</li><li><code>false || false</code>  false</li></ul></li><li><code>!</code><ul><li>进行 取反 运算</li><li>本身是 true 的，会变成 false</li><li>本身是 false 的，会变成 true</li><li><code>!true</code>  false</li><li><code>!false</code>  true</li></ul></li></ol><h2 id="自增自减运算符（一元运算符）"><a href="#自增自减运算符（一元运算符）" class="headerlink" title="自增自减运算符（一元运算符）"></a>自增自减运算符（一元运算符）</h2><ol><li><p><code>++</code></p><ul><li><p>进行自增运算</p></li><li><p>分成两种，<strong>前置++</strong> 和 <strong>后置++</strong></p></li><li><p>前置++，会先把值自动 +1，在返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++a);</span><br><span class="line"><span class="comment">// 会返回 11，并且把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li><li><p>后置++，会先把值返回，在自动+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a++);</span><br><span class="line"><span class="comment">// 会返回 10，然后把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--</code></p><ul><li>进行自减运算</li><li>分成两种，<strong>前置–</strong> 和 <strong>后置–</strong></li><li>和 <code>++</code> 运算符道理一样</li></ul></li></ol><h2 id="进制介绍"><a href="#进制介绍" class="headerlink" title="进制介绍"></a>进制介绍</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进制也就是进位计数制，是人为定义的带进位的计数方法。</span></span><br><span class="line"><span class="comment">//十六进制是逢十六进一，十进制是逢十进一，八进制是逢八进一，二进制就是逢二进一 ...</span></span><br><span class="line"><span class="comment">//在javaScript中进制之间的转换提供了两个非常好用的方法：toString()、parseInt()。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 toString() 方法把十进制转为其他进制：</span></span><br><span class="line"><span class="keyword">var</span>  x = <span class="number">28</span>;<span class="comment">// 10进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">//把十进转为2进制  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">8</span>));<span class="comment">//把十进转为8进制  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toString</span>(<span class="number">16</span>));<span class="comment">//把十进转为16进制  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 parseInt() 方法把其他进制转为十进制：</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;110&quot;</span>;<span class="comment">//二进制的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x, <span class="number">2</span>));<span class="comment">//把这个字符串当做二进制，转为十进制  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;070&quot;</span>;<span class="comment">//八进制的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x, <span class="number">8</span>));<span class="comment">//把这个字符串当做八进制，转为十进制  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;0x1c&quot;</span>;<span class="comment">//十六进制的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(x, <span class="number">16</span>));<span class="comment">//把这个字符串当做十六进制，转为十进制  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parseInt()方法，第一个参数为要转换的字符串，第二个参数指定字符串的进制，默认为十进制</span></span><br><span class="line"><span class="comment">//其他进制的相互转换，先使用parseInt变为十进制， 在利用toString变为其他进制。</span></span><br><span class="line"><span class="comment">//在javaScript中，八进制以 0 开头，十六进制以 0x 开头，可省略。</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><a href="https://imgtu.com/i/620xk6"><img src="https://s3.ax1x.com/2021/03/18/620xk6.png" alt="620xk6.png"></a></p><p><a href="https://imgtu.com/i/620jTx"><img src="https://s3.ax1x.com/2021/03/18/620jTx.png" alt="620jTx.png"></a></p><p><a href="https://imgtu.com/i/620ztK"><img src="https://s3.ax1x.com/2021/03/18/620ztK.png" alt="620ztK.png"></a></p><p><a href="https://imgtu.com/i/620X01"><img src="https://s3.ax1x.com/2021/03/18/620X01.png" alt="620X01.png"></a></p><p><a href="https://imgtu.com/i/620OmR"><img src="https://s3.ax1x.com/2021/03/18/620OmR.png" alt="620OmR.png"></a></p><hr><h1 id="程序的三大结构"><a href="#程序的三大结构" class="headerlink" title="程序的三大结构"></a>程序的三大结构</h1><ul><li>顺序结构 </li><li>选择结构  </li><li>循环结构</li></ul><p> </p><h2 id="分支结构-选择结构"><a href="#分支结构-选择结构" class="headerlink" title="分支结构(选择结构)"></a>分支结构(选择结构)</h2><ul><li>我们的 js 代码都是顺序执行的（从上到下）</li><li>逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码</li></ul><h3 id="IF-条件分支结构"><a href="#IF-条件分支结构" class="headerlink" title="IF 条件分支结构"></a>IF 条件分支结构</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><ul><li><p>通过一个 if 语句来决定代码执行与否</p></li><li><p>语法： <code>if (条件) &#123; 要执行的代码 &#125;</code></p></li><li><p>通过 <code>()</code> 里面的条件是否成立来决定 <code>&#123;&#125;</code> 里面的代码是否执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候不执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 false，我不会执行&#x27;</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h4><ul><li><p>通过 if 条件来决定，执行哪一个 <code>&#123;&#125;</code> 里面的代码</p></li><li><p>语法： <code>if (条件) &#123; 条件为 true 的时候执行 &#125; else &#123; 条件为 false 的时候执行 &#125;</code></p></li><li><p>两个 <code>&#123;&#125;</code> 内的代码一定有一个会执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候，会执行 if 后面的 &#123;&#125; </span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件是 true，我不会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候，会执行 else 后面的 &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件为 false，我不会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;因为条件为 false，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="if-else-if-…-语句"><a href="#if-else-if-…-语句" class="headerlink" title="if else if … 语句"></a>if else if … 语句</h4><ul><li><p>可以通过 if 和 else if 来设置多个条件进行判断</p></li><li><p>语法：<code>if (条件1) &#123; 条件1为 true 的时候执行 &#125; else if (条件2) &#123; 条件2为 true 的时候执行 &#125;</code></p></li><li><p>会从头开始依次判断条件</p><ul><li>如果第一个条件为 true 了，那么就会执行后面的 <code>&#123;&#125;</code> 里面的内容</li><li>如果第一个条件为 false，那么就会判断第二个条件，依次类推</li></ul></li><li><p>多个 <code>&#123;&#125;</code> ，只会有一个被执行，一旦有一个条件为 true 了，后面的就不在判断了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 false，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 true，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="comment">// 因为只要前面有一个条件满足了，就不会继续判断了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 true，最终会打印 “我是代码段2”</span></span><br><span class="line"><span class="comment">// 只有前一个条件为 false 的时候才会继续向后判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终什么也不会发生</span></span><br><span class="line"><span class="comment">// 因为当所有条件都为 false 的时候，两个 &#123;&#125; 里面的代码都不会执行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="if-else-if-…-else-语句"><a href="#if-else-if-…-else-语句" class="headerlink" title="if else if … else 语句"></a>if else if … else 语句</h4><ul><li><p>和之前的 <code>if else if ...</code> 基本一致，只不过是在所有条件都不满足的时候，执行最后 else 后面的 <code>&#123;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终会打印 “我是代码段3”</span></span><br><span class="line"><span class="comment">// 只有前面所有的条件都不满足的时候会执行 else 后面的 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="comment">// 只要前面有一个条件满足了，那么后面的就都不会执行了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我是代码段3&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>prompt(str1，str2)  弹出可输入的对话框</p><p>​str1: 提示要显示在消息对话框中的文本</p><p>​str2：文本框中的内容</p><p>返回值:</p><ol><li>点击确定按钮，文本框中的内容将作为函数的返回值</li><li>点击取消按钮，将返回null</li></ol><h3 id="SWITCH-条件分支结构"><a href="#SWITCH-条件分支结构" class="headerlink" title="SWITCH 条件分支结构"></a>SWITCH 条件分支结构</h3><ul><li><p>也是条件判断语句的一种</p></li><li><p>是对于某一个变量的判断</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (n) &#123;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">    情况<span class="number">1</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    情况<span class="number">2</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">    情况<span class="number">3</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    上述情况都不满足的时候执行的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">工作原理：</span><br><span class="line">首先设置表达式 n（通常是一个变量）。</span><br><span class="line">随后表达式的值会与结构中的每个 <span class="keyword">case</span> 的值做比较。</span><br><span class="line">如果存在匹配，则与该 <span class="keyword">case</span> 关联的代码块会被执行。</span><br><span class="line">使用 <span class="keyword">break</span> 来阻止代码自动地向下一个 <span class="keyword">case</span> 运行。</span><br><span class="line">注：<span class="keyword">break</span>关键字会导致代码执行流跳出<span class="keyword">switch</span>语句。</span><br></pre></td></tr></table></figure></li><li><p>例子🌰： 根据变量给出的数字显示是星期几</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> week = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期一&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期二&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期三&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期四&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期五&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期六&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;星期日&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请输入一个 1 ～ 7 之间的数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if…else-if…else语句与switch-case语句的比较："><a href="#if…else-if…else语句与switch-case语句的比较：" class="headerlink" title="if…else if…else语句与switch case语句的比较："></a>if…else if…else语句与switch case语句的比较：</h3><p>范围：前者可以比较定值也可以比较范围</p><p>​           后者只能比较定值</p><p>效率：前者效率低（每一个表达式都要求值对比）</p><p>​           后者效率高（表达式只需要跟case中的一个匹配就可以）</p><h2 id="三元运算（扩展）"><a href="#三元运算（扩展）" class="headerlink" title="三元运算（扩展）"></a>三元运算（扩展）</h2><ul><li><p>三元运算，就是用 <strong>两个符号</strong> 组成一个语句</p></li><li><p>三元运算只是对 <strong>if else</strong> 语句的一个简写形式</p></li><li><p>语法： <code>条件 ? 条件为 true 的时候执行 : 条件为 false 的时候执行</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age &gt;= <span class="number">18</span> ? <span class="title function_">alert</span>(<span class="string">&#x27;已经成年&#x27;</span>) : <span class="title function_">alert</span>(<span class="string">&#x27;没有成年&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">循环：指事物周而复始地运动或变化。</span><br><span class="line"></span><br><span class="line">在实际问题中有许多具有规律性的重复操作，因此在程序中就需要重复执行某些语句。</span><br><span class="line"></span><br><span class="line">特征：</span><br><span class="line">1.有规律性的重复操作</span><br><span class="line">2.重复执行的代码极其相似</span><br><span class="line"></span><br><span class="line">如：输出10次&#x27;hello world&#x27;</span><br><span class="line"></span><br><span class="line">console.log(&#x27;hello world 1&#x27;);</span><br><span class="line">console.log(&#x27;hello world 2&#x27;);</span><br><span class="line">console.log(&#x27;hello world 3&#x27;);</span><br><span class="line">......</span><br><span class="line">console.log(&#x27;hello world 10&#x27;);</span><br><span class="line"></span><br><span class="line">这样处理起来非常的费时费力，同时也会有非常多的冗余代码！</span><br><span class="line"></span><br><span class="line">假如我要输出 100次 1000次 &#x27;hello world&#x27; 呢？？</span><br></pre></td></tr></table></figure><h3 id="FOR-循环"><a href="#FOR-循环" class="headerlink" title="FOR 循环"></a>FOR 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法形式为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">表达式<span class="number">1</span>：为不参与循环的单次表达式，用来给循环控制变量赋初值</span><br><span class="line">表达式<span class="number">2</span>：一般是一个关系表达式，作为循环条件(设置终止值)</span><br><span class="line">表达式<span class="number">3</span>：一般为循环变量增量或减量(步长)</span><br><span class="line">循环体：需要重复执行的代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">// 增量循环</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--) &#123;<span class="comment">// 减量循环</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62DYqA"><img src="https://s3.ax1x.com/2021/03/18/62DYqA.png" alt="62DYqA.png"></a></p><p>注意：</p><ul><li>for()括号中的表达式皆可以省略，但分号不可省略。</li><li>省略了表达式2(循环条件), 若不做其它处理则成为死循环。</li><li>死循环：没有终止条件并一直执行的循环即为死循环。</li><li>for循环的嵌套，可以简单的理解为行和列的关系。</li></ul><h4 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">面试题：</span><br><span class="line">var a = 1</span><br><span class="line">var b = 2</span><br><span class="line">var c = (a,b)  </span><br><span class="line">console.log(c) // c=2</span><br><span class="line"></span><br><span class="line">var a = 1</span><br><span class="line">var b = 2</span><br><span class="line">var c = (a++,b)  </span><br><span class="line">console.log(c) // c=2</span><br><span class="line">console.log(a) // a=2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var k=0;</span><br><span class="line">for(var i=0, v=0; i&lt;6, v&lt;9; i++, v++)&#123;</span><br><span class="line">    k = i + v;</span><br><span class="line">&#125;</span><br><span class="line">console.log(k);</span><br><span class="line"></span><br><span class="line">var k=0;</span><br><span class="line">for(var i=0, v=0; i&lt;9, v&lt;6; i+=2, v++)&#123;</span><br><span class="line">k = i + v;</span><br><span class="line">&#125;</span><br><span class="line">console.log(k);</span><br></pre></td></tr></table></figure><h3 id="WHILE-循环"><a href="#WHILE-循环" class="headerlink" title="WHILE 循环"></a>WHILE 循环</h3><ul><li><p><code>while</code>，中文叫 当…时，其实就是当条件满足时就执行代码，一旦不满足了就不执行了</p></li><li><p>语法 <code>while (条件) &#123; 满足条件就执行 &#125;</code></p></li><li><p>因为满足条件就执行，所以我们写的时候一定要注意，就是设定一个边界值，不然就一直循环下去了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化条件</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 2. 条件判断</span></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 3. 要执行的代码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前的 num 的值是 &#x27;</span> + num)</span><br><span class="line">  <span class="comment">// 4. 自身改变</span></span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有自身改变，那么就会一直循环不停了</li></ul></li></ul><h3 id="DO-WHILE-循环"><a href="#DO-WHILE-循环" class="headerlink" title="DO WHILE 循环"></a>DO WHILE 循环</h3><ul><li><p>是一个和 <code>while</code> 循环类似的循环</p></li><li><p><code>while</code> 会先进行条件判断，满足就执行，不满足直接就不执行了</p></li><li><p>但是 <code>do while</code> 循环是，先不管条件，先执行一回，然后在开始进行条件判断</p></li><li><p>语法： <code>do &#123; 要执行的代码 &#125; while (条件)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码，条件一开始就不满足，但是依旧会执行一次 do 后面 &#123;&#125; 内部的代码</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了一次&#x27;</span>)</span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><p>for，while，  do while三个循环的区别</p><p>for 循环一般用在循环次数可以确定的情景。 </p><p>while 循环一般用在循环次数未知的情景。 </p><p>do while：先执行一次，在判断，也是不知道循环次数</p><h3 id="BREAK-终止循环"><a href="#BREAK-终止循环" class="headerlink" title="BREAK 终止循环"></a>BREAK 终止循环</h3><ul><li><p>在循环没有进行完毕的时候，因为我设置的条件满足，提前终止循环</p></li><li><p>比如：我要吃五个包子，吃到三个的时候，不能在吃了，我就停止吃包子这个事情</p></li><li><p>要终止循环，就可以直接使用 <code>break</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 没循环一次，吃一个包子</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，条件为 true，执行 &#123;&#125; 里面的代码终止循环</span></span><br><span class="line">  <span class="comment">// 循环就不会继续向下执行了，也就没有 4 和 5 了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CONTINUE-结束本次循环"><a href="#CONTINUE-结束本次循环" class="headerlink" title="CONTINUE 结束本次循环"></a>CONTINUE 结束本次循环</h3><ul><li><p>在循环中，把循环的本次跳过去，继续执行后续的循环</p></li><li><p>比如：吃五个包子，到第三个的时候，第三个掉地下了，不吃了，跳过第三个，继续吃第四个和第五个</p></li><li><p>跳过本次循环，就可以使用 <code>continue</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，执行 &#123;&#125; 里面的代码</span></span><br><span class="line">  <span class="comment">// &#123;&#125; 里面有 continue，那么本次循环后面的代码就都不执行了</span></span><br><span class="line">  <span class="comment">// 自动算作 i 为 3 的这一次结束了，去继续执行 i = 4 的那次循环了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个是第三个包子，掉地下了，我不吃了&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们代码里面所说的函数和我们上学的时候学习的什么三角函数、二次函数之类的不是一个东西</p></li></ul><hr><h1 id="函数的概念及作用"><a href="#函数的概念及作用" class="headerlink" title="函数的概念及作用"></a>函数的概念及作用</h1><p><a href="https://imgtu.com/i/62woMd"><img src="https://s3.ax1x.com/2021/03/18/62woMd.jpg" alt="62woMd.jpg"></a></p><p>乔帮主有很多武功招式，每个武功招式都有不一样的效果 </p><p><a href="https://imgtu.com/i/62w5xH"><img src="https://s3.ax1x.com/2021/03/18/62w5xH.jpg" alt="62w5xH.jpg"></a></p><p>降龙十八掌就是一个强大的武功招式，集结了十八条龙的能量，毁天灭地… </p><p>总结：不同的武功招式，聚集了不同的能量需要的时候，通过某种固定的方式来释放武功招式 </p><ul><li>通俗讲：函数就是可重复执行的代码块。</li><li>函数的作用：</li><li>1.通过函数可以封装任意多条语句，以便在任何地方、任何时候调用；</li><li>2.将代码编写在函数中，就可以避免在非必要情况下调用该代码。 </li><li>回顾上面的故事情节，函数 替换 武功招式，调用 替换 释放……</li></ul><h2 id="函数的两个阶段（重点）"><a href="#函数的两个阶段（重点）" class="headerlink" title="函数的两个阶段（重点）"></a>函数的两个阶段（重点）</h2><ul><li>按照我们刚才的说法，两个阶段就是 <strong>放在盒子里面</strong> 和 <strong>让盒子里面的代码执行</strong></li></ul><h3 id="函数定义阶段"><a href="#函数定义阶段" class="headerlink" title="函数定义阶段"></a>函数定义阶段</h3><ul><li><p>定义阶段就是我们把代码 <strong>放在盒子里面</strong></p></li><li><p>我们就要学习怎么 <strong>放进去</strong>，也就是书写一个函数</p></li><li><p>我们有两种定义方式 <strong>声明式</strong> 和 <strong>赋值式</strong></p></li></ul><h4 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h4><ul><li><p>使用 <code>function</code> 这个关键字来声明一个函数</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function: 声明函数的关键字，表示接下来是一个函数了</span></span><br><span class="line"><span class="comment">// fn: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</span></span><br><span class="line"><span class="comment">// (): 必须写，是用来放参数的位置（一会我们再聊）</span></span><br><span class="line"><span class="comment">// &#123;&#125;: 就是我们用来放一段代码的位置（也就是我们刚才说的 “盒子”）</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="赋值式"><a href="#赋值式" class="headerlink" title="赋值式"></a>赋值式</h4><ul><li><p>其实就是和我们使用 <code>var</code> 关键字是一个道理了</p></li><li><p>首先使用 <code>var</code> 定义一个变量，把一个函数当作值直接赋值给这个变量就可以了</p></li><li><p>语法： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不需要在 function 后面书写函数的名字了，因为在前面已经有了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数调用阶段"><a href="#函数调用阶段" class="headerlink" title="函数调用阶段"></a>函数调用阶段</h3><ul><li>就是让 <strong>盒子里面</strong> 的代码执行一下</li><li>让函数执行</li><li>两种定义函数的方式不同，但是调用函数的方式都是一样的</li></ul><h4 id="调用一个函数"><a href="#调用一个函数" class="headerlink" title="调用一个函数"></a>调用一个函数</h4><ul><li><p>函数调用就是直接写 <code>函数名()</code> 就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn2 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">fn2</span>()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>定义完一个函数以后，如果没有函数调用，那么写在 {} 里面的代码没有意义，只有调用以后才会执行</strong></li></ul></li></ul><h4 id="调用上的区别"><a href="#调用上的区别" class="headerlink" title="调用上的区别"></a>调用上的区别</h4><ul><li><p>虽然两种定义方式的调用都是一样的，但是还是有一些区别的</p></li><li><p>声明式函数： 调用可以在 <strong>定义之前或者定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li><li><p>赋值式函数： 调用只能在 <strong>定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量与函数提升"><a href="#变量与函数提升" class="headerlink" title="变量与函数提升"></a>变量与函数提升</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">在js中只有两种作用域，全局作用域和函数作用域，在ES6之前，js是没有块级作用域。</span><br><span class="line">JavaScript 仅提升声明，而不提升初始化。如果你先使用的变量，再声明并初始化它，变量的值将是 undefined。</span><br><span class="line">注意：</span><br><span class="line">1:所有的声明都会提升到作用域的最顶上去。</span><br><span class="line">2:同一个变量只会声明一次，其他的会被忽略掉。</span><br><span class="line">3:函数声明的优先级高于变量申明的优先级，并且函数声明和函数定义的部分一起被提升。</span><br><span class="line">变量提升的例子：</span><br><span class="line"></span><br><span class="line">num = 6;</span><br><span class="line">var num = 7;</span><br><span class="line">var num;</span><br><span class="line">console.log(num); // 不报错，输出7，也证明了变量只会声明一次，其他的会被忽略。</span><br><span class="line"></span><br><span class="line">函数提升的例子：</span><br><span class="line"></span><br><span class="line">catName();// 即使在声明之前调用依然可以执行，不会报错</span><br><span class="line"></span><br><span class="line">function catName() &#123;</span><br><span class="line">    console.log(&quot;我的小猫 &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在定义的函数名字和变量名相同的情况下，函数提升优先级高于变量的例子：</span><br><span class="line"></span><br><span class="line">func(); // 1</span><br><span class="line">var func;</span><br><span class="line">function func() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">func = function() &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出1，不会输出2。函数声明和变量声明都会被提升，但是需要注意的是函数会先被提升，然后才是变量。</span><br><span class="line"></span><br><span class="line">var func;尽管出现在function func()之前，但它是重复的声明，会被忽略，因为函数声明会被提升到普通变量之前。</span><br><span class="line"></span><br><span class="line">等同于这样：</span><br><span class="line"></span><br><span class="line">function func() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">func(); // 1</span><br><span class="line">func = function() &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fn1= function () &#123;</span><br><span class="line">        console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">function fn1()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul><li><p>我们在定义函数和调用函数的时候都出现过 <code>()</code></p></li><li><p>现在我们就来说一下这个 <code>()</code> 的作用</p></li><li><p>就是用来放参数的位置</p></li><li><p>参数分为两种 <strong>行参</strong> 和 <strong>实参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">行参写在这里</span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(实参写在这里)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params">行参写在这里</span>) &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(实参写在这里)</span><br></pre></td></tr></table></figure></li></ul><h3 id="形参和实参的作用"><a href="#形参和实参的作用" class="headerlink" title="形参和实参的作用"></a>形参和实参的作用</h3><ol><li><p>形参</p><ul><li><p>就是在函数内部可以使用的变量，在函数外部不能使用</p></li><li><p>每写一个单词，就相当于在函数内部定义了一个可以使用的变量（遵循变量名的命名规则和命名规范）</p></li><li><p>多个单词之间以 <code>,</code> 分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写一个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line"><span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写两个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果只有行参的话，那么在函数内部使用的变量是没有值的，也就是 <code>undefined</code></p></li><li><p><strong>行参的值是在函数调用的时候由实参决定的</strong></p></li></ul></li><li><p>实参</p><ul><li><p>在函数调用的时候给行参赋值的</p></li><li><p>也就是说，在调用的时候是给一个实际的内容的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 100</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 100</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 200</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>函数内部的行参的值，由函数调用的时候传递的实参决定</strong></p></li><li><p><strong>多个参数的时候，是按照顺序一一对应的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本次调用的时候，书写的参数是 100 和 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候，函数内部的 num1 就是 100，num2 就是 200</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="参数个数的关系"><a href="#参数个数的关系" class="headerlink" title="参数个数的关系"></a>参数个数的关系</h3><ol><li><p>行参比实参少</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>行参少就会拿不到实参给的值，所以在函数内部就没有办法用到这个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 200 和 300</span></span><br><span class="line"><span class="comment">// 100 对应了 num1，200 对应了 num2，300 没有对应的变量</span></span><br><span class="line"><span class="comment">// 所以在函数内部就没有办法依靠变量来使用 300 这个值</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>行参比实参多</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>所以多出来的行参就是没有值的，就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 num2 和 num3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 和 200</span></span><br><span class="line"><span class="comment">// 就分别对应了 num1 和 num2</span></span><br><span class="line"><span class="comment">// 而 num3 没有实参和其对应，那么 num3 的值就是 undefined</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p><code>arguments</code>对象是所有（非箭头）函数中都可用的<strong>局部变量</strong>。你可以使用<code>arguments</code>对象在函数中引用函数的参数。此对象包含传递给函数的每个参数，第一个参数在索引0处。例如，如果一个函数传递了三个参数，你可以以如下方式引用他们： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arguments[0]</span><br><span class="line">arguments[1]</span><br><span class="line">arguments[2]</span><br><span class="line">//参数也可以被设置：</span><br><span class="line">arguments[1] = &#x27;new value&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>arguments</code>对象不是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array"><code>Array</code></a> 。它类似于<code>Array</code>，但除了length属性和索引元素之外没有任何<code>Array</code>属性。 </p><p>可以借用arguments.length可以来查看实参和形参的个数是否一致 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function add(a, b) &#123;</span><br><span class="line">  var realLen = arguments.length;</span><br><span class="line">  console.log(&quot;realLen:&quot;, arguments.length);</span><br><span class="line">  var len = add.length;</span><br><span class="line">  console.log(&quot;len:&quot;, add.length);</span><br><span class="line">  if (realLen == len) &#123;</span><br><span class="line">  console.log(&#x27;实参和形参个数一致&#x27;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">  console.log(&#x27;实参和形参个数不一致&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">add(1,2,3,6,8);</span><br></pre></td></tr></table></figure><h2 id="函数的return（重点）"><a href="#函数的return（重点）" class="headerlink" title="函数的return（重点）"></a>函数的return（重点）</h2><ul><li>return 返回的意思，其实就是给函数一个 <strong>返回值</strong> 和 <strong>终断函数</strong></li></ul><h3 id="终断函数"><a href="#终断函数" class="headerlink" title="终断函数"></a>终断函数</h3><ul><li><p>当我开始执行函数以后，函数内部的代码就会从上到下的依次执行</p></li><li><p>必须要等到函数内的代码执行完毕</p></li><li><p>而 <code>return</code> 关键字就是可以在函数中间的位置停掉，让后面的代码不在继续执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 写了 return 以后，后面的 4 和 5 就不会继续执行了</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>函数调用本身也是一个表达式，表达式就应该有一个值出现</p></li><li><p>现在的函数执行完毕之后，是不会有结果出现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如 1 + 2 是一个表达式，那么 这个表达式的结果就是 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn() 也是一个表达式，这个表达式就没有结果出现</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>return</code> 关键字就是可以给函数执行完毕一个结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，fn() 这个表达式执行完毕之后就有结果出现了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>我们可以在函数内部使用 <code>return</code> 关键把任何内容当作这个函数运行后的结果</li></ul></li></ul><h2 id="函数的优点"><a href="#函数的优点" class="headerlink" title="函数的优点"></a>函数的优点</h2><ul><li>函数就是对一段代码的封装，在我们想调用的时候调用</li><li>函数的几个优点<ol><li>封装代码，使代码更加简洁</li><li>复用，在重复功能的时候直接调用就好</li><li>代码执行时机，随时可以在我们想要执行的时候执行</li></ol></li></ul><h2 id="预解析（重点）"><a href="#预解析（重点）" class="headerlink" title="预解析（重点）"></a>预解析（重点）</h2><ul><li><strong>预解析</strong> 其实就是聊聊 js 代码的编译和执行</li><li>js 是一个解释型语言，就是在代码执行之前，先对代码进行通读和解释，然后在执行代码</li><li>也就是说，我们的 js 代码在运行的时候，会经历两个环节 <strong>解释代码</strong> 和 <strong>执行代码</strong></li></ul><h3 id="解释代码"><a href="#解释代码" class="headerlink" title="解释代码"></a>解释代码</h3><ul><li><p>因为是在所有代码执行之前进行解释，所以叫做 <strong>预解析（预解释）</strong></p></li><li><p>需要解释的内容有两个</p><ul><li>声明式函数<ul><li>在内存中先声明有一个变量名是函数名，并且这个名字代表的内容是一个函数</li><li>函数提升的是整个函数体</li></ul></li><li><code>var</code> 关键字<ul><li>在内存中先声明有一个变量名</li><li>变量提升是只声明不赋值，值为<code>undefined</code></li></ul></li></ul></li><li><p>看下面一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>经过预解析之后可以变形为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>赋值是函数会按照 <code>var</code> 关键字的规则进行预解析</p></li></ul><h3 id="预解析的无节操"><a href="#预解析的无节操" class="headerlink" title="预解析的无节操"></a>预解析的无节操</h3><ul><li>if条件不管是否成立，里面的代码会进行预解析</li><li>return后面的代码虽然不会执行，但是会进行预解析</li></ul><h4 id="两个坑"><a href="#两个坑" class="headerlink" title="两个坑"></a>两个坑</h4><ul><li>作用域和预解析</li><li>this指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">20</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">var</span> a = b <span class="comment">// 在这一行就报错</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例3</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  fn = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例4</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 报错：Uncaught TypeError: fn is not a function</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  fn = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn)</span><br></pre></td></tr></table></figure><h2 id="作用域（重点）"><a href="#作用域（重点）" class="headerlink" title="作用域（重点）"></a>作用域（重点）</h2><ul><li>什么是作用域，就是一个变量可以生效的范围</li><li>变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><ul><li><p>整个页面起作用，在script标签内都能访问到；</p></li><li><p>在全局作用域中有全局对象window，代表一个浏览器窗口，由浏览器创建，可以直接调用；</p></li><li><p>全局作用域中声明的变量和函数，会作为window对象的属性和方法保存；</p></li><li><p>变量在函数外声明，即为全局变量，拥有全局作用域。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;<span class="comment">//全局变量</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//123</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//123</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><ul><li><p>局部作用域内的变量只能在函数内部使用，所以也叫函数作用域；</p></li><li><p>变量在函数内声明，即为局部变量，拥有局部作用域。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> b = <span class="number">456</span>;<span class="comment">//局部变量</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//456</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//b is not defined</span></span><br></pre></td></tr></table></figure></li></ul><p>注：可以直接给一个未声明的变量赋值(全局变量)，但不能直接使用未声明的变量！因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。当全局与局部有同名变量的时候，访问该变量将遵循 “就近原则”。 </p><p><a href="https://imgtu.com/i/62rNy4"><img src="https://s3.ax1x.com/2021/03/18/62rNy4.png" alt="62rNy4.png"></a></p><h2 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h2><ul><li>全局变量在页面打开时创建，在页面关闭后销毁。</li><li>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</li></ul><h2 id="变量使用规则（重点）"><a href="#变量使用规则（重点）" class="headerlink" title="变量使用规则（重点）"></a>变量使用规则（重点）</h2><ul><li>有了作用域以后，变量就有了使用范围，也就有了使用规则</li><li>变量使用规则分为两种，<strong>访问规则</strong> 和 <strong>赋值规则</strong></li></ul><h3 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h3><ul><li><p>当我想获取一个变量的值的时候，我们管这个行为叫做 <strong>访问</strong></p></li><li><p>获取变量的规则： </p><ul><li>首先，在自己的作用域内部查找，如果有，就直接拿来使用</li><li>如果没有，就去上一级作用域查找，如果有，就拿来使用</li><li>如果没有，就继续去上一级作用域查找，依次类推</li><li>如果一直到全局作用域都没有这个变量，那么就会直接报错（该变量 is not defined）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 自己作用域内有，拿过来用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 自己作用域内没有，就去上一级，就是 fn 的作用域里面找，发现有，拿过来用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 自己这没有，去上一级 fn 那里也没有，再上一级到全局作用域，发现有，直接用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 自己没有，一级一级找上去到全局都没有，就会报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li><li><p>变量的访问规则 也叫做 作用域的查找机制</p></li><li><p>作用域的查找机制只能是向上找，不能向下找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 发现自己作用域没有，自己就是全局作用域，没有再上一级了，直接报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值规则"><a href="#赋值规则" class="headerlink" title="赋值规则"></a>赋值规则</h3><ul><li><p>当你想给一个变量赋值的时候，那么就先要找到这个变量，在给他赋值</p></li><li><p>变量赋值规则：</p><ul><li>先在自己作用域内部查找，有就直接赋值</li><li>没有就去上一级作用域内部查找，有就直接赋值</li><li>在没有再去上一级作用域查找，有就直接赋值</li><li>如果一直找到全局作用域都没有，那么就把这个变量定义为全局变量，在给他赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 调用以后，要给 num 赋值</span></span><br><span class="line"><span class="comment">// 查看自己的作用域内部没有 num 变量</span></span><br><span class="line"><span class="comment">// 就会向上一级查找</span></span><br><span class="line"><span class="comment">// 上一级就是全局作用域，发现依旧没有</span></span><br><span class="line"><span class="comment">// 那么就会把 num 定义为全局的变量，并为其赋值</span></span><br><span class="line"><span class="comment">// 所以 fn() 以后，全局就有了一个变量叫做 num 并且值是 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">要执行一个函数，我们必须要有方法定义函数、引用函数。</span><br><span class="line"></span><br><span class="line">匿名函数如何调用？</span><br><span class="line"></span><br><span class="line">匿名自执行函数，也叫立即执行函数(IIFE)。</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line">    console.log(123);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">小括号能把我们的表达式组合分块，并且每一块都有一个返回值，这个返回值实际上就是小括号中表达式的返回值。</span><br><span class="line"></span><br><span class="line">自执行函数的好处：独立的作用域，不会污染全局环境！</span><br><span class="line"></span><br><span class="line">传参：</span><br><span class="line">(function (a,b) &#123;</span><br><span class="line">    console.log(a + b);</span><br><span class="line">&#125;)(2,3);</span><br><span class="line"></span><br><span class="line">常见形式：</span><br><span class="line">(function () &#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(function()&#123;</span><br><span class="line">　　console.log(22);</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">!function() &#123;</span><br><span class="line">    console.log(33);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">+function() &#123;</span><br><span class="line">    console.log(55);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-function() &#123;</span><br><span class="line">    console.log(66);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"> ~function() &#123;</span><br><span class="line">   console.log(77);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><ul><li><p>什么是递归函数</p></li><li><p>在编程世界里面，递归就是一个自己调用自己的手段</p></li><li><p>递归函数： 一个函数内部，调用了自己，循环往复</p></li><li><p>一般来说，递归需要有边界条件、递归前进段和递归返回段。</p></li><li><p>当边界条件不满足时，递归前进；当边界条件满足时，递归返回。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码就是一个最简单的递归函数</span></span><br><span class="line"><span class="comment">// 在函数内部调用了自己，函数一执行，就调用自己一次，在调用再执行，循环往复，没有止尽</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li><li><p>其实递归函数和循环很类似</p></li><li><p>需要有初始化，自增，执行代码，条件判断的，不然就是一个没有尽头的递归函数，我们叫做 <strong>死递归</strong></p></li></ul><h3 id="简单实现一个递归"><a href="#简单实现一个递归" class="headerlink" title="简单实现一个递归"></a>简单实现一个递归</h3><ul><li><p>我们先在用递归函数简单实现一个效果</p></li><li><p>需求： 求 1 至 5 的和</p><ul><li>先算 1 + 2 得 3</li><li>再算 3 + 3 得 6</li><li>再算 6 + 4 得 10 </li><li>再算 10 + 5 得 15</li><li>结束</li></ul></li><li><p>开始书写，写递归函数先要写结束条件（为了避免出现 “死递归”）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>再写不满足条件的时候我们的递归处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不满足条件的时候，就是当前数字 + 比自己大 1 的数字</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="title function_">add</span>(n + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>老王有四个子女，老四比老三小2岁，老三比老二小2岁，老二比老大小2岁，老大现在16岁，问老四几岁？</p></li></ul><p>    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function countAge(who) &#123;</span><br><span class="line">       if (who == 1) &#123;</span><br><span class="line">           return 16;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return countAge(who - 1) - 2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   alert(countAge(4)); // 10</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62rFot"><img src="https://s3.ax1x.com/2021/03/18/62rFot.png" alt="62rFot.png"></a></p><p>注：递归函数在运行的时候，每调用一次函数就会在内存中开辟一块空间，内存消耗较大，注意防止栈溢出。 </p><p>递归算法一般用于解决三类问题：    </p><p>​1.数据的定义是按递归定义的;   </p><p>​2.问题解法按递归算法实现;    </p><p>​3.数据的结构形式是按递归定义的。 </p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数：用于创建特定类型的对象。</p><p> JS内部构造函数：Object、Number、String、Array、Function、Boolean等等… </p><p>当任意一个普通函数用于创建一类对象，并通过new操作符来调用时它就可以作为构造函数。 </p><p>构造函数一般首字母大写。 </p><hr><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>对象是一个复杂数据类型</li><li>对象是一组无序的键值对，是带有属性和方法的集合。</li><li>通俗讲，对象就是无序的数据集合。</li><li>属性是与对象相关的值，方法是能够在对象上执行的动作。 </li><li>对象的作用：用于在单个变量中存储多个值。</li></ul><h2 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h2><ul><li><p>字面量的方式创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; 键：值, 键：值 ...... &#125;;</span><br><span class="line">键：一般用双引号引起来（不用引号也可以）</span><br><span class="line">值：可以是任意类型的数据</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小错&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;hi，大家好&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内置构造函数的方式创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;小错&#x27;</span>;</span><br><span class="line">obj2.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj2.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hi，大家好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj2.<span class="property">name</span> );</span><br><span class="line">obj2.<span class="title function_">sayHi</span>( );</span><br></pre></td></tr></table></figure></li><li><p>操作对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">访问对象成员：</span><br><span class="line">    1. 对象.属性   对象.方法()</span><br><span class="line">    2. 对象[变量或字符串]</span><br><span class="line"></span><br><span class="line">删除属性：</span><br><span class="line">    delete obj.attr;</span><br><span class="line"></span><br><span class="line">遍历对象：&#123;&#125;</span><br><span class="line">    for / in 循环</span><br><span class="line">    for (var key in obj)&#123;</span><br><span class="line">        console.log( obj[key] );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="和new创建对象的对比"><a href="#和new创建对象的对比" class="headerlink" title="{}和new创建对象的对比"></a>{}和new创建对象的对比</h3><h3 id="字面量的优势："><a href="#字面量的优势：" class="headerlink" title="字面量的优势："></a>字面量的优势：</h3><p>  它的代码量更少，更易读；<br>  它可以强调对象就是一个简单的可变的散列表，而不必一定派生自某个类；<br>  对象字面量运行速度更快，因为它们可以在解析的时候被优化——它们不需要”作用域解析”！因为存在我们创建了一个同名构造函数Object()的可能，所以当我们调用Object()的时候，解析器需要顺着作用域链从当前作用域开始查找，如果在当前作用域找到了名为Object()的函数就执行，如果没找到，就继续顺着作用域链往上找，直到找到全局Object()构造函数为止</p><h3 id="构造函数的优势："><a href="#构造函数的优势：" class="headerlink" title="构造函数的优势："></a>构造函数的优势：</h3><p>  Object()构造函数可以接收参数，通过这个参数可以把对象实例的创建过程委托给另一个内置构造函数（Number()、String()等），并返回另一个对象实例。<br>  使用自定义构造函数创建对象，可以通过传参添加属性和方法，当需要定义的同类对象较多时，节省了定义对象的代码量，并且使对象属性和方法的结构更加清晰</p><hr><h1 id="数据类型之间存储的区别"><a href="#数据类型之间存储的区别" class="headerlink" title="数据类型之间存储的区别"></a>数据类型之间存储的区别</h1><ul><li>既然我们区分了基本数据类型和复杂数据类型</li><li>那么他们之间就一定会存在一些区别</li><li>他们最大的区别就是在存储上的区别</li><li>我们的存储空间分成两种 <strong>栈</strong> 和 <strong>堆</strong></li><li>栈： 主要存储基本数据类型的内容</li><li>堆： 主要存储复杂数据类型的内容</li></ul><h2 id="基本数据类型在内存中的存储情况"><a href="#基本数据类型在内存中的存储情况" class="headerlink" title="基本数据类型在内存中的存储情况"></a>基本数据类型在内存中的存储情况</h2><ul><li><code>var num = 100</code>，在内存中的存储情况</li><li><a href="https://imgtu.com/i/62rloq"><img src="https://s3.ax1x.com/2021/03/18/62rloq.png" alt="62rloq.png"></a></li><li>直接在 <strong>栈空间</strong> 内有存储一个数据</li></ul><h2 id="复杂数据类型在内存中的存储情况"><a href="#复杂数据类型在内存中的存储情况" class="headerlink" title="复杂数据类型在内存中的存储情况"></a>复杂数据类型在内存中的存储情况</h2><ul><li><p>下面这个 对象 的存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://imgtu.com/i/62rQwn"><img src="https://s3.ax1x.com/2021/03/18/62rQwn.png" alt="62rQwn.png"></a></p></li><li><p>复杂数据类型的存储</p><ol><li>在堆里面开辟一个存储空间</li><li>把数据存储到存储空间内</li><li>把存储空间的地址赋值给栈里面的变量</li></ol></li><li><p>这就是数据类型之间存储的区别</p></li></ul><h2 id="数据类型之间的赋值"><a href="#数据类型之间的赋值" class="headerlink" title="数据类型之间的赋值"></a>数据类型之间的赋值</h2><ul><li><p>基本数据类型之间的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = num</span><br><span class="line"></span><br><span class="line">num2 = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><ul><li>相当于是把 num 的值复制了一份一摸一样的给了 num2 变量</li><li>赋值以后两个在没有关系</li></ul></li><li><p>复杂数据类型之间的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// Rose</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>) <span class="comment">// Rose</span></span><br></pre></td></tr></table></figure><ul><li>因为复杂数据类型，变量存储的是地址，真实内容在 堆空间 内存储</li><li>所以赋值的时候相当于把 obj 存储的那个地址复制了一份给到了 obj2 变量</li><li>现在 obj 和 obj2 两个变量存储的地址一样，指向一个内存空间</li><li>所以使用 obj2 这个变量修改空间内的内容，obj 指向的空间也会跟着改变了</li></ul></li></ul><h2 id="数据类型之间的比较"><a href="#数据类型之间的比较" class="headerlink" title="数据类型之间的比较"></a>数据类型之间的比较</h2><ul><li><p>基本数据类型是 <strong>值</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == str) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>复杂数据类型是 <strong>地址</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == obj2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>因为我们创建了两个对象，那么就会在 堆空间 里面开辟两个存储空间存储数据（两个地址）</li><li>虽然存储的内容是一样的，那么也是两个存储空间，两个地址</li><li>复杂数据类型之间就是地址的比较，所以 <code>obj</code> 和 <code>obj2</code> 两个变量的地址不一样</li><li>所以我们得到的就是 <code>false</code></li></ul><p><a href="https://imgtu.com/i/62ridI"><img src="https://s3.ax1x.com/2021/03/18/62ridI.png" alt="62ridI.png"></a></p></li></ul><h2 id="函数的参数-1"><a href="#函数的参数-1" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul><li><p>函数的参数也是赋值的之中，在函数调用的时候，实参给行参赋值</p></li><li><p>和之前变量赋值的规则是一样的</p></li><li><p>函数传递基本数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  n = <span class="number">200</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="title function_">fn</span>(num)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>和之前变量赋值的时候一样，在把 num 的值复制了一份一摸一样的给到了函数内部的行参 n</li><li>两个之间在没有任何关系了</li></ul></li><li><p>函数传递复杂数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  o.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">name</span>) <span class="comment">// Rose</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(obj) <span class="comment">//所传递的就是obj的引用地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// Rose</span></span><br></pre></td></tr></table></figure><ul><li>和之前变量赋值的时候一样，把 obj 内存储的地址复制了一份一摸一样的给到函数内部的行参 o</li><li>函数外部的 obj 和函数内部的行参 o，存储的是一个地址，指向的是一个存储空间</li><li>所以两个变量操作的是一个存储空间</li><li>在函数内部改变了空间内的数据</li><li>obj 看到的也是改变以后的内容</li></ul></li></ul><hr><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>什么是数组？</li><li>数组，是有序的元素序列。 </li><li>通俗讲，数组就是有序的数据集合。 </li><li>数组属于对象类型。 </li><li>数组的作用：用于在单个变量中存储多个值。</li></ul><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><ul><li>数组就是一个 <code>[]</code></li><li>在 <code>[]</code> 里面存储着各种各样的数据，按照顺序依次排好</li></ul><h3 id="字面量创建一个数组"><a href="#字面量创建一个数组" class="headerlink" title="字面量创建一个数组"></a>字面量创建一个数组</h3><ul><li><p>直接使用 <code>[]</code> 的方式创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置构造函数创建数组"><a href="#内置构造函数创建数组" class="headerlink" title="内置构造函数创建数组"></a>内置构造函数创建数组</h3><ul><li><p>使用 js 的内置构造函数 <code>Array</code> 创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10 的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组的-length"><a href="#数组的-length" class="headerlink" title="数组的 length"></a>数组的 length</h3><ul><li><p>length:  长度的意思</p></li><li><p>length 就是表示数组的长度，数组里面有多少个成员，length 就是多少</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><ul><li><p>索引，也叫做下标，是指一个数据在数组里面排在第几个的位置</p></li><li><p>注意： <strong>在所有的语言里面，索引都是从 0 开始的</strong></p></li><li><p>在 js 里面也一样，数组的索引从 0 开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>上面这个数组中，1符串 <code>hello</code>，<strong>第 1 个</strong> 数据就是字符串 <code>world</code></p></li><li><p>想获取数组中的第几个就使用 <code>数组[索引]</code> 来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]) <span class="comment">// world</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ul><li><p>数组是一个复杂数据类型，我们在操作它的时候就不能再想基本数据类型一样操作了</p></li><li><p>比如我们想改变一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们想把数组变成只有 1 和 2</span></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>这样肯定是不合理，因为这样不是在改变之前的数组</li><li>相当于心弄了一个数组给到 arr 这个变量了</li><li>相当于把 arr 里面存储的地址给换了，也就是把存储空间换掉了，而不是在之前的空间里面修改</li><li>所以我们就需要借助一些方法，在不改变存储空间的情况下，把存储空间里面的数据改变了</li></ul></li></ul><h3 id="数组常用方法之-push"><a href="#数组常用方法之-push" class="headerlink" title="数组常用方法之 push"></a>数组常用方法之 push</h3><ul><li><p><code>push</code> 是用来在数组的末尾追加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 push 方法追加一个元素在末尾</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-pop"><a href="#数组常用方法之-pop" class="headerlink" title="数组常用方法之 pop"></a>数组常用方法之 pop</h3><ul><li><p><code>pop</code> 是用来删除数组末尾的一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 pop 方法删除末尾的一个元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-unshift"><a href="#数组常用方法之-unshift" class="headerlink" title="数组常用方法之 unshift"></a>数组常用方法之 unshift</h3><ul><li><p><code>unshift</code> 是在数组的最前面添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 unshift 方法想数组的最前面添加一个元素</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [4, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-shift"><a href="#数组常用方法之-shift" class="headerlink" title="数组常用方法之  shift"></a>数组常用方法之  shift</h3><ul><li><p><code>shift</code> 是删除数组最前面的一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 shift 方法删除数组最前面的一个元素</span></span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-splice"><a href="#数组常用方法之-splice" class="headerlink" title="数组常用方法之 splice"></a>数组常用方法之 splice</h3><ul><li><p><code>splice</code> 是截取数组中的某些内容，按照数组的索引来截取</p></li><li><p>语法： <code>splice(从哪一个索引位置开始，截取多少个，替换的新元素)</code> （第三个参数可以不写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2)</code> 表示从索引 1 开始截取 2 个内容</li><li>第三个参数没有写，就是没有新内容替换掉截取位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;我是新内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, &#x27;我是新内容&#x27;, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2, &#39;我是新内容&#39;)</code> 表示从索引 1 开始截取 2 个内容</li><li>然后用第三个参数把截取完空出来的位置填充</li></ul></li></ul><h3 id="数组常用方法之-reverse"><a href="#数组常用方法之-reverse" class="headerlink" title="数组常用方法之 reverse"></a>数组常用方法之 reverse</h3><ul><li><p><code>reverse</code> 是用来反转数组使用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reverse 方法来反转数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-sort"><a href="#数组常用方法之-sort" class="headerlink" title="数组常用方法之 sort"></a>数组常用方法之 sort</h3><ul><li><p><code>sort</code> 是用来给数组排序的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sort 方法给数组排序</span></span><br><span class="line"><span class="comment">//用法一</span></span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,11, 2,22,3,7]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>注：以上方法都会改变原数组！ </p><h3 id="数组常用方法之-concat"><a href="#数组常用方法之-concat" class="headerlink" title="数组常用方法之 concat"></a>数组常用方法之 concat</h3><ul><li><p><code>concat</code> 是把多个数组进行拼接</p></li><li><p>和之前的方法有一些不一样的地方，就是 <code>concat</code> 不会改变原始数组，而是返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat 方法拼接数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>concat 方法不会改变原始数组</strong></li></ul></li></ul><h3 id="数组常用方法之-join"><a href="#数组常用方法之-join" class="headerlink" title="数组常用方法之 join"></a>数组常用方法之 join</h3><ul><li><p><code>join</code> 是把数组里面的每一项内容链接起来，变成一个字符串</p></li><li><p>可以自己定义每一项之间链接的内容 <code>join(要以什么内容链接)</code></p></li><li><p>不会改变原始数组，而是把链接好的字符串返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 join 链接数组</span></span><br><span class="line"><span class="keyword">var</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 1-2-3</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>join 方法不会改变原始数组，而是返回链接好的字符串</strong></li></ul></li></ul><h3 id="数组常用方法之-indexOf"><a href="#数组常用方法之-indexOf" class="headerlink" title="数组常用方法之 indexOf"></a>数组常用方法之 indexOf</h3><ul><li><p><code>indexOf</code> 用来找到数组中某一项的索引</p></li><li><p>语法： <code>indexOf(你要找的数组中的项)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>我们要找的是数组中值为 3 的那一项</li><li>返回的就是值为 3 的那一项在该数组中的索引</li></ul></li><li><p>如果你要找的内容在数组中没有，那么就会返回 -1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><ul><li>你要找的值在数组中不存在，那么就会返回 -1</li></ul></li></ul><h3 id="数组常用方法之-lastIndexOf"><a href="#数组常用方法之-lastIndexOf" class="headerlink" title="数组常用方法之 lastIndexOf"></a>数组常用方法之 lastIndexOf</h3><ul><li><p>lastIndexOf 返回指定元素在数组中的最后一个的索引，不存在则返回 -1 </p></li><li><p>语法： lastIndexOf(你要找的数组中的项)&#96;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">lastIndexOf</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>我们要找的是数组中值为 3 的那一项</li><li>返回的就是值为 3 的那一项在该数组中的索引</li></ul></li><li><p>如果你要找的内容在数组中没有，那么就会返回 -1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">lastIndexOf</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><ul><li>你要找的值在数组中不存在，那么就会返回 -1</li></ul></li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><ul><li><p>slice() 方法可从已有的数组中返回选定的元素。</p><p>slice()方法可提取数组的某个部分，并以新的数组返回被提取的部分。</p><p>语法：<em>array</em>.slice(<em>start</em>, <em>end</em>)</p><p><strong>注意：</strong> slice() 方法不会改变原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">var citrus = fruits.slice(1,3);</span><br><span class="line">citrus 的结果是：Orange,Lemon</span><br></pre></td></tr></table></figure><p>如果某个参数为负，则从数组的结尾开始计数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">var myBest = fruits.slice(-3,-1);</span><br><span class="line">myBest 的结果是：Lemon,Apple</span><br></pre></td></tr></table></figure></li></ul><p>注：以上方法不会改变原数组！ </p><h2 id="for-和-for-in-循环"><a href="#for-和-for-in-循环" class="headerlink" title="for 和 for in 循环"></a>for 和 for in 循环</h2><ul><li><p>因为数组的索引就可以获取数组中的内容</p></li><li><p>数组的索引又是按照 0 ～ n 顺序排列</p></li><li><p>我们就可以使用 for 循环来循环数组，因为 for 循环我们也可以设置成 0 ～ n 顺序增加</p></li><li><p>我们把这个行为叫做 <strong>遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会在控制台依次打印出 1， 2， 3， 4， 5</span></span><br></pre></td></tr></table></figure><ul><li><code>i &lt; arr.length</code> 因为 length 就是数组的长度，就是一个数字，所以我们可以直接用它来决定循环次数</li><li><code>console.log(arr[i])</code> 因为随着循环，i 的值会从 0 开始依次增加</li><li>所以我们实际上就相当于在打印 <code>arr[0]</code> &#x2F; <code>arr[1]</code> &#x2F; …</li></ul></li><li><p>因为 <strong>对象</strong> 是没有索引的，所以我们没有办法使用 for 循环来遍历</p></li><li><p>这里我们使用 for in 循环来遍历对象</p></li><li><p>先来看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会在控制台打印两次内容，分别是 name 和 age</span></span><br></pre></td></tr></table></figure><ul><li>for in 循环的遍历是按照对象中有多少成员来决定了</li><li>有多少成员，就会执行多少次</li><li><code>key</code> 是我们自己定义的一个变量，就和 for 循环的时候我们定义的 i 一个道理</li><li>在每次循环的过程中，key 就代表着对象中某一个成员的 <strong>属性名</strong></li></ul></li></ul><h3 id="for…of：ES6新增"><a href="#for…of：ES6新增" class="headerlink" title="for…of：ES6新增"></a>for…of：ES6新增</h3><ul><li><strong>for…of语句</strong>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/iterable">可迭代对象</a>（包括<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array"><code>Array</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map"><code>Map</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String"><code>String</code></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">arguments</a> 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (variable of iterable) &#123;  </span><br><span class="line">statement</span><br><span class="line">&#125;</span><br><span class="line">variable在每次迭代中，将不同属性的值分配给变量。iterable可枚举其枚举属性的对象。</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">迭代Array</span><br><span class="line">var iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (var value of iterable) &#123;</span><br><span class="line">  value += 1;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 11</span><br><span class="line">// 21</span><br><span class="line">// 31</span><br><span class="line"></span><br><span class="line">迭代String</span><br><span class="line">var iterable = &#x27;boo&#x27;;</span><br><span class="line"></span><br><span class="line">for (var value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;b&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li><p>和 for 循环一个作用，就是用来遍历数组的</p></li><li><p>强制遍历所有元素，不能使用break结束</p></li><li><p>语法：<code>arr.forEach(function (item, index, arr) &#123;&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 遍历数组</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项元素</span></span><br><span class="line">  <span class="comment">// index 就是数组的元素索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组的第 &#x27;</span> + index + <span class="string">&#x27; 项的值是 &#x27;</span> + item + <span class="string">&#x27;，原始数组是&#x27;</span>, arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>forEach() 的时候传递的那个函数，会根据数组的长度执行</li><li>数组的长度是多少，这个函数就会执行多少回</li></ul></li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li><p>和 forEach 类似，只不过可以对数组中的每一项进行操作，返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map 遍历数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [11, 12, 13]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul><li><p>和 map 的使用方式类似，按照我们的条件来筛选数组</p></li><li><p>把原始数组中满足条件的筛选出来，组成一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 filter 过滤数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li><p>我们设置的条件就是 <code>&gt; 1</code></p></li><li><p>返回的新数组就会是原始数组中所有 <code>&gt; 1</code> 的项</p></li></ul></li></ul><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><ul><li>用于检测数组中的元素是否满足指定条件 </li><li>会依次执行数组的每个元素：<ul><li>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul></li></ul><p>注：some() 不会对空数组进行检测。 </p><p>​ some() 不会改变原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3]</span><br><span class="line">   // 使用 some 判断数组元素是否满足条件</span><br><span class="line">   var newArr = arr.some(function (item, index, arr) &#123;</span><br><span class="line">       return item &gt; 1</span><br><span class="line">   &#125;)</span><br><span class="line">   console.log(newArr) // true</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><ul><li>用于检测数组所有元素是否都符合指定条件（通过函数提供） </li><li>使用指定函数检测数组中的所有元素： <ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 <em>false</em> ，且剩余的元素不会再进行检测。 </li><li>如果所有元素都满足条件，则返回 true。</li></ul></li></ul><p>注：every() 不会对空数组进行检测。 </p><p>​ every() 不会改变原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3]</span><br><span class="line">   // 使用 every 判断数组中所有元素是否满足条件</span><br><span class="line">   var newArr = arr.every(function (item, index, arr) &#123;</span><br><span class="line">       return item &gt; 2</span><br><span class="line">   &#125;)</span><br><span class="line">   console.log(newArr) // false</span><br></pre></td></tr></table></figure><h3 id="reduceRight-和-reduce"><a href="#reduceRight-和-reduce" class="headerlink" title="reduceRight 和 reduce"></a>reduceRight 和 reduce</h3><ul><li><p> reduce() 方法接收一个函数callback fn作为累加器(accumulator) 数组中每个值(从左到右)开始合并,最终合成一个值 </p></li><li><p>reduceRight() 方法的功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加。 </p></li><li><p><strong>注意:</strong> reduce() 对于空数组是不会执行回调函数的。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//prev：它是上一次调用回调时返回的结果，每次调用的结果都会给prev</span></span><br><span class="line"><span class="comment">//cur：当前的元素</span></span><br><span class="line"><span class="comment">//index：当前的索引</span></span><br><span class="line"><span class="comment">//arr：循环的数组</span></span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line"><span class="comment">//函数累计处理的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：求数组的和。</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> str = a.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,cur,index,arr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> prev + cur ;</span><br><span class="line">&#125;)</span><br><span class="line">str <span class="comment">// 55;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：求阶乘</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> str = a.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,cur,index,arr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> prev * cur ;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">str <span class="comment">//3628800</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><ul><li>排序，就是把一个乱序的数组，通过我们的处理，让他变成一个有序的数组</li></ul><h3 id="函数排序"><a href="#函数排序" class="headerlink" title="函数排序"></a>函数排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sort</span>( [fn] ) 排序，返回数组</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(); <span class="comment">//默认按照字符编码排序，先比较第一位字符</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a,b</span>) &#123; <span class="comment">//升序，只能对数值排序</span></span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a,b</span>) &#123; <span class="comment">//降序，只能对数值排序</span></span><br><span class="line">    <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>先遍历数组，让挨着的两个进行比较，如果前一个比后一个大，那么就把两个换个位置</li><li>数组遍历一遍以后，那么最后一个数字就是最大的那个了</li><li>然后进行第二遍的遍历，还是按照之前的规则，第二大的数字就会跑到倒数第二的位置</li><li>以此类推，最后就会按照顺序把数组排好了<ol><li>我们先来准备一个乱序的数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>接下来我们就会用代码让数组排序</li></ul></li><li>先不着急循环，先来看数组里面内容换个位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定我现在要让数组中的第 0 项和第 1 项换个位置</span></span><br><span class="line"><span class="comment">// 需要借助第三个变量</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = arr[<span class="number">1</span>]</span><br><span class="line">arr[<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure></li><li>第一次遍历数组，把最大的放到最后面去<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">    arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">    arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历完毕以后，数组就会变成 [3, 1, 5, 6, 4, 7, 2, 8, 9]</span></span><br></pre></td></tr></table></figure><ul><li>第一次结束以后，数组中的最后一个，就会是最大的那个数字</li><li>然后我们把上面的这段代码执行多次。数组有多少项就执行多少次</li></ul></li><li>按照数组的长度来遍历多少次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结束以后，数组就排序好了</span></span><br></pre></td></tr></table></figure></li><li>给一些优化<ul><li>想象一个问题，假设数组长度是 9，第八次排完以后</li><li>后面八个数字已经按照顺序排列好了，剩下的那个最小的一定是在最前面</li><li>那么第九次就已经没有意义了，因为最小的已经在最前面了，不会再有任何换位置出现了</li><li>那么我们第九次遍历就不需要了，所以我们可以减少一次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第二个问题，第一次的时候，已经把最大的数字放在最后面了</li><li>那么第二次的时候，其实倒数第二个和最后一个就不用比了</li><li>因为我们就是要把倒数第二大的放在倒数第二的位置，即使比较了，也不会换位置</li><li>第三次就要倒数第三个数字就不用再和后两个比较了</li><li>以此类推，那么其实每次遍历的时候，就遍历当前次数 - 1 次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>至此，一个冒泡排序就完成了</li><li>口诀：<ul><li>双层for循环，一层减一层，里层减外层，变量相交换。</li></ul></li></ol></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>先假定数组中的第 0 个就是最小的数字的索引</li><li>然后遍历数组，只要有一个数字比我小，那么就替换之前记录的索引</li><li>直到数组遍历结束后，就能找到最小的那个索引，然后让最小的索引换到第 0 个的位置</li><li>再来第二趟遍历，假定第 1 个是最小的数字的索引</li><li>在遍历一次数组，找到比我小的那个数字的索引</li><li>遍历结束后换个位置</li><li>依次类推，也可以把数组排序好<ol><li><p>准备一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></li><li><p>假定数组中的第 0 个是最小数字的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>遍历数组，判断，只要数字比我小，那么就替换掉原先记录的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line"><span class="comment">// 让第 minIndex 个和第 0 个交换</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">arr[minIndex] = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = tmp</span><br></pre></td></tr></table></figure></li><li><p>按照数组的长度重复执行上面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">  <span class="comment">// 因为第一遍的时候假定第 0 个，第二遍的时候假定第 1 个</span></span><br><span class="line">  <span class="comment">// 所以我们要假定第 j 个就行</span></span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 因为之前已经把最小的放在最前面了，后面的循环就不需要判断前面的了</span></span><br><span class="line">  <span class="comment">// 直接从 j + 1 开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line">  <span class="comment">// 第一堂的时候是和第 0 个交换，第二趟的时候是和第 1 个交换</span></span><br><span class="line">  <span class="comment">// 我们直接和第 j 个交换就行</span></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一些优化</p><ul><li><p>和之前一样，倒数第二次排序完毕以后，就已经排好了，最后一次没有必要了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在交换变量之前，可以判断一下，如果我们遍历后得到的索引和当前的索引一直</p></li><li><p>那么就证明当前这个就是目前最小的，那么就没有必要交换</p></li><li><p>做一我们要判断，最小作引和当前作引不一样的时候，才交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (minIndex !== j) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">    arr[minIndex] = arr[j]</span><br><span class="line">    arr[j] = tmp   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，选择排序完成</p></li></ol></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>找中点，分左右，递归运算……</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr)&#123;</span><br><span class="line">    // 递归出口</span><br><span class="line">    if (arr.length &lt;= 1) return arr;</span><br><span class="line">    // 找中点(中点的下标及值)</span><br><span class="line">    var midIndex = parseInt( arr.length/2 );</span><br><span class="line">    var mid = arr[midIndex];</span><br><span class="line">    // 分左右</span><br><span class="line">    var left = [];</span><br><span class="line">    var right = [];</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">        if (arr[i] === mid) &#123;</span><br><span class="line">            continue; //跳过本次循环</span><br><span class="line">        &#125;</span><br><span class="line">        if (arr[i] &lt; mid) &#123;//与中点比较分左右</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 递归运算(左中右三个数组合并)</span><br><span class="line">    return quickSort(left).concat([mid],quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ES5-String"><a href="#ES5-String" class="headerlink" title="ES5&#x2F;String"></a>ES5&#x2F;String</h1><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><ul><li>this 只能出现在作用域里面</li><li>this一般都是出现在函数内部</li></ul><ol><li><p>全局作用域下的this 永远都是window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a=10</span><br><span class="line">console.log(this)</span><br></pre></td></tr></table></figure></li><li><p>函数中的this：</p></li></ol><ul><li>不一样的函数调用里面的this也是不一样的</li><li>直接以 函数名() 调用的，this就是window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//window</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//obj 这个对象中的fn成员存储的是一个函数地址</span></span><br><span class="line"><span class="comment">//把这个函数地址赋值给a</span></span><br><span class="line"><span class="comment">// a存储的也是一个函数地址</span></span><br><span class="line"><span class="keyword">var</span> a=obj.<span class="property">fn</span></span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>写 对象名.函数名()  调用的this都是 . 前面的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//Object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//Object</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在obj这个对象里定义了一个成员fn,这个成员地址就是一个函数地址</span></span><br><span class="line"><span class="comment">//obj的fn成员可以当作函数来调用</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//Object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//把全局fn函数的地址给了obj的fn2成员</span></span><br><span class="line">    <span class="comment">//obj的fn2成员存储的就是fn函数的地址</span></span><br><span class="line">    <span class="attr">fn2</span>:fn,</span><br><span class="line">    <span class="attr">fn3</span>:fun</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fn2</span>()</span><br><span class="line">obj.<span class="title function_">fn3</span>()</span><br></pre></td></tr></table></figure></li><li><p>使用事件调用的函数时，this指向的是事件源</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//&lt;div id=&#x27;box&#x27;&gt;点击&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> fun=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//&lt;div id=&#x27;box&#x27;&gt;点击&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//在obj这个对象里定义了一个成员fn,这个成员地址就是一个函数地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//obj的fn成员可以当作函数来调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj=&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//Object</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//使用事件调用的函数叫作事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数内部的this指向的是事件源</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//&lt;div id=&#x27;box&#x27;&gt;点击&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">onclick</span>=fn</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">onclick</span>=fun</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">onclick</span>=obj.<span class="property">fn</span></span></span><br><span class="line"><span class="language-javascript">&lt;/script</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自执行函数里的 this 也是window对象</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h2 id="严格模式（了解）"><a href="#严格模式（了解）" class="headerlink" title="严格模式（了解）"></a>严格模式（了解）</h2><ul><li>除了正常运行模式，ECMAscript5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。 </li><li>设立”严格模式”的目的，主要有以下几个：   <ol><li>消除JavaScript语法的一些不合理、不严谨之处，减少一些怪异行为;    </li><li>消除代码运行的一些不安全之处，保证代码运行的安全；    </li><li>提高编译器效率，增加运行速度；    </li><li>为未来新版本的JavaScript做好铺垫。 进入”严格模式”的标志：”use strict”;</li></ol></li></ul><h3 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h3><ul><li><p>想开启严格模式，直接在代码最开始的位置写上字符串 <code>use strict</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">&#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 下面代码书写就要按照严格模式来书写</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="严格模式的规则"><a href="#严格模式的规则" class="headerlink" title="严格模式的规则"></a>严格模式的规则</h3><ol><li><p>声明变量必须有 <code>var</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">num2 = <span class="number">200</span> <span class="comment">// 这个就会报错</span></span><br></pre></td></tr></table></figure><ul><li>之前了解过，在声明变量的时候，如果没有 var 关键字，那么按照作用域的规则会自动定义成全局变量</li><li>严格模式下不可以，会报错</li></ul></li><li><p>函数的行参不可以重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">p1, p1</span>) &#123;&#125; <span class="comment">// 直接就会报错</span></span><br></pre></td></tr></table></figure><ul><li>在非严格模式下，函数两个行参一样，是不会报错的，只不过就是相当于在函数内部只有一个变量了</li><li>但是在严格模式下会报错</li></ul></li><li><p>声明式函数调用的时候函数内部没有 this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strtic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li>本身，全局声明式函数在调用的时候，函数内部的 this 是指向 window 的</li><li>在严格模式下，是没有 this 的</li></ul></li></ol><h4 id="ES5严格模式的限制规范："><a href="#ES5严格模式的限制规范：" class="headerlink" title="ES5严格模式的限制规范："></a>ES5严格模式的限制规范：</h4><ol><li>变量声明必须使用var，否则报错</li><li>对不合理的操作显示报错，不再做静默失败处理</li><li>禁止对象属性重名（IE）</li><li>禁止函数参数重名</li><li>禁止使用以0开头的八进制数字<br>ES6新的语法标准，八进制以0o来表示，与16进制的0x形成统一的语法格式</li><li>禁止使用with语句</li><li>强制为eval创建新作用域<br>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。<br>如果参数是一个表达式，eval() 函数将执行表达式。<br>如果参数是Javascript语句，eval()将执行 Javascript 语句。<br>严格模式为JavaScript程序创建了第三种作用域：eval作用域</li><li>arguments不再追踪参数变化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="title function_">alert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li>禁止使用arguments.callee<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在匿名的递归函数中</span></span><br><span class="line"><span class="keyword">var</span> factorialArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">2</span>) ? <span class="number">1</span> : <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(factorialArray);</span><br></pre></td></tr></table></figure></li><li>禁止this指向全局对象window，this变成undefined</li><li>函数必须声明在整个脚本或函数层面</li><li>新增一些保留字，不能使用他们作为标识符命名<br> implements, interface, let, package, private, protected, public, static, yield</li></ol><h2 id="创建字符串（了解）"><a href="#创建字符串（了解）" class="headerlink" title="创建字符串（了解）"></a>创建字符串（了解）</h2><ul><li>我们创建字符串也分为两种方法 <strong>字面量</strong> 和 <strong>构造函数</strong></li><li>字面量： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li>构造函数创建<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="编码字符集-（了解）"><a href="#编码字符集-（了解）" class="headerlink" title="编码字符集 （了解）"></a>编码字符集 （了解）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">编码字符集：（简称字符集，如ASCII、GBK、Unicode）</span><br><span class="line">编码字符集，用一个编码值来表示一个字符在库表中的位置，这个值称为字符对应于编码字符集的序号。</span><br><span class="line">ASCII码是一套编码规则，规定了常用符号用哪些二进制数来表示。</span><br><span class="line">ASCII码占用一个字节，可以有0～255共256个取值。前128个为常用的字符如运算符，字母 ，数字等键盘上可以显示的，后 128个为特殊字符是键盘上找不到的字符。</span><br><span class="line">ASCII编码主要针对的是英语，全世界有上百种语言，中国制定了GB2312编码，日本制定了Shift_JIS编码，韩国制定了Euc-kr编码...</span><br><span class="line">各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</span><br><span class="line">Unicode编码把所有语言都统一到一套编码里，这样就不会再有乱码问题了！</span><br><span class="line">Unicode 编码是一个很大的集合，现在的规模可以容纳100多万个符号。</span><br><span class="line">Unicode 编码开头的 128 个和 ASCII 编码一样。</span><br><span class="line">编码字符集Unicode，有UTF-8、UTF-16、UTF-32等多种字符编码。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/620Zz4"><img src="https://s3.ax1x.com/2021/03/18/620Zz4.png" alt="620Zz4.png"></a><br><a href="https://imgtu.com/i/620mQJ"><img src="https://s3.ax1x.com/2021/03/18/620mQJ.png" alt="620mQJ.png"></a></p><ul><li>上面的就是 ASCII 对照表，我们只需要知道他是这么存储的就好</li></ul><h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><ul><li>我们操作字符串，也有一堆的方法来帮助我们操作</li><li>字符串和数组有一个一样的地方，也是按照索引来排列的</li></ul><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><ul><li><p><code>charAt(索引)</code>  是找到字符串中指定索引位置的内容返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charAt</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// c</span></span><br></pre></td></tr></table></figure><ul><li>因为字符串也是按照索引进行排列的，也是同样从 0 开始</li><li>所以索引 2 的位置就是 c</li></ul></li><li><p>如果没有对应的索引，那么就会返回 空字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charAt</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>这个字符串根本没有索引 10 的位置</li><li>所以就会返回一个空字符串 <code>&#39;&#39;</code></li></ul></li></ul><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h3><ul><li><p><code>charCodeAt(索引)</code> 就是返回对应索引位置内容的 unicode 编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 74</span></span><br></pre></td></tr></table></figure><ul><li>因为 <code>J</code> 在 unicode 对照表里面存储的是 74，所以就会返回 74</li></ul></li></ul><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ul><li><p><code>indexOf</code> 就是按照字符找到对应的索引，从左往右查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 找到对应的索引</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;J&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>因为字符 <code>J</code> 在字符串 <code>Jack</code> 中的索引位置是 0</li><li>所以会返回 0</li></ul></li></ul><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><ul><li><p>lastIndexOf 返回指定文本在字符串中<em>最后</em>一次出现的索引 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;The full name of China is the People&#x27;s Republic of China.&quot;;</span><br><span class="line">var pos = str.lastIndexOf(&quot;China&quot;);</span><br></pre></td></tr></table></figure><p>注：如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1</p></li></ul><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><ul><li><p>slice() 提取字符串的某个部分并在新字符串中返回被提取的部分。</p><p>该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Apple, Banana, Mango&quot;;</span><br><span class="line">var res = str.slice(7,13); </span><br><span class="line">res 的结果是：Banana</span><br></pre></td></tr></table></figure><p>如果某个参数为负，则从字符串的结尾开始计数。</p><p>这个例子裁剪字符串中位置 -12 到位置 -6 的片段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Apple, Banana, Mango&quot;;</span><br><span class="line">var res = str.slice(-13,-7);</span><br><span class="line">res 的结果是：Banana</span><br></pre></td></tr></table></figure></li></ul><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><ul><li><p><code>substring</code> 是用来截取字符串使用的</p></li><li><p>语法： <code>substring(从哪个索引开始，到哪个索引截止)</code>，包含开始索引，不包含结束索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"><span class="comment">// 使用 substring 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr) <span class="comment">// el</span></span><br></pre></td></tr></table></figure><ul><li>从索引 1 开始，到索引 3 截止，包含前面的索引不包含后面的索引</li><li>所以返回的是 el</li></ul></li></ul><p>substring() 类似于 slice()。<br>不同之处在于 substring() 无法接受负的索引。</p><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><ul><li><p><code>substr</code> 也是用来截取字符串的</p></li><li><p>语法：<code>substr(从哪个索引开始，截取多少个)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"><span class="comment">// 使用 substr 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr) <span class="comment">// ell</span></span><br></pre></td></tr></table></figure><ul><li>这个方法和 <code>substring</code> 不一样的是，第二个参数是截取多少个</li><li>从索引 1 开始，截取 3 个，所以得到的是 <code>ell</code></li></ul></li></ul><p>substr() 类似于 slice()。<br>不同之处在于第二个参数规定被提取部分的<em>长度</em>。</p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><ul><li>用另一个值替换在字符串中指定的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft and Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">replace</span>(<span class="string">&quot;Microsoft&quot;</span>, <span class="string">&quot;W3School&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)  <span class="comment">//Please visit W3School and Microsoft!</span></span><br></pre></td></tr></table></figure><p>默认地，replace() <em>只替换首个匹配</em> </p><ul><li>replace() 对大小写敏感</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">replace</span>(<span class="string">&quot;MICROSOFT&quot;</span>, <span class="string">&quot;W3School&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)  <span class="comment">//Please visit Microsoft!</span></span><br></pre></td></tr></table></figure><p>如需执行大小写不敏感的替换，请使用正则表达式 &#x2F;i（大小写不敏感） </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">replace</span>(<span class="regexp">/MICROSOFT/i</span>, <span class="string">&quot;W3School&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)  <span class="comment">//Please visit W3School!</span></span><br></pre></td></tr></table></figure><p>如需替换所有匹配，请使用正则表达式的 g 标志 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft and Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">replace</span>(<span class="regexp">/Microsoft/g</span>, <span class="string">&quot;W3School&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)  <span class="comment">//Please visit W3School and W3School!</span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul><li>连接两个或多个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> text2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">text3 = text1.<span class="title function_">concat</span>(<span class="string">&quot; &quot;</span>,text2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text3) <span class="comment">//Hello World</span></span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><ul><li>删除字符串两端的空白符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;       Hello World!        &quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(str.<span class="title function_">trim</span>());</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><ul><li>字符串分割，将字符串转换为数组 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;a,b,c,d,e&quot;</span>;   <span class="comment">// 字符串</span></span><br><span class="line">txt.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);          <span class="comment">// 用逗号分隔</span></span><br><span class="line">txt.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);          <span class="comment">// 用空格分隔</span></span><br><span class="line">txt.<span class="title function_">split</span>(<span class="string">&quot;|&quot;</span>);          <span class="comment">// 用竖线分隔</span></span><br></pre></td></tr></table></figure></li></ul><p>如果省略分隔符，被返回的数组将包含 index [0] 中的整个字符串。<br>如果分隔符是 “”，被返回的数组将是间隔单个字符的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;Hello&quot;</span>;       <span class="comment">// 字符串</span></span><br><span class="line">txt.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);           <span class="comment">// 分隔为字符</span></span><br></pre></td></tr></table></figure><h3 id="toLowerCase-和-toUpperCase"><a href="#toLowerCase-和-toUpperCase" class="headerlink" title="toLowerCase 和 toUpperCase"></a>toLowerCase 和 toUpperCase</h3><ul><li><p>这两个方法分别使用用来给字符串转成 小写字母 和 大写字母 的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = hello</span><br><span class="line"><span class="comment">// 使用 toUpperCase 转换成大写</span></span><br><span class="line"><span class="keyword">var</span> upper = str.<span class="title function_">toUpperCase</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(upper) <span class="comment">// HELLO</span></span><br><span class="line"><span class="comment">// 使用 toLowerCase 转换成小写</span></span><br><span class="line"><span class="keyword">var</span> lower = upper.<span class="title function_">toLowerCase</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lower) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Math-和-Date"><a href="#Math-和-Date" class="headerlink" title="Math 和 Date"></a>Math 和 Date</h1><ul><li>Math 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 <strong>数字</strong></li><li>Date 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 <strong>时间</strong></li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul><li>没有什么多余的东西，就是一堆的方法来操作数字</li></ul><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><ul><li><p><code>Math.random()</code> 这个方法是用来生成一个 <code>0 ~ 1</code> 之间的随机数</p></li><li><p>每次执行生成的数字都不一样，但是一定是 <code>0 ~ 1</code> 之间的</p></li><li><p>生成的数字包含 0 ，但是不包含 1，[0,1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 得到一个随机数</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><ul><li><p><code>Math.round()</code> 是将一个小数 <strong>四舍五入</strong> 变成一个整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h3><ul><li><p><code>Math.abs()</code> 是返回一个数字的绝对值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = -<span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">abs</span>(num)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h3><ul><li><p><code>Math.ceil()</code> 是将一个小数 <strong>向上取整</strong> 得到的整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num)) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><ul><li><p><code>Math.floor()</code> 是将一个小数 <strong>向下取整</strong> 的到的整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num2)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><ul><li><p><code>Math.max()</code> 得到的是你传入的几个数字之中最大的那个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><ul><li><p><code>Math.min()</code> 得到的是你传入的几个数字之中最小的那个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a>PI</h3><ul><li><p><code>Math.PI</code> 得到的是 <code>π</code> 的值，也就是 <code>3.1415926...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>) <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><ul><li>因为计算机的计算精度问题，只能得到小数点后 15 位</li><li><strong>使用 Math.PI 的时候，是不需要加 () 的</strong></li></ul></li></ul><h3 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h3><ul><li><p><code>Math.pow(x,y)</code> 返回 x 的 y 次幂的值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><ul><li><p><code>Math.sqrt(x)</code> 返回一个数的平方根 。</p></li><li><p>注： x必须是大于等于 0 的数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">9</span>)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>js 提供的内置构造函数。</li><li>Date 对象用于处理日期与时间。 </li><li>Date 对象自动使用当前系统的日期和时间作为其初始值。</li></ul><p>注：UTC国际标准时间又称世界时，以零经度线上的时间作为国际上统一采用的标准时间。因为零经度线通过英国格林尼治天文台，所以国际标准时间也称为格林尼治时间GMT。国际标准时间的起点：1970&#x2F;01&#x2F;01 00:00:00 北京时区的时间起点：1970&#x2F;01&#x2F;01 08:00:00所以，北京时间 &#x3D; 国际标准时间 + 8小时 </p><h3 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h3><ul><li><p><code>new Date()</code> 在不传递参数的情况下是默认返回当前时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// 当前时间 Fri Mar 01 2019 13:11:23 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line">其下面几种格式都可以：</span><br><span class="line">　　<span class="comment">// new Date(&quot;month dd,yyyy hh:mm:ss&quot;);</span></span><br><span class="line">　　<span class="comment">// new Date(&quot;month dd,yyyy&quot;);</span></span><br><span class="line">　　<span class="comment">// new Date(yyyy,mth,dd,hh,mm,ss);</span></span><br><span class="line">　　<span class="comment">// new Date(yyyy,mth,dd);</span></span><br><span class="line">　　<span class="comment">// new Date(ms);</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 在传入参数的时候，可以获取到一个你传递进去的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-03-03 13:11:11&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sun Mar 03 2019 13:11:11 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 传递的参数有多种情况</p><ol><li><p>传递两个数字，第一个表示年，第二个表示月份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>) <span class="comment">// 月份从 0 开始计数，0 表示 1月，11 表示 12月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Tue Jan 01 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递三个数字，前两个不变，第三个表示该月份的第几天，从 1 到 31</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递四个数字，前三个不变，第四个表示当天的几点，从 0 到 23</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递五个数字，前四个不变，第五个表示的是该小时的多少分钟，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:33:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递六个数字，前五个不变，第六个表示该分钟的多少秒，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">55</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time) <span class="comment">// Sat Jan 05 2019 22:33:55 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传入字符串的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019&#x27;</span>)) </span><br><span class="line"><span class="comment">// Tue Jan 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02&#x27;</span>)) </span><br><span class="line"><span class="comment">// Fri Feb 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03&#x27;</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:&#x27;</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:13:&#x27;</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-02-03 13:13:13&#x27;</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="将日期字符串格式化成指定内容"><a href="#将日期字符串格式化成指定内容" class="headerlink" title="将日期字符串格式化成指定内容"></a>将日期字符串格式化成指定内容</h2><ul><li>比如我们得到的时间字符串是 <code>Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</code></li><li>我指向得到这个日期中是那一年，我们就要靠截取字符串的形式得到</li><li>但是现在 js 为我们提供了一系列的方法来得到里面的指定内容</li></ul><h3 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear"></a>getFullYear</h3><ul><li><p><code>getFullYear()</code> 方式是得到指定字符串中的哪一年</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getFullYear</span>()) <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth"></a>getMonth</h3><ul><li><p><code>getMonth()</code> 方法是得到指定字符串中的哪一个月份 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMonth</span>()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>这里要有一个注意的地方</li><li>月份是从 0 开始数的</li><li>0 表示 1月，1 表示 2月，依此类推</li></ul></li></ul><h3 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h3><ul><li><p><code>getDate()</code> 方法是得到指定字符串中的哪一天</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDate</span>()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h3><ul><li><p><code>getHours()</code> 方法是得到指定字符串中的哪小时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getHours</span>()) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h3><ul><li><p><code>getMinutes()</code> 方法是得到指定字符串中的哪分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getMinutes</span>()) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h3><ul><li><p><code>getSeconds()</code> 方法是得到指定字符串中的哪秒钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getSeconds</span>()) <span class="comment">// 22</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getDay"><a href="#getDay" class="headerlink" title="getDay"></a>getDay</h3><ul><li><p><code>getDay()</code> 方法是得到指定字符串当前日期是一周中的第几天（周日是 0，周六是 6）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getDay</span>()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h3><ul><li><p><code>getTime()</code> 方法是得到执行时间到 <code>格林威治时间</code> 的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time.<span class="title function_">getTime</span>()) <span class="comment">// 1554681622000</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h3><ul><li><p>toLocaleString()   返回一个’年月日 时分秒’的本地格式字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.toLocaleString();</span><br></pre></td></tr></table></figure></li></ul><h3 id="toLocaleDateString"><a href="#toLocaleDateString" class="headerlink" title="toLocaleDateString"></a>toLocaleDateString</h3><ul><li><p>toLocaleDateString ()   返回一个’年月日’的本地格式字符串 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.toLocaleDateString();</span><br></pre></td></tr></table></figure></li></ul><h3 id="setFullYear"><a href="#setFullYear" class="headerlink" title="setFullYear"></a>setFullYear</h3><ul><li><p>setFullYear() 方法用于设置年份。</p><p>这个方法可用于设置月份及月份中的一天。</p><p>语法：<em>Date</em>.setFullYear(<em>year</em>,<em>month</em>,<em>day</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setFullYear(2020);</span><br><span class="line">console.log(d) //Thu Aug 27 2020 23:52:25 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var d=new Date();</span><br><span class="line">d.setFullYear(2020,10,3);</span><br><span class="line">console.log(d) //Tue Nov 03 2020 23:52:25 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="setMonth"><a href="#setMonth" class="headerlink" title="setMonth"></a>setMonth</h3><ul><li><p>setMonth() 方法用于设置月份。</p><p><strong>注意：</strong> 一月为 0， 十二月为 11</p><p>这个方法可用于设置月份中的某一天</p><p>语法：<em>Date</em>.setMonth(<em>month</em>,<em>day</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setMonth(4);</span><br><span class="line">console.log(d) //Mon May 27 2019 23:56:08 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var d = new Date();</span><br><span class="line">d.setMonth(4,20);</span><br><span class="line">console.log(d) //Mon May 20 2019 23:56:08 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="setDate"><a href="#setDate" class="headerlink" title="setDate"></a>setDate</h3><ul><li><p>setDate() 方法用于设置一个月的某一天。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setDate(15);</span><br><span class="line">console.log(d) //Wed Jul 31 2019 23:50:03 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="setHours"><a href="#setHours" class="headerlink" title="setHours"></a>setHours</h3><ul><li><p>setHours() 方法用于设置指定的时间的小时字段。</p><p>该方法可用于设置分钟，秒以及毫秒数。</p><p>语法：<em>Date</em>.setHours(<em>hour,min,sec,millisec</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setHours(15);</span><br><span class="line">console.log(d) //Tue Aug 27 2019 15:58:53 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var d = new Date();</span><br><span class="line">d.setHours(15,35,1);</span><br><span class="line">console.log(d) //Tue Aug 27 2019 15:35:01 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="setMinutes"><a href="#setMinutes" class="headerlink" title="setMinutes"></a>setMinutes</h3><ul><li><p>setMinutes() 方法用于设置指定时间的分钟字段。</p><p>该方法同样可用于设置秒数与毫秒数。</p><p>语法：<em>Date</em>.setMinutes(<em>min</em>,<em>sec</em>,<em>millisec</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setMinutes(17);</span><br><span class="line">console.log(d) //Wed Aug 28 2019 00:17:28 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var d = new Date();</span><br><span class="line">d.setMinutes(d.getMinutes()-90);</span><br><span class="line">console.log(d) //Tue Aug 27 2019 22:30:28 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="setSeconds"><a href="#setSeconds" class="headerlink" title="setSeconds"></a>setSeconds</h3><ul><li><p> setSeconds() 方法用于设置日期对象的秒字段。 </p><p>语法：<em>Date</em>.setSeconds(<em>sec</em>,<em>millisec</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setSeconds(35);</span><br><span class="line">console.log(d) //Wed Aug 28 2019 00:02:35 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">var d = new Date();</span><br><span class="line">d.setSeconds(35,825);</span><br><span class="line">var n=d.getSeconds() + &quot;:&quot; + d.getMilliseconds();</span><br><span class="line">console.log(n) //35:825</span><br></pre></td></tr></table></figure></li></ul><h3 id="setTime"><a href="#setTime" class="headerlink" title="setTime"></a>setTime</h3><ul><li><p>setTime() 方法以毫秒设置 Date 对象。 </p><p>语法：<em>Date</em>.setTime(<em>millisec</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setTime(1332403882588);</span><br><span class="line">console.log(d) //Thu Mar 22 2012 16:11:22 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取时间差"><a href="#获取时间差" class="headerlink" title="获取时间差"></a>获取时间差</h2><ul><li>是指获取两个时间点之间相差的时间</li><li>以前在 js 中不能用时间直接做 减法 的，现在可以了，下面介绍的是不直接减得方法</li><li>我们需要一些特殊的操作</li><li>在编程的世界里面，有一个特殊的时间，是 <code>1970年01月01日00时00分00秒</code></li><li>这个时间我们叫做 <code>格林威治时间</code></li><li>所有的编程世界里面，这个时间都是一样的，而且 <code>格林威治时间</code> 的数字是 0</li><li>从 <code>格林威治时间</code> 开始，每经过1毫秒，数字就会 + 1</li><li>所以我们可以获取到任意一个时间节点到 <code>格林威治时间</code> 的毫秒数</li><li>然后在用两个毫秒数相减，就能得到两个时间点之间相差的毫秒数</li><li>我们在通过这个毫秒数得到准确的时间</li></ul><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><ul><li>例如：我们现在计算一下 <code>2019-01-01 00:00:00</code> 到 <code>2019-01-03 04:55:34</code> 的时间差</li></ul><ol><li><p>先获取两个时间点到 <code>格林威治时间</code> 的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time1) <span class="comment">// 1546272000000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time2) <span class="comment">// 1546462534000</span></span><br></pre></td></tr></table></figure></li><li><p>两个时间相减，得到两个时间点之间相差的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(differenceTime) <span class="comment">// 190534000</span></span><br></pre></td></tr></table></figure><ul><li>现在我们计算出了两个时间点之间相差的毫秒数</li></ul></li><li><p>把我们计算的毫秒数换算成时间</p><ul><li><p>先计算出有多少天</p></li><li><p>以为一天是 <code>1000 * 60 * 60 * 24</code> 毫秒</p></li><li><p>用总的毫秒数除以一天的毫秒数，就能得到多少天了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(day) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>因为得到的是有小数的天数，我们向下取整，得到有多少个整的天数</li></ul></li><li><p>使用 <code>differenceTime</code> 减去两天所包含的毫秒数，剩下的就是不够一天的毫秒数</p></li><li><p>用不够一天的毫秒数计算出有多少个小时</p></li><li><p>因为一个小时是 <code>1000 * 60 * 60</code> 毫秒</p></li><li><p>用不够一天的毫秒数除以一小时的毫秒数，就能得到多少小时了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li>和刚才一样的道理，我们需要向下取整</li></ul></li><li><p>同理，使用 <code>afterHours</code> - 4个小时包含的毫秒数，剩下的就是不够一个小时的毫秒数</p></li><li><p>用不够一个小时的毫秒数计算出有多少分钟</p></li><li><p>因为一分钟是 <code>1000 * 60</code> 毫秒</p></li><li><p>用不够一个小时的毫秒数除以一分钟的毫秒数就能得到多少分钟了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure></li><li><p>和之前一样的道理计算出秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes) <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整秒数</span></span><br><span class="line"><span class="keyword">var</span> afterSeconds = afterMinutes - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">55</span>)</span><br><span class="line"><span class="keyword">var</span> seconds = afterSeconds / <span class="number">1000</span></span><br><span class="line">seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds) <span class="comment">// 34</span></span><br></pre></td></tr></table></figure></li><li><p>最后，同理减去整秒的数，剩下的就是毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-01-03 04:55:34&#x27;</span>)</span><br><span class="line">time1 = time1.<span class="title function_">getTime</span>()</span><br><span class="line">time2 = time2.<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes) <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整秒数</span></span><br><span class="line"><span class="keyword">var</span> afterSeconds = afterMinutes - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">55</span>)</span><br><span class="line"><span class="keyword">var</span> seconds = afterSeconds / <span class="number">1000</span></span><br><span class="line">seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds) <span class="comment">// 34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算毫秒数</span></span><br><span class="line"><span class="keyword">var</span> milliSeconds = afterSeconds - (<span class="number">1000</span> * <span class="number">34</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>最后我们把结果输出一下就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;2019-01-01 00:00:00 和 2019-01-03 04:55:34 之间相差&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(day + <span class="string">&#x27;天&#x27;</span> + hours + <span class="string">&#x27;小时&#x27;</span> + minutes + <span class="string">&#x27;分钟&#x27;</span> + seconds + <span class="string">&#x27;秒&#x27;</span> + milliSeconds + <span class="string">&#x27;毫秒&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li>在 js 里面，有两种定时器，<strong>倒计时定时器</strong> 和 <strong>间隔定时器</strong></li></ul><h4 id="倒计时定时器"><a href="#倒计时定时器" class="headerlink" title="倒计时定时器"></a>倒计时定时器</h4><ul><li><p>倒计时多少时间以后执行函数</p></li><li><p>语法： <code>setTimeout(要执行的函数，多长时间以后执行)</code></p></li><li><p>会在你设定的时间以后，执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>时间是按照毫秒进行计算的，1000 毫秒就是 1秒钟</li><li>所以会在页面打开 1 秒钟以后执行函数</li><li>只执行一次，就不在执行了</li><li>返回值是，当前这个定时器是页面中的第几个定时器</li></ul></li></ul><h4 id="间隔定时器"><a href="#间隔定时器" class="headerlink" title="间隔定时器"></a>间隔定时器</h4><ul><li><p>每间隔多少时间就执行一次函数</p></li><li><p>语法： <code>setInterval(要执行的函数，间隔多少时间)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ul><li>时间和刚才一样，是按照毫秒进行计算的</li><li>每间隔 1 秒钟执行一次函数</li><li>只要不关闭，会一直执行</li><li>返回值是，当前这个定时器是页面中的第几个定时器</li></ul></li></ul><h4 id="定时器的返回值"><a href="#定时器的返回值" class="headerlink" title="定时器的返回值"></a>定时器的返回值</h4><ul><li><p>设置定时器的时候，他的返回值是部分 <code>setTimeout</code> 和 <code>setInterval</code> 的</p></li><li><p>只要有一个定时器，那么就是一个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timerId2) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="关闭定时器"><a href="#关闭定时器" class="headerlink" title="关闭定时器"></a>关闭定时器</h4><ul><li><p>我们刚才提到过一个 timerId，是表示这个定时器是页面上的第几个定时器</p></li><li><p>这个 timerId 就是用来关闭定时器的数字</p></li><li><p>我们有两个方法来关闭定时器 <code>clearTimeout</code> 和 <code>clearInterval</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure><ul><li>关闭以后，定时器就不会在执行了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>(timerId2)</span><br></pre></td></tr></table></figure><ul><li>关闭以后定时器就不会在执行了</li></ul></li><li><p>原则上是 </p><ul><li><code>clearTimeout</code> 关闭 <code>setTimeout</code></li><li><code>clearInterval</code> 关闭 <code>setInterval</code></li></ul></li><li><p>但是其实是可以通用的，他们可以混着使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒计时定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 关闭倒计时定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timerId)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timerId2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;间隔定时器&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 关闭间隔定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId2)</span><br></pre></td></tr></table></figure></li></ul><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><ul><li>今天开始我们开始使用 js 去操作浏览器和页面中的 html 元素了</li></ul><h2 id="原生对象与宿主对象"><a href="#原生对象与宿主对象" class="headerlink" title="原生对象与宿主对象"></a>原生对象与宿主对象</h2><p>原生对象（本地对象）：native object</p><p>ECMA所定义的对象Number、String、Boolean、Object、Array、Function、Date、RegExp、内置对象(如 Math、Global不需要实例化)、Error ….. </p><p>宿主对象：host object（ 如 window、BOM、DOM ）</p><p>什么是宿主？web的运行环境，即操作系统、浏览器</p><p>宿主提供的对象 -&gt; 宿主对象 </p><h2 id="BOM-1"><a href="#BOM-1" class="headerlink" title="BOM"></a>BOM</h2><ul><li>BOM（Browser Object Model）： 浏览器对象模型</li><li>其实就是操作浏览器的一些能力</li><li>我们可以操作哪些内容<ul><li>获取一些浏览器的相关信息（窗口的大小）</li><li>操作浏览器进行页面跳转</li><li>获取当前浏览器地址栏的信息</li><li>操作浏览器的滚动条</li><li>浏览器的信息（浏览器的版本）</li><li>让浏览器出现一个弹出框（alert&#x2F;confirm&#x2F;prompt）</li></ul></li><li>BOM 的核心就是 window 对象</li><li>window 是浏览器内置的一个对象，里面包含着操作浏览器的方法</li></ul><p><a href="https://imgtu.com/i/62rtlF"><img src="https://s3.ax1x.com/2021/03/18/62rtlF.png" alt="62rtlF.png"></a></p><h3 id="获取浏览器窗口的尺寸"><a href="#获取浏览器窗口的尺寸" class="headerlink" title="获取浏览器窗口的尺寸"></a>获取浏览器窗口的尺寸</h3><ul><li><p><code>innerHeight</code> 和 <code>innerWidth</code></p></li><li><p>这两个属性分别是用来获取浏览器窗口的宽度和高度（包含滚动条的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> windowHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windowHeight)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> windowWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windowWidth)</span><br></pre></td></tr></table></figure></li></ul><h3 id="浏览器的弹出层"><a href="#浏览器的弹出层" class="headerlink" title="浏览器的弹出层"></a>浏览器的弹出层</h3><ul><li><p><code>alert</code> 是在浏览器弹出一个提示框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;我是一个提示框&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>这个弹出层只是一个提示内容，只有一个确定按钮</li><li>点击确定按钮以后，这个提示框就消失了</li></ul></li><li><p><code>confirm</code> 是在浏览器弹出一个询问框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;我是一个询问框&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo)</span><br></pre></td></tr></table></figure><ul><li>这个弹出层有一个询问信息和两个按钮</li><li>当你点击确定的时候，就会得到 true</li><li>当你点击取消的时候，就会得到 false</li></ul></li><li><p><code>prompt</code> 是在浏览器弹出一个输入框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入内容&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><ul><li>这个弹出层有一个输入框和两个按钮</li><li>当你点击取消的时候，得到的是 null</li><li>当你点击确定的时候得到的就是你输入的内容</li></ul></li></ul><h3 id="浏览器的窗口"><a href="#浏览器的窗口" class="headerlink" title="浏览器的窗口"></a>浏览器的窗口</h3><ul><li>open()：方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。 <ul><li>语法：window.open(<em>URL,name,specs,replace</em>)</li></ul></li><li>close()：方法用于关闭浏览器窗口。 <ul><li>语法：<ul><li>window.close()：关闭当前窗口</li><li>新窗口.close()：关闭指定窗口</li></ul></li></ul></li><li>window.screenLeft 属性返回窗口相对于屏幕的X坐标（不支持老版本火狐浏览器）</li><li>window.screenTop 属性返回窗口相对于屏幕的Y坐标 （不支持老版本火狐浏览器）</li><li>window.screenX 属性返回窗口相对于屏幕的X坐标 （不支持IE9以下浏览器）</li><li>window.screenY 属性返回窗口相对于屏幕的Y坐标 （不支持IE9以下浏览器）</li></ul><h3 id="浏览器的地址信息"><a href="#浏览器的地址信息" class="headerlink" title="浏览器的地址信息"></a>浏览器的地址信息</h3><ul><li>在 window 中有一个对象叫做 <code>location</code> </li><li>就是专门用来存储浏览器的地址栏内的信息的</li></ul><h4 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h4><ul><li><p><code>location.href</code> 这个属性存储的是浏览器地址栏内 url 地址的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)</span><br></pre></td></tr></table></figure><ul><li>会把中文编程 url 编码的格式</li></ul></li><li><p><code>location.href</code> 这个属性也可以给他赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line"><span class="comment">// 这个就会跳转页面到后面你给的那个地址</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="location-reload"><a href="#location-reload" class="headerlink" title="location.reload"></a>location.reload</h4><ul><li><p><code>location.reload()</code> 这个方法会重新加载一遍页面，就相当于刷新是一个道理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>不要写在全局，不然浏览器就会一直处在刷新状态</strong></li></ul></li></ul><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><ul><li><p>host 属性是一个可读可写的字符串，可设置或返回当前 URL 的主机名称和端口号。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(location.host);</span><br></pre></td></tr></table></figure></li></ul><h4 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h4><ul><li><p>hostname 属性是一个可读可写的字符串，可设置或返回当前 URL 的主机名。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(location.hostname);</span><br></pre></td></tr></table></figure></li></ul><h3 id="浏览器的历史记录"><a href="#浏览器的历史记录" class="headerlink" title="浏览器的历史记录"></a>浏览器的历史记录</h3><ul><li>window 中有一个对象叫做 <code>history</code> </li><li>是专门用来存储历史记录信息的</li></ul><h4 id="history-back"><a href="#history-back" class="headerlink" title="history.back"></a>history.back</h4><ul><li><p><code>history.back</code> 是用来回退历史记录的，就是回到前一个页面，就相当于浏览器上的 ⬅️ 按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">back</span>()</span><br></pre></td></tr></table></figure><ul><li>前提是你要有上一条记录，不然就是一直在这个页面，也不会回退</li></ul></li></ul><h4 id="history-forward"><a href="#history-forward" class="headerlink" title="history.forward"></a>history.forward</h4><ul><li><p><code>history.forward</code> 是去到下一个历史记录里面，也就是去到下一个页面，就相当于浏览器上的 ➡️ 按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>()</span><br></pre></td></tr></table></figure><ul><li>前提是你要之前有过回退操作，不然的话你现在就是最后一个页面，没有下一个</li></ul></li></ul><h4 id="history-go"><a href="#history-go" class="headerlink" title="history.go"></a>history.go</h4><ul><li><p>go(n)：n为整数，跳转第n个浏览过的文档</p><p>n&#x3D;&#x3D;0  则刷新当前页面</p><p>n&gt;0  则向前跳转到第n个文档</p><p>n&lt;0  则向后跳转到第n个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.go(-1)</span><br></pre></td></tr></table></figure><ul><li>前提是你要有上一条记录，不然就是一直在这个页面，也不会回退</li></ul></li></ul><h3 id="浏览器的版本信息（了解）"><a href="#浏览器的版本信息（了解）" class="headerlink" title="浏览器的版本信息（了解）"></a>浏览器的版本信息（了解）</h3><ul><li>window 中有一个对象叫做 <code>navigator</code></li><li>是专门用来获取浏览器信息的</li></ul><h4 id="navigator-userAgent"><a href="#navigator-userAgent" class="headerlink" title="navigator.userAgent"></a>navigator.userAgent</h4><ul><li><p><code>navigator.userAgent</code> 是获取的浏览器的整体信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>)</span><br><span class="line"><span class="comment">// Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="navigator-appName"><a href="#navigator-appName" class="headerlink" title="navigator.appName"></a>navigator.appName</h4><ul><li><p><code>navigator.appName</code> 获取的是浏览器的名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">appName</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="navigator-appVersion"><a href="#navigator-appVersion" class="headerlink" title="navigator.appVersion"></a>navigator.appVersion</h4><ul><li><p><code>navigator.appVersion</code> 获取的是浏览器的版本号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">appVersion</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="navigator-platform"><a href="#navigator-platform" class="headerlink" title="navigator.platform"></a>navigator.platform</h4><ul><li><p><code>navigator.platform</code> 获取到的是当前计算机的操作系统</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">platform</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><ul><li>screen对象包含有关客户端显示屏幕的信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width 属性返回显示器屏幕的宽度</span><br><span class="line">height 属性返回显示器屏幕的高度</span><br><span class="line">availHeight 属性返回显示屏幕的高度 (除 Windows 任务栏之外)</span><br><span class="line">availWidth 属性返回显示屏幕的宽度 (除 Windows 任务栏之外)</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ul><li><p>DOM（Document Object Model）： 文档对象模型</p></li><li><p>DOM描绘了一个层次化的节点树，即HTML文档中的所有内容都是节点(node)。</p></li><li><p>DOM树中的所有节点均可通过JS进行访问，允许开发人员添加、移除、修改和查询页面的某一部分。 </p><p><a href="https://imgtu.com/i/62rUOJ"><img src="https://s3.ax1x.com/2021/03/18/62rUOJ.png" alt="62rUOJ.png"></a></p></li><li><p>W3C规定的三类DOM标准接口</p><p>1、Core DOM（核心DOM），适用于各种结构化文档</p><p>2、XML DOM（Java OOP），专用于XML文档</p><p>3、HTML DOM，专用于HTML文档</p></li><li><p>Core DOM（核心DOM）</p><p>DOM模型的节点：文档可以说是由节点构成的集合。在DOM模型中有以下3种常用节点：</p><p>1、元素节点：各种标签就是这些元素节点的名称，例如<div>、<p>等</p><p>2、文本节点：文本节点总是被包含在元素节点里面的内容</p><p>3、属性节点：一般用来修饰元素节点就称之为属性节点</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">”JS”</span>  <span class="attr">href</span>=<span class="string">”https://www.baidu.com”</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其实就是操作 html 中的标签的一些能力</p></li><li><p>我们可以操作哪些内容</p><ul><li>获取一个元素</li><li>移除一个元素</li><li>创建一个元素</li><li>向页面里面添加一个元素</li><li>给元素绑定一些事件</li><li>获取元素的属性</li><li>给元素添加一些 css 样式</li><li>…</li></ul></li><li><p>DOM 的核心对象就是 document对象</p></li><li><p>document 对象是浏览器内置的一个对象，里面存储着专门用来操作元素的各种方法</p></li><li><p>DOM： 页面中的标签，我们通过 js 获取到以后，就把这个对象叫做 DOM 对象</p></li></ul><h2 id="获取一个元素"><a href="#获取一个元素" class="headerlink" title="获取一个元素"></a>获取一个元素</h2><ul><li>通过 js 代码来获取页面中的标签</li><li>获取到以后我们就可以操作这些标签了</li></ul><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><ul><li><p><code>getElementById</code> 是通过标签的 id 名称来获取标签的</p></li><li><p>因为在一个页面中 id 是唯一的，所以获取到的就是一个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取到的就是页面中的那个 id 为 box 的 div 标签</li></ul></li></ul><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><ul><li><p><code>getElementsByClassName</code> 是通过标签的 class 名称来获取标签的</p></li><li><p>因为页面中可能有多个元素的 class 名称一样，所以获取到的是一组元素</p></li><li><p>哪怕你获取的 class 只有一个，那也是获取一组元素，只不过这一组中只有一个 DOM 元素而已</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">calss</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// [&lt;div&gt;&lt;/div&gt;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box[<span class="number">0</span>]) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取到的是一组元素，是一个长得和数组一样的数据结构，但不是数组，是伪数组</li><li>这个一组数据也是按照索引排列的，所以我们想要准确的拿到这个 div，需要用索引来获取</li></ul></li></ul><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><ul><li><p><code>getElementsByTagName</code> 是通过标签的 标签 名称来获取标签的</p></li><li><p>因为页面中可能有多个元素的 标签 名称一样，所以获取到的是一组元素</p></li><li><p>哪怕真的只有一个这个标签名，那么也是获取一组元素，只不过这一组中只有一个 DOM 元素而已</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box) <span class="comment">// [&lt;div&gt;&lt;/div&gt;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box[<span class="number">0</span>]) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>和 <code>getElementsByClassName</code> 一样，获取到的是一个长得很像数组的元素</li><li>必须要用索引才能得到准确的 DOM 元素</li></ul></li></ul><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><ul><li><p><code>querySelector</code> 是按照选择器的方式来获取元素</p></li><li><p>也就是说，按照我们写 css 的时候的选择器来获取</p></li><li><p>这个方法只能获取到一个元素，并且是页面中第一个满足条件的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)) <span class="comment">// 获取页面中的第一个 div 元素 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(docuemnt.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)) <span class="comment">// 获取页面中第一个有 box 类名的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>)) <span class="comment">// 获取页面中第一个 id 名为 box 的元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><ul><li><p><code>querySelectorAll</code> 是按照选择器的方式来获取元素</p></li><li><p>这个方法能获取到所有满足条件的元素，以一个伪数组的形式返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)) <span class="comment">// 获取页面中的所有的 div 元素 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(docuemnt.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)) <span class="comment">// 获取页面中所有有 box 类名的元素</span></span><br></pre></td></tr></table></figure><ul><li>获取到的是一组数据，也是需要用索引来获取到准确的每一个 DOM 元素</li></ul></li></ul><p>注：query选择符选出来的元素及元素数组是静态的，而getElement这种方法选出的元素是动态的。静态的就是说选出的所有元素的数组，不会随着文档操作而改变． </p><h2 id="querySelector系列和getElementById的区别"><a href="#querySelector系列和getElementById的区别" class="headerlink" title="querySelector系列和getElementById的区别"></a>querySelector系列和getElementById的区别</h2><ol><li><p>两者的W3C标准不同<br>querySelector系列属于W3C中的Selectors API(JS)规范<br>getElementsBy系列则属于 W3C的DOM 规范。</p></li><li><p>两者浏览器的兼容不同<br>getElementsBy系列基本能被所有浏览器支持。<br>querySelector系列则通常只有在考虑兼容性的时候才被提起(尽管两者功能近似)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE7不支持</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.p2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box);</span><br><span class="line"><span class="comment">/* var p1 = document.getElementById(&#x27;p1&#x27;);</span></span><br><span class="line"><span class="comment">//IE8及其以下不支持getElementsByClassName</span></span><br><span class="line"><span class="comment">var ps = document.getElementsByClassName(&#x27;p&#x27;);</span></span><br><span class="line"><span class="comment">console.log(p1);*/</span></span><br></pre></td></tr></table></figure></li><li><p>接受参数不同<br>querySelector系列接收的参数是一个css选择器名。<br>getElementsBy系列接收的参数只能是单一的className、tagName 和 name。</p></li><li><p>返回值不同</p><ul><li>querySelector系列返回的是静态节点列表 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"> <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line"> <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;lis.<span class="property">length</span>;i++)&#123;</span><br><span class="line">     <span class="comment">//新建一个li  一共会新建四个li</span></span><br><span class="line">     <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">     li.<span class="property">innerHTML</span>=<span class="string">&#x27;我是新建的li&#x27;</span>+i;</span><br><span class="line">     ul.<span class="title function_">appendChild</span>(li);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(lis.<span class="property">length</span>)</span><br></pre></td></tr></table></figure></li><li>getElementsBy系列返回的是动态节点列表  回忆 childNodes <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"> <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);<span class="comment">// 5 6 7</span></span><br><span class="line"> <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;lis.<span class="property">length</span>;i++)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来了 老弟&#x27;</span>);</span><br><span class="line"> <span class="comment">//新建一个li</span></span><br><span class="line"> <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"> li.<span class="property">innerHTML</span>=<span class="string">&#x27;我是新建的li&#x27;</span>+i;</span><br><span class="line"> ul.<span class="title function_">appendChild</span>(li);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(lis.<span class="property">length</span>)  <span class="comment">//死循环</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><ul><li>通过我们各种获取元素的方式获取到页面中的标签以后</li><li>我们可以直接操作 DOM 元素的属性，就能直接把效果展示在页面上</li></ul><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><ul><li><p>获取元素内部的 HTML 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &lt;p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &lt;span&gt;hello&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置元素的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置完以后，页面中的 div 元素里面就会嵌套一个 p 元素</li></ul></li></ul><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><ul><li><p>获取元素内部的文本（只能获取到文本内容，获取不到 html 标签）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerText</span>) <span class="comment">// hello</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以设置元素内部的文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置完毕以后，会把 <code>&lt;p&gt;hello&lt;/p&gt;</code> 当作一个文本出现在 div 元素里面，而不会把 p 解析成标签</li></ul></li></ul><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h3><ul><li><p>获取元素的某个属性（包括自定义属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">// 100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;class&#x27;</span>)) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h3><ul><li><p>给元素设置一个属性（包括自定义属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div a=&quot;100&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="removeAttribute"><a href="#removeAttribute" class="headerlink" title="removeAttribute"></a>removeAttribute</h3><ul><li><p>直接移除元素的某个属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;class&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div a=&quot;100&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="data-set"><a href="#data-set" class="headerlink" title="data-set"></a>data-set</h3><ul><li><p>HTML5新特性-自定义属性</p></li><li><p>在HTML5中我们可以使用data-前缀设置我们需要的自定义属性，来进行一些数据的存放 使用data-set可以获取这些数据 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">data属性的设置和读取方式：</span><br><span class="line">1、data-xxx 的格式，则采用正常格式来读写该属性值</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;test&quot; data-name=&quot;小明&quot;&gt;自定义属性data-name&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 原生js方式</span><br><span class="line">var testData = document.getElementById(&quot;test&quot;);</span><br><span class="line">console.log(testData.dataset.name); // 读取data-name的值</span><br><span class="line">console.log(testData.getAttribute(&quot;data-name&quot;)); // 读取data-name的值</span><br><span class="line"></span><br><span class="line">testData.dataset.age = 18;  // 设置data-age的值</span><br><span class="line">testData.setAttribute(&quot;data-age&quot;,18);  // 设置data-age的值</span><br><span class="line"></span><br><span class="line">testData.removeAttribute(&quot;data-age&quot;);  // 删除data-age属性</span><br><span class="line"></span><br><span class="line">2、data-xxx-yyy-zzz的格式，则采用首个单词的首字母小写的驼峰式xxxYyyZzz读写该自定义属性值</span><br><span class="line">&lt;div id=&quot;test2&quot; data-user-name=&quot;小明&quot;&gt;自定义属性data-user-name&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 原生js方式</span><br><span class="line">var testData2 = document.getElementById(&quot;test2&quot;);</span><br><span class="line">console.log(testData2.dataset.userName); // 读取data-user-name的值</span><br><span class="line">console.log(testData2.getAttribute(&quot;data-user-name&quot;)); // 读取data-user-name的值</span><br><span class="line"></span><br><span class="line">testData.dataset.userAge = 18;  // 设置data-user-age的值</span><br><span class="line">testData2.setAttribute(&quot;data-user-age&quot;,18);  // 设置data-user-age的值</span><br><span class="line"></span><br><span class="line">testData2.removeAttribute(&quot;data-user-age&quot;);  // 删除data-user-age属性</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><ul><li><p>专门用来给元素添加 css 样式的</p></li><li><p>添加的都是行内样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;pink&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &lt;div style=&quot;width: 100px; height: 100px; background-color: pink;&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>页面中的 div 就会变成一个宽高都是100，背景颜色是粉色</li></ul></li></ul><h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><ul><li><p>专门用来操作元素的 类名的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">className</span>) <span class="comment">// box</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以设置元素的类名，不过是全覆盖式的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   div.<span class="property">className</span> = <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div) <span class="comment">// &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在设置的时候，不管之前有没有类名，都会全部被设置的值覆盖</li></ul></li></ul><h2 id="特殊标签的获取方式"><a href="#特殊标签的获取方式" class="headerlink" title="特殊标签的获取方式"></a>特殊标签的获取方式</h2><ul><li><p>获取body标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var body1=document.body</span><br><span class="line">console.log(body1)</span><br></pre></td></tr></table></figure></li><li><p>获取head标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var head1=document.head</span><br><span class="line">console.log(head1)</span><br></pre></td></tr></table></figure></li><li><p>获取title，不是获取标签，而是获取标签中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var title1=document.title</span><br><span class="line">console.log(title1)</span><br></pre></td></tr></table></figure></li><li><p>获取html标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var html1=document.documentElement</span><br><span class="line">console.log(html1)</span><br></pre></td></tr></table></figure></li></ul><h2 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h2><ul><li>DOM 就是我们 html 结构中一个一个的节点构成的</li><li>不光我们的标签是一个节点，我们写的文本内容也是一个节点，注释，包括空格都是节点</li><li>DOM 的节点我们一般分为常用的三大类 <strong>元素节点</strong> &#x2F; <strong>文本节点</strong> &#x2F; <strong>属性节点</strong></li><li>什么是分类，比如我们在获取元素的时候，通过各种方法获取到的我们叫做元素节点（标签节点）</li><li>比如我们标签里面写的文字，那么就是文本节点</li><li>写在每一个标签上的属性，就是属性节点</li></ul><h2 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h2><ul><li>我们通过 <code>getElementBy...</code> 获取到的都是元素节点</li></ul><h2 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h2><ul><li>我们通过 <code>getAttribute</code> 获取的就是元素的属性节点</li></ul><h2 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h2><ul><li>我们通过 <code>innerText</code> 获取到的就是元素的文本节点</li></ul><h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><ul><li><p><code>childNodes</code>：获取某一个节点下 <strong>所有的子一级节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">childNodes</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    NodeList(3) [text, p, text]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: text</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1: p</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2: text</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 3</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: NodeList</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们会发现，拿到以后是一个伪数组，里面有三个节点</li><li>一个 text：从 <code>&lt;div&gt;</code> 一直到 <code>&lt;p&gt;</code> 中间有一个换行和一堆空格，这个是第一个节点，是一个文本节点</li><li>一个 p：这个 p 标签就是第二个节点，这个是一个元素节点</li><li>一个 text：从 <code>&lt;/p&gt;</code> 一直到 <code>&lt;/div&gt;</code> 中间有一个换行和一堆空格，这个是第三个节点，是一个文本节点</li><li>这个时候就能看到我们有不同的节点类型了</li></ul></li><li><p><code>children</code> ：获取某一节点下所有的子一级 <strong>元素节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">children</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    HTMLCollection [p]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: p</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: HTMLCollection</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们发现只有一个节点了，因为 <code>children</code> 只要元素节点</li><li>div 下面又只有一个元素节点，就是 p</li><li>所以就只有一个，虽然只有一个，但是也是一个 <strong>伪数组</strong></li></ul></li><li><p><code>firstChild</code>：获取某一节点下子一级的 <strong>第一个节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">firstChild</span>) <span class="comment">// #text </span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这个是只获取一个节点，不再是伪数组了</li><li>获取的是第一个</li><li>第一个就是 <code>&lt;div&gt;</code> 一直到 <code>&lt;p&gt;</code> 的那个换行和空格，是个文本节点</li></ul></li><li><p><code>lastChild</code>：获取某一节点下子一级的 <strong>最后一个节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">lastChild</span>) <span class="comment">// #text </span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不再是伪数组</li><li>获取的是最后一个</li><li>最后一个就是 <code>&lt;/p&gt;</code> 一直到 <code>&lt;/div&gt;</code> 之间的换行和空格，是个文本节点</li></ul></li><li><p><code>firstElementChild</code>：获取某一节点下子一级 <strong>第一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">firstElementChild</span>) <span class="comment">// &lt;p&gt;hello&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是第一个 <strong>元素节点</strong></li><li>第一个元素节点就是 p 标签，是一个元素节点</li></ul></li><li><p><code>lastElementChild</code>：获取某一节点下子一级 <strong>最后一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oDiv 获取的是页面中的 div 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">lastElementChild</span>) <span class="comment">// &lt;p&gt;world&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是最后一个 <strong>元素节点</strong></li><li>最后一个元素节点是 <code>&lt;p&gt;world&lt;/p&gt;</code>，是一个元素节点</li></ul></li><li><p><code>nextSibling</code>：获取某一个节点的 <strong>下一个兄弟节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">nextSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 li 的下一个兄弟节点</li><li>因为 <code>id=&quot;b&quot;</code> 的下一个节点，是两个 li 标签之间的换行和空格，所以是一个文本节点</li></ul></li><li><p><code>previousSibling</code>：获取某一个节点的 <strong>上一个兄弟节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">previousSibling</span>) <span class="comment">// #text</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 li 的上一个兄弟节点</li><li>因为 <code>id=&quot;b&quot;</code> 的上一个节点，是两个 li 标签之间的换行和空格，所以是一个文本节点</li></ul></li><li><p><code>nextElementSibling</code>：获取某一个节点的 <strong>下一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">nextElementSibling</span>) <span class="comment">// &lt;li id=&quot;c&quot;&gt;!!!&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 li 的下一个兄弟元素节点</li><li>因为 <code>id=&quot;b&quot;</code> 的下一个兄弟元素节点就是 <code>id=&quot;c&quot;</code> 的 li，是一个元素节点</li></ul></li><li><p><code>previousElementSibling</code>：获取某一个节点的 <strong>上一个元素节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">previousElementSibling</span>) <span class="comment">// &lt;li id=&quot;a&quot;&gt;hello&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是 <code>id=&quot;b&quot;</code> 这个 li 的上一个兄弟元素节点</li><li>因为 <code>id=&quot;b&quot;</code> 的上一个兄弟元素节点就是 <code>id=&quot;a&quot;</code> 的 li，是一个元素节点</li></ul></li><li><p><code>parentNode</code>：获取某一个节点的 <strong>父节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span>!!!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">parentNode</span>) <span class="comment">// &lt;ul&gt;...&lt;/ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只获取一个节点，不在是伪数组</li><li>获取的是当前这个 li 的父元素节点</li><li>因为这个 li 的父亲就是 ul，所以获取到的就是 ul，是一个元素节点</li></ul></li><li><p><code>attributes</code>：获取某一个 <strong>元素节点</strong> 的所有 <strong>属性节点</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">a</span>=<span class="string">&quot;100&quot;</span> <span class="attr">test</span>=<span class="string">&quot;test&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个 oLi 获取的是页面中的 li 元素，就是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oLi.<span class="property">attributes</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    NamedNodeMap &#123;0: id, 1: a, 2: test, id: id, a: a, test: test, length: 3&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      0: id</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1: a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2: test</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      length: 3</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      a: a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      id: id</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      test: test</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      __proto__: NamedNodeMap</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取的是一组数据，是该元素的所有属性，也是一个伪数组</li><li>这个 li 有三个属性，id &#x2F; a &#x2F; test 三个，所以就获取到了这三个</li></ul></li></ul><h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><ul><li><p>我们已经知道节点会分成很多种，而且我们也能获取到各种不同的节点</p></li><li><p>接下来我们就来聊一些各种节点之间属性的区别</p></li><li><p>我们先准备一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">test</span>=<span class="string">&quot;我是 ul 的一个属性&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先获取 ul</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 下的第一个子元素节点，是一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> eleNode = oUl.<span class="property">firstElementChild</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 的属性节点组合，因为是个组合，我们要拿到节点的话要用索引</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> attrNode = oUl.<span class="property">attributes</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取到 ul 下的第一个子节点，是一个文本节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> textNode = oUl.<span class="property">firstChild</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h3><ul><li><p><code>nodeType</code>：获取节点的节点类型，用数字表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeType</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeType</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeType</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><code>nodeType === 1</code> 就表示该节点是一个 <strong>元素节点</strong></li><li><code>nodeType === 2</code> 就表示该节点是一个 <strong>属性节点</strong></li><li><code>nodeType === 3</code> 就表示该节点是一个 <strong>文本节点</strong></li></ul></li></ul><h3 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h3><ul><li><p><code>nodeName</code>：获取节点的节点名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeName</span>) <span class="comment">// LI</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeName</span>) <span class="comment">// test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeName</span>) <span class="comment">// #text</span></span><br></pre></td></tr></table></figure><ul><li>元素节点的 <code>nodeName</code> 就是 <strong>大写标签名</strong></li><li>属性节点的 <code>nodeName</code> 就是 <strong>属性名</strong></li><li>文本节点的 <code>nodeName</code> 都是 <strong>#text</strong></li></ul></li></ul><h3 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a>nodeValue</h3><ul><li><p><code>nodeValue</code>： 获取节点的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eleNode.<span class="property">nodeValue</span>) <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeValue</span>) <span class="comment">// 我是 ul 的一个属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeValue</span>) <span class="comment">// 换行 + 空格</span></span><br></pre></td></tr></table></figure><ul><li>元素节点没有 <code>nodeValue</code></li><li>属性节点的 <code>nodeValue</code> 就是 <strong>属性值</strong></li><li>文本节点的 <code>nodeValue</code> 就是 <strong>文本内容</strong></li></ul></li></ul><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th></th><th>nodeType</th><th>nodeName</th><th>nodeValue</th></tr></thead><tbody><tr><td>元素节点</td><td>1</td><td>大写标签名</td><td>null</td></tr><tr><td>属性节点</td><td>2</td><td>属性名</td><td>属性值</td></tr><tr><td>文本节点</td><td>3</td><td>#text</td><td>文本内容</td></tr></tbody></table><h2 id="操作-DOM-节点"><a href="#操作-DOM-节点" class="headerlink" title="操作 DOM 节点"></a>操作 DOM 节点</h2><ul><li>我们所说的操作无非就是 <strong>增删改查（CRUD）</strong></li><li>创建一个节点（因为向页面中增加之前，我们需要先创建一个节点出来）</li><li>向页面中增加一个节点</li><li>删除页面中的某一个节点</li><li>修改页面中的某一个节点</li><li>获取页面中的某一个节点</li></ul><h2 id="创建一个节点"><a href="#创建一个节点" class="headerlink" title="创建一个节点"></a>创建一个节点</h2><ul><li><p><code>createElement</code>：用于创建一个元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 div 元素节点</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建出来的就是一个可以使用的 div 元素</li></ul></li><li><p><code>createTextNode</code>：用于创建一个文本节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个文本节点</span></span><br><span class="line"><span class="keyword">var</span> oText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;我是一个文本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oText) <span class="comment">// &quot;我是一个文本&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="向页面中加入一个节点"><a href="#向页面中加入一个节点" class="headerlink" title="向页面中加入一个节点"></a>向页面中加入一个节点</h2><ul><li><p><code>appendChild</code>：是向一个父元素节点的末尾追加一个子节点</p></li><li><p>语法： <code>父节点.appendChild(要插入的子节点)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 div 元素节点</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> oText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;我是一个文本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 div 中追加一个文本节点</span></span><br><span class="line">oDiv.<span class="title function_">appendChild</span>(oText)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;我是一个文本&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>insertBefore</code>：向某一个节点前插入一个节点</p></li><li><p>语法： <code>父节点.insertBefore(要插入的节点，插入在哪一个节点的前面)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将这个元素节点添加到 div 下的 p 的前面</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">insertBefore</span>(oSpan, oP)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;span&gt;&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;p&gt;我是一个 p 标签&lt;/p&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="删除页面中的某一个节点"><a href="#删除页面中的某一个节点" class="headerlink" title="删除页面中的某一个节点"></a>删除页面中的某一个节点</h2><ul><li><p><code>removeChild</code>：移除某父节点下的某一个节点</p></li><li><p>语法：<code>父节点.removeChild(要移除的字节点)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除 div 下面的 p 标签</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">removeChild</span>(oP)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv) <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>remove</code>：用于从下拉列表删除选项。 </p></li><li><p>语法：<code>selectObject.remove(index)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeOption</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mySelect&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  x.<span class="title function_">remove</span>(x.<span class="property">selectedIndex</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;mySelect&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;removeOption()&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;Remove option&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：该方法从选项数组的指定位置移除 <option> 元素。如果指定的下标比 0 小，或者大于或等于选项的数目，remove() 方法会忽略它并什么也不做。 如果不添加下标，那么则移除该对象本身</p></li></ul><h2 id="修改页面中的某一个节点"><a href="#修改页面中的某一个节点" class="headerlink" title="修改页面中的某一个节点"></a>修改页面中的某一个节点</h2><ul><li><p><code>replaceChild</code>：将页面中的某一个节点替换掉</p></li><li><p>语法： <code>父节点.replaceChild(新节点，旧节点)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个 span 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向 span 元素中加点文字</span></span></span><br><span class="line"><span class="language-javascript">    oSpan.<span class="property">innerHTML</span> = <span class="string">&#x27;我是新创建的 span 标签&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 用创建的 span 标签替换原先 div 下的 p 标签</span></span></span><br><span class="line"><span class="language-javascript">    oDiv.<span class="title function_">replaceChild</span>(oSpan, oP)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;span&gt;我是新创建的 span 标签&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="克隆页面中的某一个节点"><a href="#克隆页面中的某一个节点" class="headerlink" title="克隆页面中的某一个节点"></a>克隆页面中的某一个节点</h2><ul><li><p>cloneNode ：克隆页面中的某一个节点</p></li><li><p>语法：克隆元素. cloneNode()</p><ul><li>参数默认是false，表示只克隆自己，不克隆子元素</li><li>如果参数为true，连带所有后代元素一起克隆</li><li>返回值：就是一个被克隆好的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> oP = oDiv.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> res =oDiv.<span class="title function_">cloneNode</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取元素的非行间样式"><a href="#获取元素的非行间样式" class="headerlink" title="获取元素的非行间样式"></a>获取元素的非行间样式</h2><ul><li><p>我们在操作 DOM 的时候，很重要的一点就是要操作元素的 css 样式</p></li><li><p>那么在操作 css 样式的时候，我们避免不了就要获取元素的样式</p></li><li><p>之前我们说过可以用 <code>元素.style.xxx</code> 来获取</p></li><li><p>但是这个方法只能获取到元素 <strong>行间样式</strong>，也就是写在行内的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">style</span>.<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDIv.<span class="property">style</span>.<span class="property">width</span>) <span class="comment">// &#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不管是外链式还是内嵌式，我们都获取不到该元素的样式</p></li><li><p>这里我们就要使用方法来获取了 <strong>getComputedStyle</strong> 和 <strong>currentStyle</strong></p></li><li><p>这两个方法的作用是一样的，只不过一个在 <strong>非 IE</strong> 浏览器，一个在 <strong>IE</strong> 浏览器</p></li></ul><h2 id="getComputedStyle（非IE使用）"><a href="#getComputedStyle（非IE使用）" class="headerlink" title="getComputedStyle（非IE使用）"></a>getComputedStyle（非IE使用）</h2><ul><li><p>语法：<code>window.getComputedStyle(元素, null).要获取的属性</code></p></li><li><p>第二个参数不写的时候默认是null，表示是一个正常元素</p></li><li><p>第二个参数可以写’after’ || ‘before’，表示获取伪元素的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(oDiv).<span class="property">width</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(oDiv).<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这个方法获取行间样式和非行间样式都可以</li></ul></li></ul><h2 id="currentStyle（IE使用）"><a href="#currentStyle（IE使用）" class="headerlink" title="currentStyle（IE使用）"></a>currentStyle（IE使用）</h2><ul><li><p>语法： <code>元素.currentStyle.要获取的属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">currentStyle</span>.<span class="property">width</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oDiv.<span class="property">currentStyle</span>.<span class="property">height</span>) <span class="comment">// 100px</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a><strong>文档碎片</strong></h2><ul><li><p>通俗易懂解释文档碎片：我们每次去超市买东西，都是用袋子一次性把所有东西运回来，而不可能选择每次只拿一样东西。而当我们用JS DOM向页面插入元素的时候，每插入一个元素，页面就会渲染一次，但当我们要插入过多元素的时候，页面渲染的次数会使得DOM的操作性能降低。而在这个过程中，文档碎片就类似于一个我们买东西的袋子，我们每次创建好一个元素的时候，不直接插入页面中，而是插入文档碎片里，最后再一次性地把所有元素插入页面中，这样页面只需要渲染一次，极大地提高了DOM操作性能（理论上）</p></li><li><p><strong>为何要创建文档碎片</strong> </p><ul><li>在浏览器中，修改、删除或者增加DOM元素。更新DOM会导致浏览器重新绘制屏幕，对于少量的更新，一条条循环插入也会运行很好。但是，如果当我们要向document中添加大量数据时(比如1w条)，逐条添加节点，会导致回流,这样会带来巨大的开销，这个过程就可能会十分缓慢。我们通常解决这种情况的办法尽量减少更新DOM，这也就意味着将DOM的改变分批处理，并在“活动”文档树之外执行这些更新。当需要创建一个相对比较大的子树，应该在子树完全创建之后再将子树添加到DOM树中，这时采用文档碎片技术来容纳所有的节点</li></ul></li><li><p><strong>如何创建文档碎片</strong> </p><ul><li><code>var oFrag = document.createDocumentFragment();</code>  </li><li>createdocumentfragment()方法创建了一虚拟的节点对象，节点对象包含所有属性和方法。<br>当你想提取文档的一部分，改变，增加，或删除某些内容及插入到文档末尾可以使用createDocumentFragment() 方法。<br>你也可以使用文档的文档对象来执行这些变化，但要防止文件结构被破坏，createDocumentFragment() 方法可以更安全改变文档的结构及节点。</li></ul></li><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oFragmeng = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>(); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123; </span><br><span class="line">        <span class="keyword">var</span> op = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>); </span><br><span class="line">        <span class="keyword">var</span> oText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(i); </span><br><span class="line">        op.<span class="title function_">appendChild</span>(oText); </span><br><span class="line">        <span class="comment">//先附加在文档碎片中</span></span><br><span class="line">        oFragmeng.<span class="title function_">appendChild</span>(op);  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//最后一次性添加到document中</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(oFragmeng); </span><br></pre></td></tr></table></figure></li><li><p>案例：新增10000个li节点，统计执行的时间，通过对比两者的的执行时间来判断谁的性能更高一点。 </p></li><li><pre><code class="html">//（1）使用普通方法挂载新增节点&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;文档碎片性能测试——普通方法&lt;/title&gt;        &lt;script&gt;            window.onload = function()&#123;            var oBtn = document.getElementById(&quot;btn1&quot;);            var oUl = document.getElementById(&quot;ul1&quot;);                        var iStart = new Date().getTime();                  //开始执行的时间            oBtn.onclick = function()&#123;                //普通追加                               for(var i=0; i&lt;100000; i++)&#123;                   //使用for循环创建100000个li节点，并一个个的挂载在ul下面                    var oLi = document.createElement(&quot;li&quot;);                    oUl.appendChild(oLi);                &#125;alert(new Date().getTime() - iStart);         //打印出最后这个程序耗费的而时间            &#125;                    &#125;        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;input id=&quot;btn1&quot; type=&quot;button&quot; value=&quot;普通&quot; /&gt;        &lt;ul id=&quot;ul1&quot;&gt;            &lt;li&gt;li&lt;/li&gt;        &lt;/ul&gt;    &lt;/body&gt;&lt;/html&gt;//（2）使用文档碎片：&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;文档碎片性能测试&lt;/title&gt;        &lt;script&gt;            window.onload = function()&#123;            var oBtn = document.getElementById(&quot;btn1&quot;);            var oUl = document.getElementById(&quot;ul1&quot;);                             var iStart = new Date().getTime();            oBtn.onclick = function()&#123;                //文档碎片方式                var oFrag = document.createDocumentFragment();//建立一个文档对象，作为新增节点的临时容器，最后将这个容器连的内容直接挂载在父节点ul下面。                                 for(var i=0; i&lt;100000; i++)&#123;                    var oLi = document.createElement(&quot;li&quot;);                    oFrag.appendChild(oLi);                &#125;                oUl.appendChild(oFrag);                alert(new Date().getTime() - iStart);            &#125;                    &#125;        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;input id=&quot;btn1&quot; type=&quot;button&quot; value=&quot;碎片&quot; /&gt;        &lt;ul id=&quot;ul1&quot;&gt;            &lt;li&gt;li&lt;/li&gt;        &lt;/ul&gt;    &lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line"></span><br><span class="line">​当我们需要大量 appendChild 页面元素时，可以先将这些元素 appendChild 进 document.createDocumentFragment。</span><br><span class="line"></span><br><span class="line">​然后只需 appendChild 文档碎片到页面就可以了。这样就不用多次刷新页面达到性能优化的目的。上面那个代码我觉得用到文档碎片是多余的。</span><br><span class="line"></span><br><span class="line">## 数据渲染</span><br><span class="line"></span><br><span class="line">- 就是HTML中要显示的数据是通过js来实现的而不是直接在HTML中的数据，这个过程叫做数据渲染 </span><br><span class="line"></span><br><span class="line">- 渲染方式：</span><br><span class="line"></span><br><span class="line">  - 字符串拼接（最常用的方法）</span><br><span class="line"></span><br><span class="line">    - 优点：只进行了一次DOM回流</span><br><span class="line">    - 缺点：原有的DOM事件都会丢失</span><br><span class="line">    - 丢失的原因：丢失的原因就在innerHTML这个属性，这个属性是返回或设置DOM中的内容，以字符串形式返回，拼接完之后是string类型，而onmouse这些属性是DOM元素对象身上的，所以这些onmouse系列的属性就丢失了</span><br><span class="line"></span><br></pre></td></tr></table></figure>  &lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;ul class=&quot;list&quot;&gt;      &lt;li&gt;111苹果&lt;/li&gt;      &lt;li&gt;222葡萄&lt;/li&gt;      &lt;li&gt;333橘子&lt;/li&gt;  &lt;/ul&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;script&gt;      var lis=document.querySelectorAll(&#39;li&#39;);      var list=document.querySelector(&#39;.list&#39;)        for(var i=0;i&lt;lis.length;i++)&#123;          lis[i].onmouseover= function () &#123;              this.style.background=&quot;lightblue&quot;          &#125;          lis[i].onmouseout= function () &#123;              this.style.background=&#39;#fff&#39;          &#125;      &#125;        var data=[&quot;111是香蕉&quot;,&#39;222是桃子&#39;,&#39;333是西瓜&#39;]      var str=&quot;&quot;      for(var j=0;j&lt;data.length;j++)&#123;          str+=&quot;&lt;li&gt;&quot;+data[j]+&quot;&lt;/li&gt;&quot;      &#125;      document.querySelector(&#39;.list&#39;).innerHTML=str  &lt;/script&gt;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- DOM循环</span><br><span class="line"></span><br><span class="line">  - 优点：原有的DOM身上的事件不会丢失，不影响其它的DOM元素</span><br><span class="line">  - 缺点：DOM回流的次数过多，严重影响网页的性能 </span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">      &lt;li&gt;111苹果&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;222葡萄&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;333橘子&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      var lis=document.querySelectorAll(&#x27;li&#x27;);</span><br><span class="line">      var list=document.querySelector(&#x27;.list&#x27;)</span><br><span class="line">  //    var lis=document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">  //    var list=document.getElementsByClassName(&#x27;list&#x27;)[0]</span><br><span class="line">  </span><br><span class="line">      for(var i=0;i&lt;lis.length;i++)&#123;</span><br><span class="line">          lis[i].onmouseover= function () &#123;</span><br><span class="line">              this.style.background=&quot;lightblue&quot;</span><br><span class="line">          &#125;</span><br><span class="line">          lis[i].onmouseout= function () &#123;</span><br><span class="line">              this.style.background=&#x27;#fff&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      var data=[&quot;111是香蕉&quot;,&#x27;222是桃子&#x27;,&#x27;333是西瓜&#x27;]</span><br><span class="line">      var str=&quot;&quot;</span><br><span class="line">      for(var j=0;j&lt;data.length;j++)&#123;</span><br><span class="line">          var li=document.createElement(&#x27;li&#x27;)</span><br><span class="line">          li.innerHTML=data[j]</span><br><span class="line">          list.appendChild(li)</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>- 文档碎片  - 优点：既不影响原有的DOM的属性，也只回流一次  - 缺点：新添加的元素的DOM事件还是失效的- ```  &lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;ul class=&quot;list&quot;&gt;      &lt;li&gt;111苹果&lt;/li&gt;      &lt;li&gt;222葡萄&lt;/li&gt;      &lt;li&gt;333橘子&lt;/li&gt;  &lt;/ul&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;script&gt;      var lis=document.querySelectorAll(&#39;li&#39;);      var list=document.querySelector(&#39;.list&#39;)        for(var i=0;i&lt;lis.length;i++)&#123;          lis[i].onmouseover= function () &#123;              this.style.background=&quot;lightblue&quot;          &#125;          lis[i].onmouseout= function () &#123;              this.style.background=&#39;#fff&#39;          &#125;      &#125;        var data=[&quot;111是香蕉&quot;,&#39;222是桃子&#39;,&#39;333是西瓜&#39;]      var frag=document.createDocumentFragment()      for(var i=0;i&lt;data.length;i++)&#123;          var li=document.createElement(&#39;li&#39;)          li.innerHTML=data[i]          frag.appendChild(li)      &#125;      document.querySelector(&#39;.list&#39;).appendChild(frag)  &lt;/script&gt;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">## 获取元素的尺寸</span><br><span class="line"></span><br><span class="line">- clientWidth和clientHeight   内容+padding的区域的宽度和高度</span><br><span class="line"></span><br><span class="line">- 语法：元素.clientWidth</span><br><span class="line"></span><br><span class="line">  获取浏览器的宽度：</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>var w&#x3D;document.documentElement.clientWidth<br>console.log(w)</p><p>var div1&#x3D;document.querySelector(‘div’).clientWidth<br>console.log(div1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 获取元素边框的尺寸</span><br><span class="line"></span><br><span class="line">- clientLeft和clientTop 获取的上边框和左边框的宽度</span><br><span class="line">- 语法：元素.clientLeft</span><br><span class="line"></span><br><span class="line">## 获取元素的偏移量</span><br><span class="line"></span><br><span class="line">- 就是元素在页面上的什么位置</span><br><span class="line">- 我们有几个属性来获取，**offsetLeft** 和 **offsetTop** 和 **offsetWidth** 和 **offsetHeight**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## offsetLeft 和 offsetTop</span><br><span class="line"></span><br><span class="line">- 获取的是元素左边的偏移量和上边的偏移量</span><br><span class="line">- 分成两个情况来看</span><br><span class="line">- 没有定位的情况下</span><br><span class="line">  - 获取元素边框外侧到页面内侧的距离</span><br><span class="line">- 有定位的情况下</span><br><span class="line">  - 获取元素边框外侧到定位父级边框内侧的距离（其实就是我们写的 left 和 top 值）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## offsetWidth 和 offsetHeight</span><br><span class="line"></span><br><span class="line">- 获取元素 `内容宽高 + padding宽高 + border宽高` 的和</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 浏览器的 onscroll 事件</span><br><span class="line"></span><br><span class="line">- 这个 onscroll 事件是当浏览器的滚动条滚动的时候触发</span><br><span class="line"></span><br><span class="line">- 或者鼠标滚轮滚动的时候出发</span><br><span class="line"></span><br><span class="line">  ```javascript</span><br><span class="line">  window.onscroll = function () &#123;</span><br><span class="line">    console.log(&#x27;浏览器滚动了&#x27;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>前提是页面的高度要超过浏览器的可是窗口才可以</strong></li></ul><h2 id="浏览器滚动的距离"><a href="#浏览器滚动的距离" class="headerlink" title="浏览器滚动的距离"></a>浏览器滚动的距离</h2><ul><li>浏览器内的内容即然可以滚动，那么我们就可以获取到浏览器滚动的距离</li><li>思考一个问题？<ul><li>浏览器真的滚动了吗？</li><li>其实我们的浏览器是没有滚动的，是一直在那里</li><li>滚动的是什么？是我们的页面</li><li>所以说，<strong>其实浏览器没有动，只不过是页面向上走了</strong></li></ul></li><li>所以，这个已经不能单纯的算是浏览器的内容了，而是我们页面的内容</li><li>所以不是在用 window 对象了，而是使用 document 对象</li></ul><h3 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h3><ul><li><p>获取的是页面向上滚动的距离</p></li><li><p>一共有两个获取方式</p><ul><li><code>document.body.scrollTop</code></li><li><code>document.documentElement.scrollTop</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>两个都是获取页面向上滚动的距离</li><li>区别：<ul><li>Chrome 和 FireFox、IE 浏览器<ul><li>没有 <code>DOCTYPE</code> 声明的时候，用 <code>document.body.scrollTop</code></li><li>有 <code>DOCTYPE</code> 声明的时候，用 <code>document.documentElement.scrollTop</code></li></ul></li><li>Safari<ul><li>两个都不用，使用一个单独的方法 <code>window.pageYOffset </code></li></ul></li></ul></li></ul></li></ul><h3 id="scrollLeft"><a href="#scrollLeft" class="headerlink" title="scrollLeft"></a>scrollLeft</h3><ul><li>获取页面向左滚动的距离</li><li>也是两个方法<ul><li><code>document.body.scrollLeft</code></li><li><code>document.documentElementLeft</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>两个之间的区别和之前的 <code>scrollTop</code> 一样</li></ul></li></ul><h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><ul><li><p>浏览器事件</p><ul><li>onload  加载完毕</li><li>onscroll  浏览器滚动事件</li><li>onresize  浏览器窗口改变事件</li></ul></li><li><p>鼠标事件</p><ul><li>onclick  单击事件</li><li>ondblclick  双击事件</li><li>onmousedown  鼠标按下事件</li><li>onmousemove  鼠标移动事件</li><li>onmouseup  鼠标释放事件</li><li>onmouseover  鼠标移入事件</li><li>onmouseout  鼠标移出事件</li></ul></li><li><p>键盘事件</p><ul><li>onkeydown  键盘按下事件</li><li>onkeyup  键盘释放事件</li><li>onkeypress 产生可打印字符事件</li></ul><p>注：键盘事件绑定的位置，要么是document，要么是输入框</p></li><li><p>触摸事件（移动端）</p><ul><li>ontouchstart  触摸开始</li><li>ontouchmove  触摸移动</li><li>ontouchend  触摸结束</li></ul></li><li><p>表单事件</p><ul><li>onchange  表单改变事件（失去焦点时触发）</li><li>oninput  表单输入事件（输入时触发）</li><li>onsubmit  表单提交事件（点击submit时触发）</li></ul></li><li><p>其他事件</p><ul><li>ontransitionend  过渡结束的时候触发</li><li>onanimationend  动画结束的时候触发</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/posts/e859d7a7.html"/>
      <url>/posts/e859d7a7.html</url>
      
        <content type="html"><![CDATA[<p><strong>补充</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 交集选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.class1.class2&#123;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"># 没有空格表示替换</span><br></pre></td></tr></table></figure><h1 id="CSS3简介"><a href="#CSS3简介" class="headerlink" title="CSS3简介"></a>CSS3简介</h1><ul><li>CSS3是css技术的升级版本，CSS3语言开发是朝着模块化发展的。以前的规范作为一个模块实在是太庞大而且比较复杂，所以，把它分解为一些小的模块，更多新的模块也被加入进来。这些模块包括： 盒子模型、列表模块、超链接方式 、语言模块 、背景和边框 、文字特效 、多栏布局等。</li><li>css3的优点：CSS3将完全向后兼容，所以没有必要修改现在的设计来让它们继续运作。网络浏览器也还将继续支持CSS2。对我们来说，CSS3主要的影响是将可以使用新的可用的选择器和属性，这些会允许实现新的设计效果（譬如动态和渐变），而且可以很简单的设计出现在的设计效果（比如说使用分栏）</li></ul><h2 id="渐进增强"><a href="#渐进增强" class="headerlink" title="渐进增强"></a>渐进增强</h2><p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验<br><a href="https://imgtu.com/i/62cijS"><img src="https://s3.ax1x.com/2021/03/18/62cijS.png" alt="62cijS.png"></a></p><h2 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h2><p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验<br><a href="https://imgtu.com/i/62cABQ"><img src="https://s3.ax1x.com/2021/03/18/62cABQ.png" alt="62cABQ.png"></a></p><h2 id="渐进增强-优雅降级的区别"><a href="#渐进增强-优雅降级的区别" class="headerlink" title="渐进增强&amp;优雅降级的区别"></a>渐进增强&amp;优雅降级的区别</h2><p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p><h1 id="CSS3选择符"><a href="#CSS3选择符" class="headerlink" title="CSS3选择符"></a>CSS3选择符</h1><p><a href="https://imgtu.com/i/62ckng"><img src="https://s3.ax1x.com/2021/03/18/62ckng.png" alt="62ckng.png"></a></p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li><p>1、E[attr]：只使用属性名，但没有确定任何属性值</p></li><li><p>2、E[attr&#x3D;“value”]：指定属性名，并指定了该属性的属性值 </p></li><li><p>3、E[attr~&#x3D;“value”]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”必须的</p></li><li><p>4、E[attr^&#x3D;“value”]：指定了属性名，并且有属性值，属性值是以value开头的</p></li><li><p>5、E[attr$&#x3D;“value”]：指定了属性名，并且有属性值，而且属性值是以value结束的</p></li><li><p>6、E[attr*&#x3D;“value”]：指定了属性名，并且有属性值，而且属值中包含了value</p></li><li><p>7、E[attr|&#x3D;“value”]：指定了属性名，并且属性值仅是value或者以“value-”开头的值（比如说left-con）</p></li></ul><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><ul><li><p>结构性伪类选择器<br><strong>X:first-child</strong> 匹配子集的第一个元素。IE7就可以支持<br><strong>X:last-child</strong> 匹配父元素中最后一个X元素<br><strong>X:nth-child(n)</strong> 用于匹配索引值为n的子元素。索引值从1开始  odd奇数  even偶数<br><strong>X:only-child</strong> 这个伪类一般用的比较少，比如上述代码匹配的是div下的有且仅有一个的p，也就是说，如果div内有多个p，将不匹配。<br><strong>X:nth-last-child(n)</strong> 从最后一个开始算索引。<br><strong>X:first-of-type</strong> 匹配同级兄弟元素中的第一个X元素<br><strong>X:last-of-type</strong> 匹配同级兄弟元素中的最后一个X元素<br><strong>X:nth-of-type(n)</strong> 匹配同类型中的第n个同级兄弟元素X<br><strong>X:only-of-type</strong> 匹配属于同类型中唯一兄弟元素的X<br><strong>X:nth-last-of-type(n)</strong> 匹配同类型中的倒数第n个同级兄弟元素X<br><strong>:root</strong> 匹配文档的根元素。在HTML（标准通用标记语言下的一个应用）中，根元素永远是HTML<br><strong>X:empty</strong> 匹配没有任何子元素（包括包含文本）的元素X<br>应用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">:empty</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>:<span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>目标伪类选择器<br>E:target选择匹配E的所有元素，且匹配元素被相关URL指向</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:target</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#p1&quot;</span>&gt;</span>吕布<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#p2&quot;</span>&gt;</span>吕布<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>太猛了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>太帅了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UI 元素状态伪类选择器<ul><li>E: <strong>enabled</strong> 匹配所有用户界面（form表单）中处于可用状态的E元素</li><li>E: <strong>disabled</strong> 匹配所有用户界面（form表单）中处于不可用状态的E元素</li><li>E: <strong>checked</strong> 匹配所有用户界面（form表单）中处于选中状态的元素E</li><li>E:: <strong>selection</strong> 匹配E元素中被用户选中或处于高亮状态的部分（双冒号不能省略）</li></ul></li><li>动态伪类选择器<ul><li>E <strong>:link</strong><br>链接伪类选择器<br>选择匹配的E元素，而且匹配元素被定义了超链接并未被访问过。常用于链接描点上</li><li>E <strong>:visited</strong><br>链接伪类选择器<br>选择匹配的E元素，而且匹配元素被定义了超链接并已被访问过。常用于链接描点上</li><li>E <strong>:active</strong><br>用户行为选择器<br>选择匹配的E元素，且匹配元素被激活。常用于链接描点和按钮上</li><li>E <strong>:hover</strong><br>用户行为选择器<br>选择匹配的E元素，且用户鼠标停留在元素E上。IE6及以下浏览器仅支持a:hover</li><li>E <strong>:focus</strong><br>用户行为选择器<br>选择匹配的E元素，而且匹配元素获取焦点</li></ul></li><li>否定伪类选择器<br>E <strong>:not(s)</strong> 用于为排除此元素的其他元素设置样式 （IE6-8浏览器不支持:not()选择器。）<br>应用：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.p1</span>)&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">”p1”</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><ul><li><strong>E&gt;F</strong><br>子选择器<br>选择匹配的F元素，且匹配的F元素所匹配的E元素的子元素</li><li><strong>E+F</strong><br>相邻兄弟选择器<br>选择器表示在同一父元素中，E和F紧相邻，设置样式只在F身上实现；（选择紧位于E同级元素下的所有的F标签）</li><li><strong>E~F</strong><br>通用选择器<br>选择同级匹配的F元素，且位于匹配的E元素后的所有匹配的F元素</li></ul><h1 id="CSS3属性"><a href="#CSS3属性" class="headerlink" title="CSS3属性"></a>CSS3属性</h1><h2 id="文本阴影属性"><a href="#文本阴影属性" class="headerlink" title="文本阴影属性"></a>文本阴影属性</h2><p><a href="https://imgtu.com/i/62s7U1"><img src="https://s3.ax1x.com/2021/03/18/62s7U1.png" alt="62s7U1.png"></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 水平、垂直阴影的位置允许负值，也可以设置多个阴影值，阴影值中间用“，”隔开； */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> red, <span class="number">5px</span> <span class="number">15px</span> <span class="number">5px</span> blue, <span class="number">5px</span> <span class="number">25px</span> <span class="number">5px</span> green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62sTER"><img src="https://s3.ax1x.com/2021/03/18/62sTER.png" alt="62sTER.png"></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 火焰文字效果 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> white, <span class="number">0</span> -<span class="number">5px</span> <span class="number">4px</span> <span class="number">#ff3</span>, <span class="number">2px</span> -<span class="number">10px</span> <span class="number">6px</span> <span class="number">#fd3</span>, -<span class="number">2px</span> -<span class="number">15px</span> <span class="number">11px</span> <span class="number">#f80</span>, <span class="number">2px</span> -<span class="number">25px</span> <span class="number">18px</span> <span class="number">#f20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62sIb9"><img src="https://s3.ax1x.com/2021/03/18/62sIb9.png" alt="62sIb9.png"></a></p><h2 id="盒子阴影属性"><a href="#盒子阴影属性" class="headerlink" title="盒子阴影属性"></a>盒子阴影属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法： */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#888888</span> inset;</span><br><span class="line">          <span class="comment">/* 阴影水平偏移量 阴影垂直偏移量 阴影模糊半径 阴影扩展半径 阴影颜色 none/inset;  */</span></span><br><span class="line">  <span class="comment">/* inset 为内阴影类型，none或不写就是外阴影 */</span></span><br><span class="line">  <span class="comment">/* 设置多阴影时用逗号隔开： */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> red, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> blue, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> blue, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> blue, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span> blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62yC5t"><img src="https://s3.ax1x.com/2021/03/18/62yC5t.png" alt="62yC5t.png"></a></p><h2 id="文本换行"><a href="#文本换行" class="headerlink" title="文本换行"></a>文本换行</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. Word-wrap</span><br><span class="line">属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</span><br><span class="line">属性值：</span><br><span class="line">normal 只在允许的断字点换行（浏览器保持默认处理）</span><br><span class="line">break-word 属性允许长单词或 URL 地址换行到下一行</span><br><span class="line"></span><br><span class="line">2. Word-break</span><br><span class="line">属性值：</span><br><span class="line">break-all 它断句的方式非常粗暴，它不会尝试把长单词挪到下一行，而是直接进行单词内的断句</span><br><span class="line">Keep-all 文本不会换行，只能在半角空格或连字符处换行</span><br></pre></td></tr></table></figure><h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h2><p>@font-face是CSS3中的一个模块，他主要是把自己定义的Web字体嵌入到你的网页中，随着@font-face模块的出现，我们在Web的开发中使用字体不怕只能使用Web安全字体（@font-face这个功能早在IE4就支持）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @font-face的语法规则: */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123; </span><br><span class="line"><span class="attribute">font-family</span>: &lt;YourWebFontName&gt;;</span><br><span class="line"> <span class="attribute">src</span>: &lt;source&gt; [&lt;format&gt;][, []]*; </span><br><span class="line"><span class="selector-attr">[font-weight: &lt;weight&gt;]</span>; </span><br><span class="line"><span class="selector-attr">[font-style: &lt;style&gt;]</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iconfont字体图标库的使用"><a href="#iconfont字体图标库的使用" class="headerlink" title="iconfont字体图标库的使用"></a>iconfont字体图标库的使用</h3><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1. Background-origin 背景原点(背景的显示位置)</span><br><span class="line">说明: 指定background-origin属性应该是相对位置</span><br><span class="line">属性值:</span><br><span class="line">padding-box背景图像填充框的相对位置   默认值</span><br><span class="line">border-box背景图像边界框的相对位置</span><br><span class="line">content-box背景图像的相对位置的内容框   </span><br><span class="line"></span><br><span class="line">2. Background-clip 背景裁切</span><br><span class="line">说明: background-clip 属性规定背景的绘制区域。</span><br><span class="line">属性值:</span><br><span class="line">border-box背景被裁剪到边框盒。 默认值</span><br><span class="line">padding-box背景被裁剪到内边距框。</span><br><span class="line">content-box背景被裁剪到内容框。     </span><br><span class="line"></span><br><span class="line">3. Background-size 背景尺寸</span><br><span class="line">说明: background-size 规定背景图像的尺寸</span><br><span class="line">属性值:</span><br><span class="line">length(10px) 规定背景图的大小。第一个值宽度，第二个值高度。</span><br><span class="line">Percentage(%) 以百分比为值设置背景图大小</span><br><span class="line">cover 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域</span><br><span class="line">contain 把图像图像扩展至最大尺寸，以使其宽度或高度完全适应内容区域。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​扩展：</span><br><span class="line">从文字区域向外裁剪；</span><br><span class="line">-webkit-background-clip:text;</span><br><span class="line">-webkit-text-fill-color:transparent;  设置文字填充色的（文字镂空效果）</span><br><span class="line">font-weight:bold;font-size:50px;</span><br><span class="line"></span><br><span class="line">css3多背景图的设置</span><br><span class="line">eg:background:url(),url();</span><br><span class="line">   background:url(images/flower-green.png) repeat-x left bottom,url(images/flower-red.png) repeat-y,url(images/sky.jpg) no-repeat;</span><br><span class="line">可以添加多个背景图，用逗号隔开，后书写的在后显示</span><br></pre></td></tr></table></figure><h2 id="颜色模式"><a href="#颜色模式" class="headerlink" title="颜色模式"></a>颜色模式</h2><ul><li>rgba 颜色模式</li><li>Hsl 颜色模式（了解） </li><li>Hsla 颜色模式（了解）<br>  就是色调(Hue)、饱和度(Saturation)、亮度(Lightness)三个颜色通道的改变以及它们相互之间的叠加来获得各种颜色，色调(Hue)色调最大值360，饱和度和亮度有百分比表示0-100%之间。</li></ul><h2 id="图片边框"><a href="#图片边框" class="headerlink" title="图片边框"></a>图片边框</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">图片边框 border-image:url(border.png) 30 30 round;</span><br><span class="line">border-image属性是一个简写属性，用于设置以下属性:</span><br><span class="line">    border-image-source 用在边框的图片的路径。</span><br><span class="line">    border-image-slice 图片边框向内偏移(不加单位)。</span><br><span class="line">    border-image-width 图片边框的宽度。</span><br><span class="line">    border-image-outset 边框图像区域超出边框的量(值是一个倍数)</span><br><span class="line">    border-image-repeat 图像边框是否应平铺(repeat)、铺满(round)或拉伸(stretch)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62sc40"><img src="https://s3.ax1x.com/2021/03/18/62sc40.png" alt="62sc40.png"></a></p><h2 id="CSS圆角"><a href="#CSS圆角" class="headerlink" title="CSS圆角"></a>CSS圆角</h2><ul><li>border-radius: 5px 10px 20px 50px<br><a href="https://imgtu.com/i/62sYNt"><img src="https://s3.ax1x.com/2021/03/18/62sYNt.png" alt="62sYNt.png"></a></li><li>border-radius: 2em&#x2F;1em<br><a href="https://imgtu.com/i/62s8HA"><img src="https://s3.ax1x.com/2021/03/18/62s8HA.png" alt="62s8HA.png"></a></li><li>border-radius:10px 20px 30px 40px&#x2F;40px 30px 20px 10px<br><a href="https://imgtu.com/i/62sJAI"><img src="https://s3.ax1x.com/2021/03/18/62sJAI.png" alt="62sJAI.png"></a></li><li>css3 calc()方法详解<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">什么是calc()?</span><br><span class="line">学习calc()之前，我们有必要先知道calc()是什么？只有知道了他是个什么东东？在实际运用中更好的使用他。</span><br><span class="line">calc()从字面我们可以把他理解为一个函数function。其实calc是英文单词calculate(计算)的缩写，是css3的一个新增的功能，用来指定元素的长度。比如说，你可以使用calc()给元素的border、margin、pading、font-size和width等属性设置动态值。为何说是动态值呢?因为我们使用的表达式来得到的值。不过calc()最大的好处就是用在流体布局上，可以通过calc()计算得到元素的宽度。</span><br><span class="line"></span><br><span class="line">calc()能做什么？</span><br><span class="line">calc()能让你给元素的做计算，你可以给一个div元素，使用百分比、em、px和rem单位值计算出其宽度或者高度，比如说“width:calc(50% + 2em)”，这样一来你就不用考虑元素DIV的宽度值到底是多少，而把这个烦人的任务交由浏览器去计算。</span><br><span class="line"></span><br><span class="line">calc()语法</span><br><span class="line">calc()语法非常简单，就像我们小时候学加 （+）、减（-）、乘（*）、除（/）一样，使用数学表达式来表示：</span><br><span class="line"></span><br><span class="line">.elm &#123;</span><br><span class="line">  width: calc(expression);</span><br><span class="line">&#125;</span><br><span class="line">其中&quot;expression&quot;是一个表达式，用来计算长度的表达式。</span><br><span class="line"></span><br><span class="line">calc()的运算规则</span><br><span class="line">calc()使用通用的数学运算规则，但是也提供更智能的功能：</span><br><span class="line"></span><br><span class="line">使用“+”、“-”、“*” 和 “/”四则运算；</span><br><span class="line">可以使用百分比、px、em、rem等单位；</span><br><span class="line">可以混合使用各种单位进行计算；</span><br><span class="line">表达式中有“+”和“-”时，其前后必须要有空格，如&quot;widht: calc(12%+5em)&quot;这种没有空格的写法是错误的；</span><br><span class="line">表达式中有“*”和“/”时，其前后可以没有空格，但建议留有空格。</span><br><span class="line"></span><br><span class="line">浏览器的兼容性</span><br><span class="line">浏览器对calc()的兼容性还算不错，在IE9+、FF4.0+、Chrome19+、Safari6+都得到较好支持，同样需要在其前面加上各浏览器厂商的识别符，不过可惜的是，移动端的浏览器还没仅有“firefox for android 14.0”支持，其他的全军覆没。</span><br><span class="line">大家在实际使用时，同样需要添加浏览器的前缀</span><br><span class="line"> .elm &#123;</span><br><span class="line">/*Firefox*/</span><br><span class="line">-moz-calc(expression);</span><br><span class="line">/*chrome safari*/</span><br><span class="line">-webkit-calc(expression);</span><br><span class="line">/*Standard */</span><br><span class="line">calc();</span><br><span class="line"> &#125;</span><br><span class="line"> div&#123;width:calc(100%/3 - 5px);</span><br><span class="line">height: calc(200px);</span><br><span class="line">background: red;</span><br><span class="line">float: left;</span><br><span class="line">margin-right: calc(5px*3 /2);&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="pointer-events"><a href="#pointer-events" class="headerlink" title="pointer-events"></a>pointer-events</h2><ul><li>阻止用户的点击动作产生任何效果</li><li>阻止缺省鼠标指针的显示</li><li>阻止CSS里的 hover 和 active 状态的变化触发事件</li><li>阻止JavaScript点击动作触发的事件</li><li>提交页面，提交按钮点击后，添加这个样式属性（style&#x3D;”pointer-events”），来防止重复提交。</li><li>一些层的绝对定位，覆盖按钮，穿透可以点击它。</li></ul><h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><ul><li>-ms- -ms-box-shadowIE浏览器专属的CSS属性需添加-ms-前缀</li><li>-moz--moz-box-shadow所有基于Gecko引擎的浏览器（如Firefox）专属的CSS属性需添加-moz-前缀</li><li>-o--o-box-shadowOpera浏览器专属的CSS属性需添加-o-前缀</li><li>-webkit- -webkit-box-shadow所有基于Webkit引擎的浏览器（如Chrome、Safari）专属的CSS需添加-webkit-前缀</li></ul><h2 id="CSS3-渐变"><a href="#CSS3-渐变" class="headerlink" title="CSS3 渐变"></a>CSS3 渐变</h2><p>  CSS3 渐变（gradient）可以让你在两个或多个指定的颜色之间显示平稳的过渡。 以前，你必须使用图像来实现这些效果，现在通过使用 CSS3 的渐变（gradients）即可实现。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">background: linear-gradient(direction, color-stop1, color-stop2, ...);</span><br><span class="line">说明：</span><br><span class="line">direction：默认为to bottom，即从上向下的渐变；</span><br><span class="line">stop：颜色的分布位置，默认均匀分布，例如有3个颜色，各个颜色的stop均为33.33%。</span><br></pre></td></tr></table></figure><ul><li><p>示例1：to left、top right、to bottom、to top<br><a href="https://imgtu.com/i/62g2dJ"><img src="https://s3.ax1x.com/2021/03/18/62g2dJ.png" alt="62g2dJ.png"></a></p></li><li><p>示例2：to right bottom、to right top、to left bottom、to left top<br><a href="https://imgtu.com/i/62g6LF"><img src="https://s3.ax1x.com/2021/03/18/62g6LF.png" alt="62g6LF.png"></a></p></li><li><p>示例3：使用角度渐变linear-gradient(10deg, red, blue)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</span><br><span class="line">但是，请注意很多浏览器(Chrome,Safari,fiefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/62ggZ4"><img src="https://s3.ax1x.com/2021/03/18/62ggZ4.png" alt="62ggZ4.png"></a></p></li></ul><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p> 径向渐变不同于线性渐变，线性渐变是从“一个方向”向“另一个方向”的颜色渐变，而径向渐变是从“一个点”向四周的颜色渐变</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">     background: radial-gradient(center, shape, size, start-color, ..., last-color);</span><br><span class="line">说明：</span><br><span class="line">center：渐变起点的位置，可以为百分比，默认是图形的正中心。</span><br><span class="line">shape：渐变的形状，ellipse表示椭圆形，circle表示圆形。默认为ellipse，如果元素形状为正方形的元素，则ellipse和circle显示一样。</span><br><span class="line">size：渐变的大小，即渐变到哪里停止，它有四个值。 closest-side：最近边； farthest-side：最远边； closest-corner：最近角； farthest-corner：最远角。</span><br></pre></td></tr></table></figure><ul><li><p>示例1：多颜色节点均匀分布</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(<span class="number">50%</span> <span class="number">50%</span>, farthest-corner, red, green, blue); &#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(center, farthest-corner, red, green, blue); &#125;</span><br></pre></td></tr></table></figure></li><li><p>示例2：多颜色节点均匀分布</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle, red, yellow, green); &#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse, red, yellow, green); &#125;</span><br></pre></td></tr></table></figure></li><li><p>示例3：设置渐变形状</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle：渐变为最大的圆形； ellipse：根据元素形状渐变，元素为正方形是显示效果与circle无异</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/622VWq"><img src="https://s3.ax1x.com/2021/03/18/622VWq.png" alt="622VWq.png"></a></p></li><li><p>示例4：不同尺寸的渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">60%</span> <span class="number">40%</span>, closest-side, blue, green, yellow, black); &#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">60%</span> <span class="number">40%</span>, farthest-side, blue, green, yellow, black); &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">60%</span> <span class="number">40%</span>, closest-corner, blue, green, yellow, black); &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(left bottom, farthest-corner, blue, green, yellow, black);&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/622EYn"><img src="https://s3.ax1x.com/2021/03/18/622EYn.png" alt="622EYn.png"></a></p></li></ul><h3 id="重复性渐变"><a href="#重复性渐变" class="headerlink" title="重复性渐变"></a>重复性渐变</h3><ol><li><p>重复性线性渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(red, yellow <span class="number">10%</span>, green <span class="number">20%</span>); &#125;</span><br></pre></td></tr></table></figure></li><li><p>重复性径向渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(red, yellow <span class="number">10%</span>, green <span class="number">20%</span>); &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="拓展：文字渐变"><a href="#拓展：文字渐变" class="headerlink" title="拓展：文字渐变"></a>拓展：文字渐变</h3><p>background: linear-gradient(to left,red,blue,yellow);<br>-webkit-background-clip: text;<br> color: transparent;</p><h2 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h2><p>css3的transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值</p><ol><li>transition-property：检索或设置对象中的参与过渡的属性</li><li>transition-duration：检索或设置对象过渡的持续时间</li><li>transition-delay：检索或设置对象延迟过渡的时间</li><li>transition-timing-function：检索或设置对象中过渡的过渡类型<br><a href="http://cubic-bezier.com/">检索或设置对象中过渡的过渡类型:贝塞尔曲线值</a><br> cubic-bezier(0, 1.15, 0.05, 1.24)  贝塞尔曲线值<br><a href="https://imgtu.com/i/6223k9"><img src="https://s3.ax1x.com/2021/03/18/6223k9.png" alt="6223k9.png"></a></li></ol><p><strong>简写：transition: all&#x2F;具体属性值 运动时间s&#x2F;ms 延迟时间s&#x2F;ms 过渡类型</strong><br><strong>简写必须得有过渡的属性(all)和时间</strong></p><h2 id="变形属性：transform"><a href="#变形属性：transform" class="headerlink" title="变形属性：transform"></a>变形属性：transform</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform翻译成汉语具有&quot;变换&quot;或者&quot;改变&quot;的意思。</span><br><span class="line">通过此属性具有非常强大的功能，比如可以实现元素的位移、拉伸或者旋转等效果</span><br><span class="line">最能体现transform 属性强大实力的是实现元素的3D变换效果。</span><br><span class="line">多个属性使用空格隔开</span><br></pre></td></tr></table></figure><h3 id="2D"><a href="#2D" class="headerlink" title="2D"></a>2D</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2D变换，是在一个平面对元素进行的操作。</span><br><span class="line">可以对元素进行水平或者垂直位移、旋转或者拉伸.</span><br></pre></td></tr></table></figure><ul><li><p>明确一下坐标系</p><p><a href="https://imgtu.com/i/622lTJ"><img src="https://s3.ax1x.com/2021/03/18/622lTJ.png" alt="622lTJ.png"></a></p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对上面坐标系简单分析如下：</span><br><span class="line">（1）.默认状态下，x轴是水平的，向右为正。</span><br><span class="line">（2）.默认状态下，y轴是垂直的，向下为正，这与传统的数学坐标系不同。</span><br></pre></td></tr></table></figure><h4 id="2D功能函数"><a href="#2D功能函数" class="headerlink" title="2D功能函数"></a>2D功能函数</h4><h4 id="2D位移-translate"><a href="#2D位移-translate" class="headerlink" title="2D位移 translate()"></a>2D位移 translate()</h4><ul><li>将元素向指定的方向移动，类似于position中的relative。</li><li>水平移动：向右移动translate(tx,0)和向左移动translate(-tx,0)；</li><li>垂直移动：向上移动translate(0,-ty)和向下移动translate(0,ty);</li><li>对角移动：右下角移动translate(tx,ty)、右上角移动translate(tx,-ty)、左上角移动translate(-tx,-ty)和左下角移动translate(-tx,ty)。</li><li>translateX</li><li>translateY</li></ul><h4 id="2D缩放scale"><a href="#2D缩放scale" class="headerlink" title="2D缩放scale()"></a>2D缩放scale()</h4><ul><li><p>让元素根据中心原点对对象进行缩放。默认的值1。因此0.01到0.99之间的任何值，使一个元素缩小；而任何大于或等于1.01的值，让元素显得更大。</p></li><li><p>缩放scale()函数和translate()函数的语法非常相似，他可以接受一个值，也可以同时接受两个值，如果只有一个值时，其第二个值默认与第一个值相等。例如，scale(1,1)元素不会有任何变化，而scale(2,2)让元素沿X轴和Y轴放大两倍。</p></li><li><p>scaleX()：相当于scale(sx,1)。表示元素只在X轴（水平方向）缩放元素，其默认值是1。</p></li><li><p>scaleY()：相当于scale(1,sy)。表示元素只在Y轴（纵横方向）缩放元素，其默认值是１。</p></li></ul><h4 id="3、rotate"><a href="#3、rotate" class="headerlink" title="3、rotate()"></a>3、rotate()</h4><pre><code>旋转rotate()函数通过指定的角度参数对元素根据对象原点指定一个2D旋转。它主要在二维空间内进行操作，接受一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。 rotateX() 方法，元素围绕其 X 轴以给定的度数进行旋转 rotateY() 方法，元素围绕其 Y 轴以给定的度数进行旋转</code></pre><h4 id="4、skew"><a href="#4、skew" class="headerlink" title="4、skew()"></a>4、skew()</h4><pre><code>倾斜skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。一个参数时：表示水平方向的倾斜角度；两个参数时：第一个参数表示水平方向的倾斜角度，第二个参数表示垂直方向的倾斜角度</code></pre><p><a href="https://imgtu.com/i/622rtA"><img src="https://s3.ax1x.com/2021/03/18/622rtA.png" alt="622rtA.png"></a></p><h4 id="变形原点"><a href="#变形原点" class="headerlink" title="变形原点"></a>变形原点</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform-origin</span><br><span class="line">transform-origin是变形原点，也就是该元素围绕着那个点变形或旋转，该属性只有在设置了transform属性的时候起作用；</span><br><span class="line">因为我们元素默认基点就是其中心位置，换句话说我们没有使用transform-origin改变元素基点位置的情况下，transform进行的rotate,translate,scale,skew等操作都是以元素自己中心位置进行变化的。</span><br></pre></td></tr></table></figure><h3 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2d场景，在屏幕上水平和垂直的交叉线x轴和y轴</span><br><span class="line">3d场景，在垂直于屏幕的方法，相对于3d多出个z轴</span><br><span class="line">Z轴：靠近屏幕的方向是正向，远离屏幕的方向是反向</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/622sfI"><img src="https://s3.ax1x.com/2021/03/18/622sfI.png" alt="622sfI.png"></a></p><h4 id="实现3D场景"><a href="#实现3D场景" class="headerlink" title="实现3D场景"></a>实现3D场景</h4><p><strong>transform-style属性</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform-style属性是3D空间一个重要属性，指定嵌套元素如何在3D空间中呈现。他主要有两个属性值：flat和preserve-3d</span><br><span class="line"></span><br><span class="line">其中flat值为默认值，表示所有子元素在2D平面呈现。preserve-3d表示所有子元素在3D空间中呈现。</span><br><span class="line">也就是说，如果对一个元素设置了transform-style的值为flat，则该元素的所有子元素都将被平展到该元素的2D平面中进行呈现。沿着X轴或Y轴方向旋转该元素将导致位于正或负Z轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。如果对一个元素设置了transform-style的值为preserve-3d，它表示不执行平展操作，他的所有子元素位于3D空间中。</span><br></pre></td></tr></table></figure><h4 id="3D位移"><a href="#3D位移" class="headerlink" title="3D位移"></a>3D位移</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS3中的3D位移主要包括translateZ()和translate3d()两个功能函数；</span><br></pre></td></tr></table></figure><ul><li>translate3d(tx,ty,tz) <ul><li>ty：代表纵向坐标位移向量的长度；</li><li>tx：代表横向坐标位移向量的长度；</li><li>tz：代表Z轴位移向量的长度。此值不能是一个百分比值，如果取值为百分比值，将会认为无效值。</li></ul></li><li>translateZ(t)<ul><li>指的是Z轴的向量位移长度。</li></ul></li></ul><h4 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS3中的3D旋转主要包括rotateX()、rotateY()、rotateZ()和rotate3d()四个功能函数；</span><br></pre></td></tr></table></figure><ul><li>rotateX(a)<ul><li>rotateX()函数指定一个元素围绕X轴旋转，旋转的量被定义为指定的角度；如果值为正值，元素围绕X轴顺时针旋转；反之，如果值为负值，元素围绕X轴逆时针旋转。</li></ul></li><li>rotateY(a)<ul><li>rotateY()函数指定一个元素围绕Y轴旋转，旋转的量被定义为指定的角度；如果值为正值，元素围绕Y轴顺时针旋转；反之，如果值为负值，元素围绕Y轴逆时针旋转。</li></ul></li><li>rotateZ(a)<ul><li>rotateZ()函数和其他两个函数功能一样的，区别在于rotateZ()函数指定一个元素围绕Z轴旋转</li></ul></li><li>rotate3d(x,y,z,a)(建议取值0或1)1表示旋转 0表示不旋转<ul><li>x：是一个0到１之间的数值，主要用来描述元素围绕X轴旋转的矢量值；</li><li>y：是一个０到１之间的数值，主要用来描述元素围绕Y轴旋转的矢量值；</li><li>z：是一个０到１之间的数值，主要用来描述元素围绕Z轴旋转的矢量值；</li><li>a：是一个角度值，主要用来指定元素在3D空间旋转的角度，如果其值为正值，元素顺时针旋转，反之元素逆时针旋转。</li></ul></li></ul><h4 id="3D缩放"><a href="#3D缩放" class="headerlink" title="3D缩放"></a>3D缩放</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 3D缩放：CSS3中的3D缩放主要包括scaleZ()和scale3d()两个功能函数；</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简介： CSS3 3D变形中的缩放主要有scaleZ()和scale3d()两种函数，当scale3d()中X轴和Y轴同时为1，即scale3d(1,1,sz)，其效果等同于scaleZ(sz)。通过使用3D缩放函数，可以让元素在Z轴上按比例缩放。默认值为１，当值大于１时，元素放大，反之小于１大于0.01时，元素缩小</span><br></pre></td></tr></table></figure><ul><li><p>scale3d()  如：transform: scale3d(2,1,1);</p><ul><li>sx：横向缩放比例；</li><li>sy：纵向缩放比例；</li><li>sz：Z轴缩放比例；</li></ul></li><li><p>scaleZ(s)</p><ul><li>s：指定元素每个点在Z轴的比例。</li></ul></li><li><p>注：scaleZ()和scale3d()函数单独使用时没有任何效果，需要配合其他的变形函数一起使用才会有效果</p></li></ul><p>2)、<strong>perspective</strong>  设置3d元素居视图的距离，也就是视点距离；允许你改变3D元素是怎样查看透视图 </p><p>​            景深(value) 离屏幕多远的距离去观察元素，值越大幅度越小</p><p><a href="http://www.zhangxinxu.com/study/201209/transform-perspective-same-rotate.html">http://www.zhangxinxu.com/study/201209/transform-perspective-same-rotate.html</a> </p><p>两种方式：一种可以给父元素写，一种给子元素加</p><p>两个都设置会发生冲突，建议只设置父元素，通常的数值在900-1200之间<br>如果当你的视线距离物体足够远的时候，基本上就不会有近大远小的感觉    </p><p>定义时的perspective属性，它是一个元素的子元素，透视图，而不是元素本身；常用的设置 ：perspective：600px;   perspective：1200px; </p><p>例：.container {</p><p>  display: block;</p><p>  width: 200px;</p><p>  height: 200px;</p><p>  margin-bottom: 50px;</p><p>  border: 1px solid #bbb;</p><p>  perspective: 600px;</p><p>}</p><p>.box {</p><p>  width: 200px;</p><p>  height: 200px;</p><p>  opacity: .75;</p><p>  background-color: darkblue;</p><p>  transform: rotateY(45deg);</p><p>}                           </p><h2 id="css3动画"><a href="#css3动画" class="headerlink" title="css3动画"></a>css3动画</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</span><br></pre></td></tr></table></figure><h2 id="关键帧的定义"><a href="#关键帧的定义" class="headerlink" title="关键帧的定义"></a>关键帧的定义</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不同于过渡动画只能定义首尾两个状态，关键帧动画可以定义多个状态，或者用关键帧的话来说，过渡动画只能定义第一帧和最后一帧这两个关键帧，而关键帧动画则可以定义任意多的关键帧，因而能实现更复杂的动画效果。</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mymove&#123;</span><br><span class="line"> <span class="selector-tag">from</span>&#123;初始状态属性&#125;</span><br><span class="line"><span class="selector-tag">to</span>&#123;结束状态属性&#125;</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">@keyframes</span> mymove&#123;</span><br><span class="line"> <span class="number">0%</span>&#123;初始状态属性&#125;</span><br><span class="line"><span class="number">50%</span>（中间再可以添加关键帧）</span><br><span class="line"><span class="number">100%</span>&#123;结束状态属性&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>￼￼￼</p><p><a href="https://imgtu.com/i/622xAJ"><img src="https://s3.ax1x.com/2021/03/18/622xAJ.png" alt="622xAJ.png"></a><br><a href="https://imgtu.com/i/622j74"><img src="https://s3.ax1x.com/2021/03/18/622j74.png" alt="622j74.png"></a></p><h2 id="animation-vs-transition"><a href="#animation-vs-transition" class="headerlink" title="animation  vs  transition"></a>animation  vs  transition</h2><ul><li>相同点：都是随着时间改变元素的属性值。</li><li>不同点：transition需要触发一个事件(hover事件或click事件等)才会随时间改变其css属性；<br>而animation在不需要触发任何事件的情况下也可以显式的随着时间变化来改变元素css的属性值，从而达到一种动画的效果，css3的animation就需要明确的动画属性值 ，animation可以帧动画，突然transition不可以实现帧动画</li></ul><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><ul><li>animation-name<ul><li>检索或设置对象所应用的动画名称</li><li>必须与规则@keyframes配合使用，<br>eg:@keyframes mymove{}  animation-name:mymove;</li></ul></li><li>animation-duration <ul><li>检索或设置对象动画的持续时间</li><li>说明：animation-duration:3s;    动画完成使用的时间为3s</li></ul></li><li>animation-timing-function <ul><li>检索或设置对象动画的过渡类型</li><li>属性值<ul><li>linear：线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)</li><li>ease：平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)</li><li>ease-in：由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)</li><li>ease-out：由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0)</li><li>ease-in-out：由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)</li><li>step-start:马上跳到动画每一结束桢的状态</li><li>step-end</li></ul></li></ul></li><li>animation-delay<ul><li>检索或设置对象动画延迟的时间</li><li>说明：animation-delay:0.5s;     动画开始前延迟的时间为0.5s)</li></ul></li><li>animation-iteration-count <ul><li>检索或设置对象动画的循环次数</li><li>属性值<ul><li>animation-iteration-count: infinite | number;</li><li>infinite：无限循环</li><li>number: 循环的次数</li></ul></li></ul></li><li>animation-direction <ul><li>检索或设置对象动画在循环中是否反向运动</li><li>属性值<ul><li>normal：正常方向</li><li>reverse：反方向运行</li><li>alternate：动画先正常运行再反方向运行，并持续交替运行</li><li>alternate-reverse：动画先反运行再正方向运行，并持续交替运行</li></ul></li></ul></li><li>animation-play-state <ul><li>检索或设置对象动画的状态</li><li>属性值<ul><li>animation-play-state:running | paused;</li><li>running:运动</li><li>paused: 暂停</li><li>animation-play-state:paused;       当鼠标经过时动画停止，鼠标移开动画继续执行</li></ul></li></ul></li></ul><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><a href="https://imgtu.com/i/62RR81"><img src="https://s3.ax1x.com/2021/03/18/62RR81.png" alt="62RR81.png"></a></p><h2 id="animate-css动画库的使用"><a href="#animate-css动画库的使用" class="headerlink" title="animate.css动画库的使用"></a><a href="https://www.cnblogs.com/xiaohuochai/p/7372665.html">animate.css动画库的使用</a></h2><p><a href="https://unpkg.com/animate.css@3.5.2/animate.min.css%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9D%80">https://unpkg.com/animate.css@3.5.2/animate.min.css在线地址</a></p><p>animate.css里面的类，主要包括Attention(晃动效果)、bounce(弹性缓冲效果)、fade(透明度变化效果)、flip(翻转效果)、rotate(旋转效果)、slide(滑动效果)、zoom(变焦效果)、special(特殊效果)</p><p><a href="https://daneden.github.io/animate.css/">https://daneden.github.io/animate.css/</a> 动画库效果</p><p>扩展：</p><p>animation-fill-mode规定对象动画时间之外的状态。</p><p>none 不改变默认行为</p><p>forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）</p><p>Backface-visibility:hidden&#x2F; visible   元素背景是否可见</p><h2 id="动画案例"><a href="#动画案例" class="headerlink" title="动画案例"></a>动画案例</h2><p>css3盒模型（重点）</p><p>css3 弹性盒模型（重点）</p><p>多列布局 </p><h1 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h1><p><a href="https://imgtu.com/i/62Rfv6"><img src="https://s3.ax1x.com/2021/03/18/62Rfv6.png" alt="62Rfv6.png"></a><br><a href="https://imgtu.com/i/62R4KK"><img src="https://s3.ax1x.com/2021/03/18/62R4KK.png" alt="62R4KK.png"></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;(标准盒模型)</span><br><span class="line">  <span class="comment">/* 这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;(怪异盒模型)</span><br><span class="line">  <span class="comment">/* 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><ul><li>Flex容器：采用 Flex 布局的元素的父元素；</li><li>Flex项目：采用 Flex 布局的元素的父元素的子元素；</li><li>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</li><li>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。<br><a href="https://imgtu.com/i/62RWgx"><img src="https://s3.ax1x.com/2021/03/18/62RWgx.png" alt="62RWgx.png"></a></li></ul><h2 id="flexbox布局功能主要具有以下几点："><a href="#flexbox布局功能主要具有以下几点：" class="headerlink" title="flexbox布局功能主要具有以下几点："></a>flexbox布局功能主要具有以下几点：</h2><ol><li>屏幕和浏览器窗口大小发生变化也可以灵活调整布局；</li><li>指定伸缩项目沿着主轴或侧轴按比例分配额外空间，从而调增伸缩项目的大小；</li><li>指定伸缩项目沿着主轴或侧轴将伸缩容器额外空间，分配到伸缩项目之前. 之后或之间；</li><li>指定如何将垂直于元素布局轴的额外空间分布到该元素的周围；</li><li>控制元素在页面上的布局方向；</li><li>按照不同于标准流所指定的排序方式对屏幕上的元素重新排序。</li></ol><h2 id="flex容器属性"><a href="#flex容器属性" class="headerlink" title="flex容器属性"></a>flex容器属性</h2><ol><li>display:flex、inline-flex<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</span><br></pre></td></tr></table></figure></li><li>flex-direction属性 决定主轴的方向（即项目的排列方向）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: row从左向右 | row-reverse与row相反 | column从上到下 | column-reverse;与column相反</span><br></pre></td></tr></table></figure></li><li>flex-wrap属性，定义子元素是否换行显示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: nowrap 不换行    默认值，不管超出还是不超出都不会换行</span><br><span class="line">wrap   换行    一旦伸缩项目超出伸缩容器，那么就会换行</span><br><span class="line">wrap-reverse; 换行反向    主轴水平时，上下反向，主轴垂直时，左右反向；</span><br></pre></td></tr></table></figure></li><li>flex-flow <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap;</span><br></pre></td></tr></table></figure></li><li>justify-content属性 定义了项目在主轴（）上的对齐方式。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">justify-content: </span><br><span class="line">flex-start  伸缩项目向一行的起始位置靠齐；</span><br><span class="line"> flex-end   伸缩项目向一行的结束位置靠齐；</span><br><span class="line"> center     伸缩项目向一行的中间位置靠齐；</span><br><span class="line"> space-between  伸缩项目会平均的分布在行里；</span><br><span class="line"> space-around;  伸缩项目会平均的分布在行里，两端保留一半的空间；</span><br></pre></td></tr></table></figure></li><li>align-items属性定义项目在交叉轴上如何对齐。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">align-items:</span><br><span class="line">flex-start：伸缩项目在侧轴起点边的外边距 紧靠住 该行在侧轴起始边；</span><br><span class="line">flex-end：伸缩项目在侧轴终点边的外边距 紧靠住 该行在侧轴终点边；</span><br><span class="line">center：伸缩项目的外边距盒 在该行的侧轴上居中放置；</span><br><span class="line">baseline：伸缩项目根据伸缩项目的基线对齐；</span><br><span class="line">（有内容时，按照文字的基线对齐，没有内容时会按元素的基线对齐）</span><br><span class="line">stretch：伸缩项目拉伸填充整个伸缩容器。(默认值)</span><br><span class="line">注：stretch是把它的高度进行拉伸，确保没有高度的情况下，如果有高度会跟高度走，没有高度会进行拉伸，不定议高度是默认值拉伸</span><br></pre></td></tr></table></figure></li><li>align-content属性定义了多根轴线的对齐方式。对于单行子元素，该属性不起作用。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">align-content在侧轴上执行样式的时候，会把默认的间距给合并。对于单行子元素，该属性不起作用</span><br><span class="line">align-content 定义多个伸缩行的对齐方式，往往要与换行同时应用（换行时才用）</span><br><span class="line">flex-start：各行向伸缩容器的起点位置堆叠；</span><br><span class="line">flex-end：各行向伸缩容器的结束位置堆叠；</span><br><span class="line">center：各行向伸缩容器的中间位置堆叠；</span><br><span class="line">space-between：各行在伸缩容器中平均分布；</span><br><span class="line">space-around：各行在伸缩容器中平均分布，两端保留一半的空间；</span><br><span class="line">stretch：各行将伸展以占用额外空间。（默认值)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="flex项目属性"><a href="#flex项目属性" class="headerlink" title="flex项目属性"></a>flex项目属性</h2><ol><li>align-self属性<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Internet Explorer 和 Safari 浏览器不支持 align-self 属性</span><br><span class="line">说明：</span><br><span class="line">align-self 属性规定灵活容器内被选中项目的对齐方式。</span><br><span class="line">注意：align-self 属性可重写灵活容器的 align-items 属性。</span><br><span class="line">属性值</span><br><span class="line">auto 默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 &quot;stretch&quot;。</span><br><span class="line">Stretch元素被拉伸以适应容器。</span><br><span class="line">Center元素位于容器的中心。</span><br><span class="line">flex-start元素位于容器的开头。</span><br><span class="line">flex-end元素位于容器的结尾。</span><br></pre></td></tr></table></figure></li><li>order<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">number排序优先级，数字越大越往后排，默认为0，支持负数。</span><br></pre></td></tr></table></figure></li><li>flex<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">复合属性。设置或检索弹性盒模型对象的子元素如何分配空间</span><br><span class="line">详细属性值：</span><br><span class="line">缩写「flex: 1」, 则其计算值为「1 1 0%」</span><br><span class="line">缩写「flex: auto」, 则其计算值为「1 1 auto」</span><br><span class="line">flex: none」, 则其计算值为「0 0 auto」</span><br><span class="line">flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值</span><br></pre></td></tr></table></figure></li><li>flex-xxx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flex-grow</span><br><span class="line">一个数字，规定项目将相对于其他灵活的项目进行扩展的量。</span><br><span class="line">flex-shrink</span><br><span class="line">一个数字，规定项目将相对于其他灵活的项目进行收缩的量。</span><br><span class="line">flex-basis</span><br><span class="line">项目的长度 分配多余空间之前，项目占据的主轴空间（Flex元素在主轴方向的初始大小，如果主轴是x轴，相当于width，如果主轴是Y，相当于height）</span><br></pre></td></tr></table></figure></li></ol><h1 id="移动端项目布局类型"><a href="#移动端项目布局类型" class="headerlink" title="移动端项目布局类型"></a>移动端项目布局类型</h1><ol><li><p><strong>rem布局（等比缩放布局、百分比布局）</strong><br><a href="https://imgtu.com/i/62c6UA"><img src="https://s3.ax1x.com/2021/03/18/62c6UA.png" alt="62c6UA.png"></a></p></li><li><p><strong>弹性布局（100%布局、流式布局）</strong><br><a href="https://imgtu.com/i/62crHH"><img src="https://s3.ax1x.com/2021/03/18/62crHH.png" alt="62crHH.png"></a></p><ul><li>弹性布局特点：<ul><li>顶部与底部的bar不管分辨率怎么变,它的⾼度和位置都不变;中间每条招聘信息不管分辨率怎么变，招聘公司的图标等信息都位于条目的左边，薪资都位于右边.</li><li>特点：关键元素高宽和位置都不变，只有容器元素在做伸缩变换。对于这类app，记住一个开发原则就好：文字流式，控件弹性，图片等比缩放.<br> <a href="https://imgtu.com/i/62cdgK"><img src="https://s3.ax1x.com/2021/03/18/62cdgK.png" alt="62cdgK.png"></a></li></ul></li></ul></li><li><p><strong>混合布局案例 （ rem布局结合弹性布局 ）</strong><br><a href="https://imgtu.com/i/62cyEd"><img src="https://s3.ax1x.com/2021/03/18/62cyEd.png" alt="62cyEd.png"></a></p></li><li><p>什么是DPR</p></li></ol><ul><li>设备的物理像素和逻辑像素（真实像素&#x2F;css像素）的对应关系，即物理像素（设备像素）&#x2F;逻辑像素，默认缩放为100%的情况下，设备像素和CSS像素的比值。例如iphone6，屏幕逻辑像素为375PX，而购买时所知的750PX，这就是屏幕的物理像素。</li><li>其实每个手机的DPR不全都是一样的，例如我们的iphone6它的DPR是2，但是iphon6Plus它的DPR却是3，在早先的移动设备中呢，是没有DPR这个概念的，随着我们技术的发展，移动设备的屏幕像素密度越来越高，苹果公司从iphone4开始推出了视网膜屏幕，之所以叫视网膜屏幕，是因为屏幕的PPI，也就是屏幕像素密度太高了，人的视网膜无法分辨出屏幕上的像素点。</li><li>iphone4的分辨率提高了一倍，但屏幕尺寸却没有变化，这意味着同样大小的屏幕上，像素多了一倍，于是DPR &#x3D; 2  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DPR = 设备像素 / 逻辑像素</span><br><span class="line">实际上从来用不上设备像素 ，唯一的例外是screen.width/height</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>常见的移动端屏幕尺寸<br>  <code>2.4英寸，3.5英寸，3.7英寸，4.2英寸，4.7英寸，5.0英寸，5.5 英寸，6.0英寸，这是我们移动端页面重构最基本的概念。</code><br>  devicePixelRatio设备像素比</p></li><li><p><strong>移动端页面重构常用单位</strong><br>因为要适应所有的移动端屏幕尺寸，所以传统的px布局页面在移动端就不太适用。<br>Em是父盒子的倍数，rem是根元素的倍数</p><ol><li>Rem是指相对于根元素的字体大小单位，能等比例适配所有屏幕，根据变化html也就是根元素的字体大小来控制rem的大小<br>JS计算：通过获取视口的宽度&#x2F;实际设计图的宽度*html的font-size </li><li>CSS3新增单位 VW，VH<ul><li>VW:视窗宽度，1VW等于视窗宽度的百分之一</li><li>VH:视窗高度，1VH等于视窗高度的百分之一<br>我们也可以把VW转换成PX赋值给font-size，<br>元素所展示的大小（设计图固定大小）&#x3D;（VW<em>设计稿宽度）&#x2F;100<br>VW &#x3D; 元素所展示的大小（设计图固定大小）</em>100&#x2F;设计稿宽度<br>例如：设备的分辨率为640<em>1136，逻辑像素为320</em>568，1VW就等于3.2px，我们把font-size：100px，转换成VW就等于31.25VW;<br>1rem等31.25VW获取到根元素大小一起结合写等比例绽放布局。<br>VW，VH是CSS3新增的单位，它只能有着自己的兼容性，IE9+局部支持，chrome&#x2F;firefox&#x2F;safari&#x2F;opera支持，iOS safari 8+支持，Android browser4.4+支持，chrome for android39支持。<br><a href="https://imgtu.com/i/62REHe"><img src="https://s3.ax1x.com/2021/03/18/62REHe.png" alt="62REHe.png"></a></li></ul></li></ol></li></ol><h1 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多列布局类似报纸或杂志中的排版方式，主要用以控制大篇幅文本。</span><br></pre></td></tr></table></figure><h2 id="多列属性"><a href="#多列属性" class="headerlink" title="多列属性"></a>多列属性</h2><ol><li>column-count（最大列数）</li></ol><p>  <code>  属性规定元素应该被分隔的列数   适用于：除table外的非替换块级元素, table cells, inline-block元素  </code><br>  2. column-gap</p><p>  <code>  属性规定列之间的间隔大小  </code><br>  3. column-rule</p><p>  <code>  设置或检索对象的列与列之间的边框。复合属性。   olumn-rule-color规定列之间规则的颜色。   olumn-rule-style规定列之间规则的样式。   olumn-rule-width规定列之间规则的宽度。  </code><br>  4. column-fill</p><p>  <code>  设置或检索对象所有列的高度是否统一   uto：列高度自适应内容   alance：所有列的高度以其中最高的一列统一  </code><br>  5. column-span<br>  <code>  设置或检索对象元素是否横跨所有列。   one：不跨列   ll：横跨所有列  </code><br>  6. column-width<br>  <code>  设置或检索对象每列的宽度（最小宽）  </code><br>  7. columns</p><p>  <code>设置或检索对象的列数和每列的宽度。复合属性</code><br>  <code>&lt;column-width&gt; || &lt;column-count&gt;</code></p><p><strong>注</strong>: </p><ul><li>Internet Explorer 10 和 Opera 支持多列属性。</li><li>Firefox 需要前缀 -moz-。</li><li>Chrome 和 Safari 需要前缀 -webkit-。</li></ul><h1 id="媒体查询-rem"><a href="#媒体查询-rem" class="headerlink" title="媒体查询 + rem"></a>媒体查询 + rem</h1><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">计算rem方法：</span><br><span class="line">       结合媒体查询   -》   随着设备的改变 更改html  font-size的值。</span><br><span class="line"></span><br><span class="line">       媒体查询确定范围？？</span><br><span class="line"></span><br><span class="line">       移动端设计图 ： 640px   750px   1080px;</span><br><span class="line">       dpr              2       2         3</span><br><span class="line">       范围            320px   375px     </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">320px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">321px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">375px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">376px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ui设计图  640px</span><br><span class="line">dpr    2</span><br><span class="line">ps量出height  88px;</span><br><span class="line">88px / 2 ==  44px;</span><br><span class="line">设计图640px  dpr 2</span><br><span class="line">640px  /  2 == 320px</span><br><span class="line">44px / 12px == rem</span><br></pre></td></tr></table></figure><h1 id="vw-rem"><a href="#vw-rem" class="headerlink" title="vw + rem"></a>vw + rem</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为了方便计算，可以把html的font-size值 设置成100px;        1rem == 100px;</span><br><span class="line">100px是一个固定值，没办法随着设备的改变而改变。</span><br><span class="line">能跟随设备发生改变 </span><br><span class="line">vw 根据视口大小进行改变。</span><br><span class="line">100px == ?vw   </span><br></pre></td></tr></table></figure><h2 id="根据设计图分配情况"><a href="#根据设计图分配情况" class="headerlink" title="根据设计图分配情况"></a>根据设计图分配情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种情况：</span><br><span class="line">        如果UI设计图为 640px </span><br><span class="line">        考虑的dpr    2</span><br><span class="line">        适配的核心设备   320px;</span><br><span class="line">        100vw == 320px</span><br><span class="line">        1vw == 3.2px</span><br><span class="line">        ?vw == 100px</span><br><span class="line">        31.25vw == 100px</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第二种情况</span><br><span class="line">        如果设计图为750px</span><br><span class="line">        考虑dpr    2</span><br><span class="line">        适配的核心设备   375px</span><br><span class="line">        100vw == 375px</span><br><span class="line">        1vw == 3.75px</span><br><span class="line">        ?vw == 100px</span><br><span class="line">        26.67vw == 100px;</span><br></pre></td></tr></table></figure><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果设计图为 640px    html设置&#123;font-size:31.25vw&#125;</span><br><span class="line">如果设计图为 750px    html设置&#123;font-size:26.67vw&#125;</span><br></pre></td></tr></table></figure><h2 id="计算流程"><a href="#计算流程" class="headerlink" title="计算流程"></a>计算流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vw  结合 rem   计算流程</span><br><span class="line">因为设计图 640px</span><br><span class="line">所以html设置&#123;font-size:31.25vw;&#125;</span><br><span class="line">ps中获取height 88px</span><br><span class="line">dpr     2</span><br><span class="line">88 / 2 == 44px</span><br><span class="line">44 / 100 == 0.44rem;</span><br></pre></td></tr></table></figure><h1 id="flxible-js-插件"><a href="#flxible-js-插件" class="headerlink" title="flxible.js  插件"></a>flxible.js  插件</h1><h2 id="计算流程-1"><a href="#计算流程-1" class="headerlink" title="计算流程"></a>计算流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1：引入flxible.js插件</span><br><span class="line">        &lt;script src=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">2:去掉html里面默认的meta标签</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="flxible-js原理"><a href="#flxible-js原理" class="headerlink" title="flxible.js原理"></a>flxible.js原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在页面中引入flexible.js后，flexible会在&lt;html&gt;标签上增加一个data-dpr属性和font-size样式（如下图）。</span><br><span class="line">为了方便计算可以设置成100px;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js首先会获取设备型号，然后根据不同设备添加不同的data-dpr值，比如说1、2或者3，从源码中我们可以看到。</span></span><br><span class="line"><span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">    <span class="keyword">var</span> isAndroid = win.<span class="property">navigator</span>.<span class="property">appVersion</span>.<span class="title function_">match</span>(<span class="regexp">/android/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> isIPhone = win.<span class="property">navigator</span>.<span class="property">appVersion</span>.<span class="title function_">match</span>(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> devicePixelRatio = win.<span class="property">devicePixelRatio</span>;</span><br><span class="line">    <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">        <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">        <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;</span><br><span class="line">            dpr = <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">            dpr = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dpr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">        dpr = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scale = <span class="number">1</span> / dpr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">页面中的元素用rem单位来设置，rem就是相对于根元素&lt;html&gt;的font-size来计算的，flexible.js能根据&lt;html&gt;的font-size计算出元素的盒模型大小。这样就意味着我们只需要在根元素确定一个px字号，因此来算出各元素的宽高，从而实现屏幕的适配效果</span><br></pre></td></tr></table></figure><h2 id="把视觉稿中的px转换成rem"><a href="#把视觉稿中的px转换成rem" class="headerlink" title="把视觉稿中的px转换成rem"></a>把视觉稿中的px转换成rem</h2><p>工作中我们常见的视觉稿大小大至可为640、750、1080三种。不过flexible.js并没有限制只能用这三种，所以你还可以根据自身情况来调整，具体如何转换，我们以视觉稿为640px的宽来举例子，把640px分为100份，每一份称为一个单位a，那么每个a就是6.4px，而1rem单位被认定为10a，此时，1rem&#x3D;1(a)X10X6.4(px)即64px。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">640px/100=6.4px                              1个单位a为6.4px</span><br><span class="line">1rem = 10a                                   1rem单位被认定为10a</span><br><span class="line">1rem = 1(a)*10*6.4(px) = 64px</span><br></pre></td></tr></table></figure><p>Vw&#x3D;87&#x2F;750*100</p><p>现在Web朝着响应式的趋势发展，媒体查询在创建响应式网站中起到了主要作用。没有媒体查询几乎不能实现响应式设计，利用媒体查询，我们可以针对特定的设备，如显示器、智能手机和平板，写CSS。</p><p>媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成。媒体查询中可用于检测的媒体特性有 width 、 height 和 color （等）。使用媒体查询，可以在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p><p>媒体类型引用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、link方式</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/wide.css&quot; media=&quot;screen and (max-width:641px)&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/mobile.css&quot; media=&quot;screen and (min-width:640px) and (max-width:960px)&quot; /&gt;</span><br><span class="line"></span><br><span class="line">2、@import方式</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">@import url(style.css) screen and (max-width:641px);</span><br><span class="line">@import url(style2.css) screen and (min-width:640px) and (max-width:960px);</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">3、写在内部样式中</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;   </span><br><span class="line">@media screen and (max-width:641px)&#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">​@media screen and (min-width:640px) and (max-width:960px) &#123;</span><br><span class="line">    h1 &#123;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;    </span><br><span class="line"></span><br><span class="line">@media写在页面里比link相比可以减小页面请求</span><br><span class="line">常见设备类型(media type):</span><br><span class="line">all          所有设备</span><br><span class="line">screen               电脑显示器</span><br><span class="line">print            打印用纸或打印预览视图</span><br><span class="line">handheld    便携设备</span><br><span class="line">tv           电视机类型的设备</span><br><span class="line">speech        语意和音频盒成器</span><br><span class="line">braille          盲人用点字法触觉回馈设备</span><br><span class="line">embossed  盲文打印机</span><br><span class="line">projection  各种投影设备</span><br><span class="line">tty         使用固定密度字母栅格的媒介，比如电传打字机和终端</span><br><span class="line">u **and** 被称为关键字，**only**(限定某种设备)</span><br><span class="line">u **(min-width: 400px)** 就是媒体条件，其被放置在一对圆括号中。</span><br></pre></td></tr></table></figure><p><strong>响应式（Responsive）设计</strong></p><p>响应式是指根据不同设备浏览器分辨率或尺寸来展示不同页面结构、行为、表现的设计方式。</p><p>响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。页面头部必须有meta声明viewport：</p><meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"/><p>有了CSS的媒体查询这个功能，自然有了所谓的响应式，响应式由Ethan Marcotte在A List Apart发表了率先发表了响应式的创新文章，将三种开发技术整合起来（弹性网格布局、弹性图片、媒体和媒体查询），将其命名为RWD（Responsive Web Design 响应式网页设计）。</p><p>1.设置Meta标签</p><p>手机浏览器是把页面放在一个虚拟的“窗口”（viewport）中，通常这个虚拟的“窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。</p><p>如何识别手机尺寸通过设置meta语句：</p><metaname="viewport"content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"/><p>width                   可视区域的宽度；</p><p>height                  可视区域的高度；</p><p>device-width        设备屏幕分辨率的宽度值(视口宽度)</p><p>initial-scale          初始的缩放比例（0-10.0），取值为1时页面按实际尺寸显示，无任何缩放</p><p>minimum-scale          允许用户缩放到的最小比例 </p><p>maximum-scale         允许用户缩放到的最大比例</p><p>user-scalable        设定用户是否可以缩放（yes&#x2F;no）</p><p>扩展：</p><p>u 忽略将页面中的数字识别为电话号码</p><meta name="format-detection"content="telephone=no" /><p>u 忽略Android平台中对邮箱地址的识别</p><meta name="format-detection"content="email=no" /><p>&#x2F;<em>设备横向放置是</em>&#x2F;</p><p><strong>&#x2F;*</strong> <strong>竖屏 *&#x2F;</strong></p><p>@media screen and (orientation:portrait) and (max-width: 720px) {</p><p>​      h1 {</p><p>​                 background: yellow;</p><p>​           }</p><p>}</p><p><strong>&#x2F;*</strong> <strong>横屏 *&#x2F;</strong></p><p>@media screen and (orientation:landscape){</p><p>h1 {</p><p>​                 background: yellow;</p><p>​           }</p><p>}</p><p>orientation: landscape方向为横向</p><p>orientation: portrait方向纵向</p><h1 id="常见的布局方案"><a href="#常见的布局方案" class="headerlink" title="常见的布局方案"></a>常见的布局方案</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">固定布局：以像素作为页面的基本单位，不管设备屏幕及浏览器宽度，只设计一套尺寸；</span><br><span class="line"></span><br><span class="line">可切换的固定布局：同样以像素作为页面单位，参考主流设备尺寸，设计几套不同宽度的布局。通过识别的屏幕尺寸或浏览器宽度，选择最合适的那套宽度布局；</span><br><span class="line"></span><br><span class="line">弹性布局：以百分比作为页面的基本单位，可以适应一定范围内所有尺寸的设备屏幕及浏览器宽度，并能完美利用有效空间展现最佳效果；</span><br><span class="line"></span><br><span class="line">混合布局：同弹性布局类似，可以适应一定范围内所有尺寸的设备屏幕及浏览器宽度，并能完美利用有效空间展现最佳效果；只是混合像素、和百分比两种单位作为页面单位。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">布局响应：对页面进行响应式的设计实现，需要对相同内容进行不同宽度的布局设计，有两种方式：pc优先（从pc端开始向下设计）；移动优先（从移动端向上设计）；无论基于那种模式的设计，要兼容所有设备，布局响应时不可避免地需要对模块布局做一些变化（发生布局改变的临界点称之为断点），</span><br></pre></td></tr></table></figure><h1 id="常见响应式布局方案"><a href="#常见响应式布局方案" class="headerlink" title="常见响应式布局方案"></a>常见响应式布局方案</h1><ul><li><p>（1）模块中内容：挤压－拉伸（布局不变）<br><a href="https://imgtu.com/i/6Rb9rd"><img src="https://s3.ax1x.com/2021/03/19/6Rb9rd.png" alt="6Rb9rd.png"></a></p></li><li><p>（2）模块中内容：换行－平铺（布局不变）<br><a href="https://imgtu.com/i/6RbkIP"><img src="https://s3.ax1x.com/2021/03/19/6RbkIP.png" alt="6RbkIP.png"></a></p></li><li><p>（3）模块中内容：删减－增加（布局不变）<br><a href="https://imgtu.com/i/6RbEPf"><img src="https://s3.ax1x.com/2021/03/19/6RbEPf.png" alt="6RbEPf.png"></a></p></li><li><p>（4）模块位置变换（布局改变）<br><a href="https://imgtu.com/i/6RbpKH"><img src="https://s3.ax1x.com/2021/03/19/6RbpKH.png" alt="6RbpKH.png"></a></p></li><li><p>（5）模块展示方式改变：隐藏－展开（布局改变）<br><a href="https://imgtu.com/i/6RbFat"><img src="https://s3.ax1x.com/2021/03/19/6RbFat.png" alt="6RbFat.png"></a></p></li><li><p>（6）模块数量改变：删减－增加（布局改变）<br><a href="https://imgtu.com/i/6RbiVI"><img src="https://s3.ax1x.com/2021/03/19/6RbiVI.png" alt="6RbiVI.png"></a></p></li></ul><h1 id="响应式开发的特点"><a href="#响应式开发的特点" class="headerlink" title="响应式开发的特点"></a>响应式开发的特点</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设计特点：</span><br><span class="line">面对不同分辨率设备灵活性强 </span><br><span class="line">能够快捷解决多设备显示适应问题</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">缺点：</span><br><span class="line">兼容各种设备工作量大，效率低下</span><br><span class="line">代码累赘，会出现隐藏无用的元素，加载时间加长</span><br><span class="line">其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</span><br><span class="line">一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</span><br></pre></td></tr></table></figure><h1 id="图片整合"><a href="#图片整合" class="headerlink" title="图片整合"></a>图片整合</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把网站里面的小图标有规则的整合在一起，利用   background-position 改变背景图的位置，每个图标应用。</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">优点:</span><br><span class="line">（1）CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；</span><br><span class="line">（2）CSS Sprites能减少图片的字节；</span><br><span class="line">（3）CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。</span><br><span class="line">（4）CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。</span><br><span class="line"></span><br><span class="line">缺点:</span><br><span class="line">（1）图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。</span><br><span class="line">（2）图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。</span><br><span class="line">（3）图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。</span><br><span class="line">（4）可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。</span><br></pre></td></tr></table></figure><h1 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p><a href="https://imgtu.com/i/62sPcF"><img src="https://s3.ax1x.com/2021/03/18/62sPcF.png" alt="62sPcF.png"></a></p><p><a href="https://imgtu.com/i/62smh6"><img src="https://s3.ax1x.com/2021/03/18/62smh6.png" alt="62smh6.png"></a></p><h2 id="浏览器大战"><a href="#浏览器大战" class="headerlink" title="浏览器大战"></a>浏览器大战</h2><p><a href="https://imgtu.com/i/62sAB9"><img src="https://s3.ax1x.com/2021/03/18/62sAB9.png" alt="62sAB9.png"></a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一次浏览器大战发生在上个世纪90年代，微软发布了它的IE浏览器，和网景公司的Netscape Navigator浏览器大打出手。</span><br><span class="line"></span><br><span class="line">第二次浏览器大战发生在20世纪。</span><br><span class="line"></span><br><span class="line">    战争产物：Internet Explorer 9</span><br></pre></td></tr></table></figure><ul><li>13年市场比重</li></ul><p><a href="https://imgtu.com/i/62sC1U"><img src="https://s3.ax1x.com/2021/03/18/62sC1U.png" alt="62sC1U.png"></a></p><ul><li>14年市场比重</li></ul><p><a href="https://imgtu.com/i/62sknJ"><img src="https://s3.ax1x.com/2021/03/18/62sknJ.png" alt="62sknJ.png"></a></p><ul><li>15年市场比重</li></ul><p><a href="https://imgtu.com/i/62sZA1"><img src="https://s3.ax1x.com/2021/03/18/62sZA1.png" alt="62sZA1.png"></a></p><ul><li>17年市场比重</li></ul><p><a href="https://imgtu.com/i/62sE7R"><img src="https://s3.ax1x.com/2021/03/18/62sE7R.png" alt="62sE7R.png"></a></p><ul><li>19年市场比重</li></ul><p><a href="https://imgtu.com/i/62setx"><img src="https://s3.ax1x.com/2021/03/18/62setx.png" alt="62setx.png"></a></p><h2 id="浏览器内核-现代4大内核"><a href="#浏览器内核-现代4大内核" class="headerlink" title="浏览器内核 ( 现代4大内核 )"></a>浏览器内核 ( 现代4大内核 )</h2><ul><li><p>Trident   代表作：IE  -ms-</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元老级内核之一，由微软开发，并于1997年10月首次在ie 4.0中使用，凭借其windows垄断优势，Trident市场占有率一直很高。然而垄断并非，没有竞争就没有进步，长期以往，Trident内核一度停滞不前，更新缓慢，甚至一度与W3C标准脱节。2011年，从ie 9开始，Trident开始支持HTML5和CSS 3，因此我们也经常会看到有些网站在浏览时会提示用户（在Internet Explorer 9.0+以上浏览效果最佳）。前端程序员做浏览器兼容一般也不再会考虑ie 8之前的浏览器了。</span><br></pre></td></tr></table></figure></li><li><p>Gecko 代表作：Mozilla -moz-</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元老级内核之一，由Netscape公司Mozilla组织开发。1998年，Netscape在于IE浏览器竞争失利之后，成立了非正式组织Mozilla，由其开发新一代内核，后命名为“Gecko”。FireFox也是这班人开发出来了，因此这也就是Mozilla一直使用的内核。</span><br><span class="line">Gecko的特点是代码完全公开，因此其开发程度很高，全世界的程序员都可以为其编写代码，增加功能。</span><br></pre></td></tr></table></figure></li><li><p>WebKit : 苹果 &amp; 谷歌旧版本 -webkit-</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是苹果公司开发的内核，也是其旗下产品Ssfari浏览器使用的内核。Webkit引擎包含了WebCode排版引擎和JavaScriptCode解析引擎，分别是从KDE的KHTML和KJS衍生而来，它们都是自由软件，在GPL条约下授权，同时支持BSD系统开发。</span><br><span class="line">Chrome、360极速浏览器以及搜狗高速浏览器也使用Webkit作为内核（在脚本理解方面，Chorome使用自己研发的V8引擎）。</span><br></pre></td></tr></table></figure></li><li><p>Blink : 代表作：谷歌 &amp; 欧鹏  -o-</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是由Google和Opera Software开发的浏览器排版引擎，Google计算将这个渲染引擎作为Chromium计划的一部分，并且在2013年4月公布了这一消息。这一渲染引擎是开源引擎Webkit中WebCore组件的一个分支，并且在Chrome（28及往后版本）、Opera（15及往后版本）和Yandex浏览器中使用</span><br></pre></td></tr></table></figure></li><li><p>Presto   ( Opera前内核 已经废弃 )</p></li></ul><h2 id="为什么会出现浏览器兼容问题？"><a href="#为什么会出现浏览器兼容问题？" class="headerlink" title="为什么会出现浏览器兼容问题？"></a>为什么会出现浏览器兼容问题？</h2><ul><li>由于各大主流浏览器由不同的厂家开发，所用的核心架构和代码也很难重和，这就为各种莫名其妙的Bug(代码错误）提供了温床。再加上各大厂商出于自身利益考虑而设置的种种技术壁垒，都让CSS应用起来比想象得要麻烦。浏览器的兼容问题是我们必须去克服的。</li></ul><h1 id="CSS-Bug、CSS-Hack和Filter"><a href="#CSS-Bug、CSS-Hack和Filter" class="headerlink" title="CSS Bug、CSS Hack和Filter"></a>CSS Bug、CSS Hack和Filter</h1><ul><li><p>CSS Bug: CSS样式在各浏览器中解析不一致的情况，或者说CSS样式在浏览器中不能正确显示的问题称为CSS bug.</p></li><li><p>CSS Hack:  CSS中，Hack是指一种兼容CSS在不同浏览器中正确显示的技巧方法，因为它们都属于个人对CSS代码的非官方的修改，或非官方的补丁。有些人更喜欢使用patch(补丁)来描述这种行为。</p></li><li><p>Filter:表示过滤器的意思，它是一种对特定的浏览器或浏览器组显示或隐藏规则或声明的方法。本质上讲，Filter是一种用来过滤不同浏览器的Hack类型。</p></li></ul><h2 id="常见的BUG"><a href="#常见的BUG" class="headerlink" title="常见的BUG"></a>常见的BUG</h2><h3 id="IE低版本常见CSS解析Bug及hack"><a href="#IE低版本常见CSS解析Bug及hack" class="headerlink" title="IE低版本常见CSS解析Bug及hack"></a>IE低版本常见CSS解析Bug及hack</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1)图片有边框BUG**</span><br><span class="line">当图片加&lt;a href=“#”&gt;&lt;/a&gt;在IE上会出现边框</span><br><span class="line">Hack:给图片加border:0;或者border:0    none;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2)图片间隙**</span><br><span class="line">div中的图片间隙BUG</span><br><span class="line">描述：在div中插入图片时，图片会将div下方撑大大约三像素。</span><br><span class="line">hack1:将&lt;img&gt;加个vertical-align:top</span><br><span class="line">hack2:将&lt;img&gt;转为块状元素，给&lt;img&gt;添加声明：display:block;</span><br><span class="line">hack3:将div加个font-size:0; 不推荐使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3)  双倍浮向（双倍边距）（只有IE6出现）</span><br><span class="line">描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边边界（margin）加倍显示。</span><br><span class="line">hack:给浮动元素添加声明：_display:inline;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4)默认高度（IE6、IE7）</span><br><span class="line">描述：在IE6及以下版本中，部分块元素拥有默认高度（在16px左右；）</span><br><span class="line">hack1:给元素添加声明：font-size:0;</span><br><span class="line">hack2：给元素添加声明：overflow:hidden;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="非IE-BUG"><a href="#非IE-BUG" class="headerlink" title="非IE  BUG"></a>非IE  BUG</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">5)表单元素对齐不一致</span><br><span class="line">描述：表单元素行高对齐方式不一致</span><br><span class="line">hack:给表单元素添加声明：float:left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6)按钮元素默认大小不一</span><br><span class="line"></span><br><span class="line">描述：各浏览器中按钮元素大小不一致</span><br><span class="line">hack1： 统一大小/（用a标记模拟）</span><br><span class="line">hack2:input外边套一个标签，在这个标签里写按钮的样式，把input的边框去掉。</span><br><span class="line">hack3:如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8)鼠标指针bug **</span><br><span class="line">描述：cursor属性的hand属性值只有IE9以下浏览器识别，其它浏览器不识别该声明，cursor属性的pointer属性值IE6.0以上版本及其它内核浏览器都识别该声明。</span><br><span class="line">hack:    如统一某元素鼠标指针形状为手型，</span><br><span class="line">应添加声明：cursor:pointer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor:         ;</span><br><span class="line">auto默认</span><br><span class="line">crosshair加号</span><br><span class="line">text文本</span><br><span class="line">wait等待</span><br><span class="line">help帮助</span><br><span class="line">progress过程</span><br><span class="line">inherit继承</span><br><span class="line">move移动</span><br><span class="line">ne-resize向上或向右移动</span><br><span class="line">pointer手形</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9)透明属性 **</span><br><span class="line">兼容其他浏览器写法：opacity:value;(value的取值范围0-1;</span><br><span class="line">例：opacity:0.5;)</span><br><span class="line">IE浏览器写法：filter:alpha(opacity=value);取值范围 1-100(整数)</span><br><span class="line"></span><br><span class="line">10) 当给子元素加上margin-top值，错误的加给了父元素 **</span><br><span class="line"> 解决方法：给父元素加overflow:hidden</span><br><span class="line"> 加了边框就不会出错此bug</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  1.下划线属性过滤器</span><br><span class="line">  当在一个属性前面增加了一个下划线后，由于符合标准的浏览器不能识别带有下划线的属性而忽略了这个声明，但是在IE6及更低版本浏览器中会继续解析这个规则。</span><br><span class="line">  </span><br><span class="line">  语法：选择符&#123;_属性：属性值；&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  2. !important关键字过滤器</span><br><span class="line">  </span><br><span class="line">  它表示所附加的声明具有最高优先级的意思。但由于IE6及更低版本不能识别它，</span><br><span class="line">我们可以利用IE6的这个Bug作为过滤器来兼容ＩＥ６和其它标准浏览器。</span><br><span class="line"></span><br><span class="line">  语法：选择符&#123;属性：属性值!important;&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  3. *属性过滤器</span><br><span class="line"></span><br><span class="line">  当在一个属性前面增加了*后，该属性只能被IE7浏览器识别，其它浏览器混略该属</span><br><span class="line">性的作用。</span><br><span class="line"></span><br><span class="line"> 语法：选择符&#123;*+属性：属性值；&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  4.   \9  ：IE版本识别；其它浏览器都不识别</span><br><span class="line">语法：选择符&#123;属性：属性值\9;&#125;</span><br><span class="line"></span><br><span class="line">  5.   \0  :   IE8 及以上版本识别；其它浏览器都不识别</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><ol><li>页面主题优化  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实事求是的写下自己网站的名字，网站的名字要合理，最好包含网站的主要内容。</span><br></pre></td></tr></table></figure></li><li>页面头部优化  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 向搜索引擎说明你的网页的关键词； --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span>   <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 告诉搜索引擎你的站点的主要内容； --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span>    <span class="attr">content</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 说明</span></span><br><span class="line"><span class="comment">1、“描述”部分应该用近乎描述的语言写下一段介绍你网站的文字，在这其中，你应该适当的对你网站的特色内容加以重复以求突出；</span></span><br><span class="line"><span class="comment">2、“关键字”部分应该列出你认为合适的，能突出网站内容的关键字就可以了，关键字不要设置太多，可设置10---8个，搜索引擎只会浏览靠前的几个关键字。 --&gt;</span></span><br></pre></td></tr></table></figure></li><li>超链接优化  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、采用纯文本链接，少用，最好是别用Flash动画设置链接，因为搜索引擎无法识别Flash上的文字.</span><br><span class="line">2、按规范书写超链接，这个title属性，它既可以起到提示访客的作用，也可以让搜索引擎知道它要去哪里.</span><br><span class="line">3、最好别使用图片热点链接，理由和第一点差不多</span><br></pre></td></tr></table></figure></li><li>图片优化  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图片优化并不是修改图片的大小、颜色，而是你应该为每个标签加上alt属性，alt属性的作用是当图片无法显示时以文字作为  替代显示出来，而对于SEO来说，它可以令搜索引擎有机会索引你网站上的图片，对于一些确实没什么意义的图片，最好也不要 省略alt，而应该留空，即 alt=&quot;&quot;。</span><br></pre></td></tr></table></figure></li><li>PageRank（pr值,友情链接）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PR值是Google提出的一个重要参数，它标明了某个网站的重要程度，那么pr值是如何确定的呢？目前普通的解释为：假如有  ABC三个网站，彼此互作友情链接，那么当一个访客通过A上的友情链接来到B时，Google就认为A为B投了“一票”，同理，如果 有人从C访问B，那么B又得一票，如果全世界的网站上都有B的友情链接，B就是世界上最重要的网站了！</span><br></pre></td></tr></table></figure></li></ol><h2 id="扩展：回流-reflow-重绘-repaint"><a href="#扩展：回流-reflow-重绘-repaint" class="headerlink" title="扩展：回流(reflow)&amp;重绘(repaint)"></a>扩展：回流(reflow)&amp;重绘(repaint)</h2><p><a href="https://www.jianshu.com/p/e081f9aa03fb">什么是回流，什么是重绘，有什么区别？</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/posts/98f3a6d9.html"/>
      <url>/posts/98f3a6d9.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5发展史"><a href="#HTML5发展史" class="headerlink" title="HTML5发展史"></a>HTML5发展史</h1><p>HTML5草案的前身名为 Web Applications 1.0，于2004年被WHATWG提出，于2007年被W3C接纳，并成立了新的 HTML 工作团队。</p><ol><li><p>HTML 5 的第一份正式草案已于2008年1月22日公布。HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。</p></li><li><p>2012年12月17日，万维网联盟（W3C）正式宣布凝结了大量网络工作者心血的HTML5规范已经正式定稿。根据W3C的发言稿称：“HTML5是开放的Web网络平台的奠基石。”</p></li><li><p>2013年5月6日， HTML 5.1正式草案公布。该规范定义了第五次重大版本，第一次要修订万维网的核心语言：超文本标记语言（HTML）。在这个版本中，新功能不断推出，以帮助Web应用程序的作者，努力提高新元素互操作性。</p></li><li><p>本次草案的发布，从2012年12月27日至今，进行了多达近百项的修改，包括HTML和XHTML的标签，相关的API、Canvas等，同时HTML5的图像img标签及svg也进行了改进，性能得到进一步提升</p></li></ol><p><a href="https://imgtu.com/i/6rXQUS"><img src="https://s3.ax1x.com/2021/03/16/6rXQUS.jpg" alt="6rXQUS.jpg"></a></p><p>由上面的图可以得知，现在的HTML5还不是一个最终统一的版本，所以说HTML5用在手机端的开发</p><h1 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持Html5的浏览器包括Firefox（火狐浏览器），IE9及其更高版本，Chrome（谷歌浏览器），Safari，Opera等；国内的 遨游浏览器（Maxthon），以及基于IE或Chromium（Chrome的工程版或称实验版）所推出的360浏览器、搜狗浏览器、QQ浏览器、猎豹 浏览器等国产浏览器同样具备支持HTML5的能力。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6rX3CQ"><img src="https://s3.ax1x.com/2021/03/16/6rX3CQ.jpg" alt="6rX3CQ.jpg"></a></p><p><a href="https://imgtu.com/i/6rXGgs"><img src="https://s3.ax1x.com/2021/03/16/6rXGgs.jpg" alt="6rXGgs.jpg"></a></p><p>不同的浏览器显示的效果可能不一样。因为HTML5没有一个统一的标准，不同的浏览器解析时不一样的，现在还处于一个推广的阶段，但是大部分的还是一样的</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul><li><p>内容类型（ContentType）</p><ul><li>HTML5的文件扩展符与内容类型保持不变，仍然为”.html”或”.htm”</li></ul></li><li><p>DOCTYPE声明</p><ul><li><code>&lt;!DOCTYPE html&gt;不区分大小写</code></li></ul></li><li><p>指定字符集编码</p><ul><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li></ul></li><li><p>可省略标记的元素</p><ul><li>不允许写结束标记的元素：br、col、embed、hr、img、input、link、meta  </li><li>可以省略结束标记的元素：li、dt、dd、p、option、colgroup、thead、tbody、tfoot、tr、td、th</li><li>可以省略全部标记的元素：html、head、body、colgroup、tbody</li></ul></li><li><p>属性值可以使用双引号，也可以使用单引号。</p></li></ul><h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><p>扩展：语义化的重要性：</p><ol><li>当页面加载失败的时候，还能够呈现出清晰的结构</li><li>有利于SEO优化，利于被搜索引擎收录（即便于网络爬虫的识别）</li><li>在项目开发及维护时，语义化的也很大程度上降低开发难度，节省成本</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在HTML 5出来之前，我们用div来表示页面章节，但是这些div都没有实际意义。（即使我们用css样式的id和class形容这块内容的意义）。这些标签只是我们提供给浏览器的指令，只是定义一个网页的某些部分。但现在，那些之前没“意义”的标签因为因为html5的出现消失了，这就是我们平时说的“语义”。</span><br></pre></td></tr></table></figure><ul><li>section元素 表示页面中的一个区块</li><li>article元素 表示一块与上下文无关的独立的内容</li><li>aside元素 在article之外的，与article内容相关的辅助信息 </li><li>header元素 表示页面中一个内容区块或整个页面的标题</li><li>footer元素 表示页面中一个内容区块或整个页面的脚注</li><li>nav元素 表示页面中导航链接部分</li><li>figure元素 表示一段独立的内容，使用figcaption元素为其添加标题(第一个或最后一个子元素的位置)</li><li>main元素 表示页面中的主要的内容(ie不兼容)</li><li>hgroup标题的一个分组</li><li>mark定义高亮显示的文本(span)</li><li>dialog标记定义一个对话框(会话框)类似微信 </li><li>embed 标记定义外部的可交互的内容或插件 比如flash</li></ul><p><a href="https://imgtu.com/i/6rX83j"><img src="https://s3.ax1x.com/2021/03/16/6rX83j.png" alt="6rX83j.png"></a></p><h1 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">ogg 文件，适用于Firefox、Opera 以及 Chrome 浏览器。 </span><br><span class="line"> <span class="tag">&lt;<span class="name">video</span>&gt;</span> 元素支持三种视频格式： .MP4, .WebM, 和.ogg:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    音频文件必须是 MP3 或 Wav 类型 mpeg。 </span><br><span class="line">     <span class="tag">&lt;<span class="name">video</span>   <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;video/oceans.mp4&quot;</span> &gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>属性</p><ul><li>controls属性：如果出现该属性，则向用户显示控件，比如播放按钮。</li><li>autoplay属性：如果出现该属性，则视频在就绪后马上播放。</li><li>loop属性：重复播放属性。</li><li>muted属性：静音属性。</li><li>poster属性：规定视频正在下载时显示的图像，直到用户点击播放按钮。</li></ul></li><li><p>source<br>        <source> 标签为媒介元素（比如 <video> 和 <audio>）定义媒介资源。<br>          <source> 标签允许您规定可替换的视频&#x2F;音频文件供浏览器根据它对媒体类型或者编解码器的支持进行选择。<br>          Type属性值：<br>              用于视频：video&#x2F;ogg   video&#x2F;mp4     video&#x2F;webm<br>              用于音频：audio&#x2F;ogg   audio&#x2F;mpeg</p></li></ul><h2 id="新增web应用标签："><a href="#新增web应用标签：" class="headerlink" title="新增web应用标签："></a>新增web应用标签：</h2><p>progress  表示进程</p><p>meter     表示测量尺度</p><p>details   描述文档或文档细节（只有Chrome 支持）</p><p>datalist   定义选项列表。</p><p>（1）progress标签：</p><p>状态标签，显示进度，（任务过程：安装、加载）；Ie9及更低版本不支持，多用于js控制（ 此标签不常用）</p><p>属性：value: 设置已经完成的情况</p><p>​           max：设置最终要完成的情况</p><p>应用代码：</p><p><progress  id=“pr”  value=“30”  max=“100”  > </progress></p><p>（2）meter标签：</p><p>用于表示已知范围或分数值内的标量测量,也被称为尺度；属性仅用于已知最大和最小值的度量；ie浏览器不支持（  此标签不常用）</p><p>常用属性：value：设置 规定度量的当前值 </p><p>​                  min：规定范围的最小值 </p><p>​                  max：规定范围的最大值 </p><p>应用代码： </p><p><meter  id="mt"  value="30"  min="10"  max="100"> </meter></p><p>（3）details标签：折叠区块</p><p>用于描述文档或文档某个部分的细节；</p><p>目前只有 Chrome 和 Safari 6 支持 <details> 标签。</p> <summary>在其内，配合使用，为其定义标题；并且该是其内第一个标签           <p>属性：open &#x3D;”open” :设置信息是否可见 </p><p>应用：</p><p> <details open="open"></p><p>​     <summary>标题</summary></p><p>     <p>详细内容描述</p></p></details><p>4，datalist   必须和list属性结合使用。做提示信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;url&quot;     list=&quot;url_list&quot;    name=&quot;link&quot; /&gt;</span><br><span class="line">&lt;datalist    id=&quot;url_list&quot;&gt; </span><br><span class="line">    &lt;option label=&quot;W3School&quot; value=&quot;http://www.W3School.com.cn&quot; /&gt; </span><br><span class="line">    &lt;option label=&quot;Google&quot; value=&quot;http://www.google.com&quot; /&gt; </span><br><span class="line">    &lt;option label=&quot;Microsoft&quot; value=&quot;http://www.microsoft.com&quot; /&gt; </span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML5表单"><a href="#HTML5表单" class="headerlink" title="HTML5表单"></a>HTML5表单</h1><p>Html表单一直都是web的核心技术之一，html5为表单添加了新的js功能和结构上更加自由的写法，极大的提高了开发效率，xhtml中需要放在form中，而html5中表单元素可以放在页面任何位置；</p><p><strong>新增表单类型元素：</strong></p><p>email       邮箱</p><p>url            网址</p><p>number    数值</p><p>range       范围数值</p><p>date        日期</p><p>search     搜索</p><p>color        颜色 </p><p>1、 email： 邮箱类型的文本框验证</p><p>应用：    </p><p>​        <input  name="email1"   type="email"   required   /><br> multiple     选择（上传）多个</p><p>2、  url  :      输入URL地址的文本框</p><p>​      应用：    <input  name=”url1”   type="url"  required  /></p><p>3、  color ：  用来选取颜色。</p><p>  应用： <input  name=”color1”  type="color"  required /></p><p>4、 number：   用来输入数字的文本框。</p><p>   属性：min ：允许的最小值</p><p>​         max： 允许的最大值</p><p>​         step： 规定的间隔值</p><p>​         value：默认值</p><p>  应用：&lt;input  name&#x3D;”number1”  type&#x3D;”number”  value&#x3D;”20”  minn&#x3D;”10”  max&#x3D;”100”         </p><p>​          step&#x3D;”5”  required &#x2F;&gt;</p><p>5、   range： 用来只允话输入一段范围内数值的文本框</p><p>   属性：   min  最小值</p><p>​                max  最大值</p><p>​                step  拖动的步幅间隔值</p><p>​                value：默认值</p><p> 应用： &lt;input  name&#x3D;”range1”  type&#x3D;”range”  value&#x3D;”25”  min&#x3D;”0”  max&#x3D;”100”   </p><p>​         step&#x3D;”5”  &#x2F;&gt;</p><p>6、   search : 用于搜索域，显示为常规的文本框，除了火狐浏览</p><p>器其他都会在输入框里显示一个取消搜索的符号</p><p>应用：<input  name=”search1”   type="search"  /></p><p>7、    date :   提供多个选取日期和时间的新输入类型 </p><p>   属性：</p><p>·date -   选取日、月、年</p><p>·month - 选取月、年</p><p>·week -  选取周和年</p><p>·time -   选取时间（小时和分钟）</p><p>·datetime - 选取时间、日、月、年（UTC世界标准时间）</p><p>·datetime-local - 选取时间、日、月、年（本地时间）</p><p>8、    output ：用于不同类型的输出，比如计算或脚本输出，显    示计算结果 </p><p>注：必须从属于某个表单。即，必须将它书写在表单内部，或对它添加form属性。</p><p>应用：</p><p>第一种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;form oninput=&quot;out.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot; &gt; +</span><br><span class="line"></span><br><span class="line"> &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &quot;=&quot;</span><br><span class="line"></span><br><span class="line">        &lt;output name=&quot;out&quot; for=&quot;a b&quot;&gt;&lt;/output&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对新元素样式的使用： </p><p>注意，跟 input  标签设置样式一样，但是要设置标签中局部的样式不能实现。如改变日历的背景色，颜色框的按钮效果，等，这些都不可以实现</p><p><strong>表单验证</strong></p><p>HTML5增加了大量在提交时对表单及表单元素内容有效性验证的功能。</p><p>1、自动验证 </p><p>   1）、required</p><p>​      可以应用在大多数输入元素上（除了隐藏元素和图片），在提交时如果元素内容为空白，则不允许提交，同时显示提示文字。 </p><p>  2）、pattern</p><p>​      将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。 </p><p>​    例：&lt;input pattern &#x3D; “[0-9][A-Z]{3}” title&#x3D;”输入内容：一个数与三个大写字母” placeholder&#x3D;’输入内容：一个数与三个大写字母’&gt;</p><p> 1:用户名验证规则 : 用户名长度为6~12并且由字母组成 </p><p>​    pattern&#x3D;”[A-z]{6,12}” </p><p>  2:密码验证规则 : 密码必须是数组与字母组合 </p><p>​    pattern&#x3D;”[A-Za-z].<em>[0-9]|[0-9].</em>[A-Za-z]” </p><p>*<em>（3</em>***）   placeholder属性：(文本框的提示信息) </p><p>文本框处于未输入状态时文本框中显示的输入提示。</p><p><strong>（4****） autofocus属性：</strong>给文本框、选择框、或者按钮控件加上该属性，当打开页面时，该控件自动获得焦点，一个页面只能有一个。</p><p>*<em>（5</em>***）  autocomplete属性：输入富足和所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。只有三种：on&#x2F;off&#x2F;“”。on可显示指定候补输入的数据列表，使用datalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中显示： (autocomplete    是否自动提示信息    属性值   on    off)</p><p>&lt;input type&#x3D;”text” name&#x3D;”greeting” **autocomplete**&#x3D;”on”  list &#x3D;”greeting”&gt;</p><p>(6)<strong>Novalidate****属性</strong>  <strong>取消验证</strong>     可以对form表单添加<strong>novalidate</strong>属性，即使form表单中的input添加了required，也将不进行验证</p><p>在 Safari 和 Internet Explorer 9 及之前的版本中不支持 novalidate 属性。  <br>(7)<strong>disabled</strong>禁用</p><h1 id="html5与html4的区别"><a href="#html5与html4的区别" class="headerlink" title="html5与html4的区别"></a><strong>html5</strong>与html4的区别</h1><ol><li>废除了一些过时的html4标签：center、font、u </li><li>添加了一些新的元素<ul><li>更加智能的表单元素：date、email、url等；</li><li>更加合理的结构标签：section、nav、aside等；</li></ul></li><li>新的全局属性：meta、lang、等</li><li>文档类型声明：<code>&lt;!doctype html &gt; 的简化</code></li><li>新的js API</li></ol><p><strong>HTML5学习参考的网站：</strong></p><p><a href="http://www.runoob.com/">http://www.runoob.com</a> （学习文档网站）<br><a href="http://caniuse.com/">http://caniuse.com</a>  （查看不同浏览器版本对html5标签的支持情况）<br><a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a> （w3c文档）<br><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a>  （学习文档网站）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/posts/599b70c0.html"/>
      <url>/posts/599b70c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><ul><li>CSS(cascading style sheet) 汉译为<strong>层叠样式表</strong>,用于控制网页样式;</li><li>WEB标准中的表现标准语言,在网页中主要对网页信息的显示进行控制;</li><li>目前推荐遵循的是W3C发布的CSS3.0版本;</li><li>用来表现HTML或者XHTML等样式文件的计算机语言;</li><li>1998年5月21日由w3C正式推出的css2.0;</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>弥补html语言的不足</li><li>缩减页面代码，提高访问速度;</li><li>代码减少，页面文件就会小，占用网络带宽就少，客户端打开速度就快，用户体验就会更好</li><li>结构清晰，有利于seo优化</li><li>有利于搜索引擎优化</li><li>缩短改版时间</li><li>对网站的重构有很好的支持</li></ul><h1 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选择符 &#123;属性: 属性值 ;属性:属性值&#125;</span><br><span class="line">选择符表示要定义样式的对象(标签名字)，可以是元素本身，也可以是一类元素或者制定名称的元素,简单来说就是给对应的元素起个名称。</span><br><span class="line"></span><br><span class="line">1）每个CSS样式由两部分组成，即选择符和声明，声明又分为属性和属性值；</span><br><span class="line">2）属性必须放在花括号中，属性与属性值用冒号连接。</span><br><span class="line">3）每条声明用分号结束。</span><br><span class="line">4）当一个属性有多个属性值的时候，属性值与属性值不分先后顺序,用空格隔开。</span><br><span class="line">5）在书写样式过程中，空格、换行等操作不影响属性显示。</span><br></pre></td></tr></table></figure><h1 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h1><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">         css语句 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">注：使用style标记创建样式时，最好将该标记写在<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>;</span><br><span class="line">例：<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(1)  语法：<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;目标文件的路径及文件名全称&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">说明：使用link元素导入外部样式表时，需将该元素写在文档头部，即<span class="tag">&lt;<span class="name">head</span>&gt;</span>与<span class="tag">&lt;/<span class="name">head</span>&gt;</span>之间。</span><br><span class="line">      rel：用于定义文档关联，表示关联样式表；</span><br><span class="line">      type：定义文档类型；</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">(2) 导入外部样式表</span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span>  url(<span class="string">&quot;目标文件的路径及文件名全称&quot;</span>);</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">说明：@和import之间没有空格 url和小括号之间也没有空格；括号内部加引号，必须结尾以分号结束；</span><br></pre></td></tr></table></figure><h2 id="link-和-import区别"><a href="#link-和-import区别" class="headerlink" title="link  和  @import区别"></a>link  和  @import区别</h2><ol><li><p>老祖宗的差别：link属于XHTML标签，而@import完全是CSS提供的一种方式。 link标签除了可以加载CSS外，还可以做很多其它的事情，比如定义RSS，定义rel连接属性等，@import就只能加载CSS。</p></li><li><p>加载顺序的差别：当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS 会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式。</p></li><li><p>兼容性的差别。：@import是CSS2.1提出的，所以老的浏览器不支持，@import只在IE5以上的才能识别，而link标签无此问题。</p></li><li><p>使用dom控制样式时的差别：当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的.</p></li></ol><h2 id="内联（行内）样式"><a href="#内联（行内）样式" class="headerlink" title="内联（行内）样式"></a>内联（行内）样式</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签 style=&quot;属性1:值1;属性2:值2; ……&quot;&gt;&lt;/标签&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS样式表的权重关系"><a href="#CSS样式表的权重关系" class="headerlink" title="CSS样式表的权重关系"></a>CSS样式表的权重关系</h1><ul><li>内联样式表的优先级别最高</li><li>内部样式表与外部样式表的优先级和书写的顺序有关，后书写的优先级别高。</li><li>同在一个样式表中的优先级和书写的顺序也有关，后书写的优先级别高。(被覆盖的只是相同属性的样式)</li></ul><h1 id="CSS选择符"><a href="#CSS选择符" class="headerlink" title="CSS选择符"></a>CSS选择符</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CSS基本选择符：类型选择符、id选择符、class选择符(类选择符)</span><br><span class="line"></span><br><span class="line">Css选择符分类：</span><br><span class="line">    类型选择符（标记选择器）</span><br><span class="line">    类选择符 （class选择符）</span><br><span class="line">    ID选择符 （id选择器）</span><br><span class="line">    伪类选择器</span><br><span class="line">    通配符（*）设置全局属性</span><br><span class="line">    群组选择符（集合选择器）</span><br><span class="line">    包含选择符（后代选择器）</span><br><span class="line">    属性选择符</span><br><span class="line">    伪对象选择符</span><br></pre></td></tr></table></figure><h2 id="类型选择符-标签选择器"><a href="#类型选择符-标签选择器" class="headerlink" title="类型选择符(标签选择器)"></a>类型选择符(标签选择器)</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类型选择符是根据html语言中的标记来直接定义</span><br><span class="line">语法：标签名称 `&#123;属性：属性值；&#125;`</span><br><span class="line"></span><br><span class="line">a)类型选择符就是以文档对象html中的标签作为选择符，即使用结构中元素名称作为选择符。例如body、div、p,img,em,strong,span......等。</span><br><span class="line">b)所有的页面元素都可以作为选择符;</span><br><span class="line">用法：</span><br><span class="line">（1）如果想改变某个元素的默认样式时，可以使用类型选择符；（如：改变一个p段落样式）</span><br><span class="line">（2）当统一文档某个元素的显示效果时，可以使用类型选择符；（如：改变文档所有p段落样式）</span><br></pre></td></tr></table></figure><h2 id="类（class）选择符"><a href="#类（class）选择符" class="headerlink" title="类（class）选择符"></a>类（class）选择符</h2><p><a href="https://imgtu.com/i/6rbAOK"><img src="https://s3.ax1x.com/2021/03/16/6rbAOK.png" alt="6rbAOK.png"></a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法 ：  .class名（你自己取的名字）&#123;属性：属性值;&#125;</span><br><span class="line"></span><br><span class="line">用法：class选择符更适合定义一类样式；</span><br><span class="line">(1)当我们使用类选择符时，应先为每个元素定义一个类名称，</span><br><span class="line">(2)类选择符的语法格式：</span><br><span class="line">        如：&lt;div class=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class="line">               .top&#123;属性:属性值;&#125;</span><br></pre></td></tr></table></figure><h2 id="ID选择符"><a href="#ID选择符" class="headerlink" title="ID选择符"></a>ID选择符</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法： &lt;标签 id=“名”&gt;&lt;/标签&gt;</span><br><span class="line">      #id名`&#123;属性：属性值;&#125;`</span><br><span class="line"></span><br><span class="line">（1）可以给每个元素使用id选择符，但id是元素的唯一标识符，不可出现重复的id名；</span><br><span class="line">      如：&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class="line">（2）id选择符的语法格式是“#”加上自定义的id名</span><br><span class="line">      如：#box`&#123;width:300px; height:300px;&#125;`</span><br><span class="line"> (3) 起名时要取英文名，不能用关键字：(所有的标记和属性都是关键字)</span><br><span class="line">      如：div标记</span><br><span class="line"> (4)一个id名称只能在文档中出现一次，因为id是唯一的</span><br><span class="line"> (5) 最大的用处：创建网页的外围结构。(唯一性、起名字不能使用关键字)</span><br></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a:link `&#123;color: red;&#125;`                    /* 未访问的链接状态 */</span><br><span class="line">a:visited `&#123;color: green;&#125;`/* 已访问的链接状态 */</span><br><span class="line">a:hover `&#123;color: blue;&#125;`                  /* 鼠标滑过链接状态 */</span><br><span class="line">a:active `&#123;color: yellow;&#125;`               /* 鼠标按下去时的状态 */</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">1）当这4个超链接伪类选择符联合使用时，应注意他们的顺序，正常顺序为：</span><br><span class="line">a，a:link,a:visited,a:hover,a:active,错误的顺序有时会使超链接的样式失效；lvha</span><br><span class="line">2）为了简化代码，可以把伪类选择符中相同 的声明提出来放在a选择符中；</span><br><span class="line">例如：a`&#123;color:red;&#125;`     a:hover`&#123;color:green;&#125;` </span><br><span class="line">表示超链接的三种状态都相同，只有鼠标划过变化颜色</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：*`&#123;属性：属性值;&#125;`</span><br><span class="line"></span><br><span class="line">说明：通配选择符的写法是“*”，其含义就是所有标签；    </span><br><span class="line">表示该样式适用所有网页元素；</span><br><span class="line"></span><br><span class="line">用法：常用来重置样式。</span><br><span class="line">例：*`&#123;margin:0;padding:0;&#125;`</span><br></pre></td></tr></table></figure><h2 id="群组选择符"><a href="#群组选择符" class="headerlink" title="群组选择符"></a>群组选择符</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：选择符1，……，选择符5 `&#123;属性：属性值;&#125;`</span><br><span class="line"></span><br><span class="line">说明：当有多个选择符应用相同的样式时，可以将选择符用“，”分隔的方式，合并为一组。</span><br><span class="line">   </span><br><span class="line">     实例：.top, #nav, p`&#123;width:100px;&#125;`</span><br></pre></td></tr></table></figure><h2 id="包含选择器（后代选择器）"><a href="#包含选择器（后代选择器）" class="headerlink" title="包含选择器（后代选择器）"></a>包含选择器（后代选择器）</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：选择符1(父)  选择符2（后代）`&#123;属性：属性值;&#125;` </span><br><span class="line">                   选择符父级  选择符子级`&#123;属性：属性值;&#125;`</span><br><span class="line"></span><br><span class="line">说明：选择符1和选择符2用空格隔开，含义就是选择符1中包含的所有选择符2;</span><br><span class="line">实例： div   ul  li`&#123;height:200px;&#125;`</span><br></pre></td></tr></table></figure><h2 id="伪对象选择符（伪元素）"><a href="#伪对象选择符（伪元素）" class="headerlink" title="伪对象选择符（伪元素）"></a>伪对象选择符（伪元素）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1）::after</span><br><span class="line">   说明：与content属性一起使用，定义在对象后的内容。对象就是元素内容。</span><br><span class="line">        语法：选择符::after&#123;content:”文字”;&#125;</span><br><span class="line">        选择符::after&#123;content:url(图片路径)；&#125;</span><br><span class="line">   如：div::after&#123;content:url(logo.jpg);&#125;</span><br><span class="line">      div::after&#123;content:&quot;文本内容&quot;;&#125; </span><br><span class="line"></span><br><span class="line">2）::before    </span><br><span class="line">   说明：与content属性一起使用,定义在元素内容前的内容。</span><br><span class="line">   如：div::before&#123;content:&quot;在其前放内容&quot;;&#125;</span><br><span class="line"></span><br><span class="line">3）::first-letter </span><br><span class="line">   说明：定义对象内第一个字符的样式。(该伪元素只能用于块级元素)</span><br><span class="line"></span><br><span class="line">4）::first-line</span><br><span class="line">   说明：定义对象内第一行的样式。(该伪元素只能用于块级元素。)</span><br></pre></td></tr></table></figure><h2 id="选择符权重"><a href="#选择符权重" class="headerlink" title="选择符权重"></a>选择符权重</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">css中用四位数字表示权重，</span><br><span class="line">权重的表达方式如：0，0，0，0；</span><br><span class="line">    权重规则：HTML标签(类型选择符)的权重是1，class的权重是10，id的权重是100。</span><br><span class="line">    类型选择符的权重为0001</span><br><span class="line">    class选择符的权重为0010</span><br><span class="line">    id选择符的权重为0100</span><br><span class="line">    属性选择符的权重为0010</span><br><span class="line">    伪类选择符的权重为0010</span><br><span class="line">    伪元素（对象）选择符的权重为0001</span><br><span class="line">    包含选择符的权重：为包含选择符的权重之和</span><br><span class="line">    内联样式的权重为1000</span><br><span class="line">    继承样式的权重为0000</span><br><span class="line">    群组集合选择符权重为他本身</span><br><span class="line">     注：如果权重相同时，则执行后写的样式；</span><br><span class="line">     </span><br><span class="line">     内联&gt;id&gt;类，属性，伪类&gt;标签，伪对象&gt;继承</span><br><span class="line">     1000 100    10         1        0</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内只作用于当前标签</span><br><span class="line">内部只作用于当前文件</span><br><span class="line">外部作用于所有文件</span><br></pre></td></tr></table></figure><h1 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">css层叠指的是样式的优先级，当产生冲突时以优先级高的为准。</span><br><span class="line"></span><br><span class="line">1. 开发者样式&gt;读者样式&gt;浏览器样式（除非使用!important标记 ）</span><br><span class="line">2. id选择符&gt;（伪）类选择符&gt;元素选择符</span><br><span class="line">3. 权重相同时取后面定义的样式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：属性是指定选择符所具有的属性，它是css的核心，css2共有150多个属性</span><br><span class="line">属性值：属性值包括法定属性值及常见的数值加单位，如25px，或颜色值等。</span><br></pre></td></tr></table></figure><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h2 id="文本大小-font-size"><a href="#文本大小-font-size" class="headerlink" title="文本大小 font-size"></a>文本大小 font-size</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">1） 属性值为数值型时，必须给属性值加单位，属性值为0时除外。</span><br><span class="line">2）单位还可以是pt，9pt=12px;</span><br><span class="line">3）为了减小系统间的字体显示差异，IE Netscape Mozilla的浏览器制作商于1999年召开会议，共同确定16px/ppi为标准字体大小默认值,即1em.默认情况下，1em=16px,0.75em=12px;</span><br><span class="line">4）使用绝对大小关键字</span><br><span class="line">         xx-small =9px</span><br><span class="line">         x-small =11px</span><br><span class="line">         small =13px</span><br><span class="line">         medium =16px</span><br><span class="line">         large =19px</span><br><span class="line">         x-large =23px</span><br><span class="line">         xx-large =27px</span><br></pre></td></tr></table></figure><h2 id="文本颜色-color"><a href="#文本颜色-color" class="headerlink" title="文本颜色  color"></a>文本颜色  color</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"></span><br><span class="line">用十六进制(是计算机中数据的一种表示方法)表示颜色值：</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 A B C D E F</span><br><span class="line">颜色模式：光色模式</span><br><span class="line">R G B</span><br><span class="line">FF 00 00</span><br><span class="line">颜色值的缩写：</span><br><span class="line">当表示三原色的三组数字同时相同时，可以缩写为三位;</span><br><span class="line">当用十六进制表示颜色值时，需要在颜色值前加“#”</span><br><span class="line"># fa 00 00</span><br></pre></td></tr></table></figure><h2 id="文本类型-font-family-字体1，字体2，字体3……"><a href="#文本类型-font-family-字体1，字体2，字体3……" class="headerlink" title="文本类型  font-family:字体1，字体2，字体3……"></a>文本类型  font-family:字体1，字体2，字体3……</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">浏览器首先会寻找字体1、如存在就使用改字体来显示内容，如在字体1不存在的情况下，则会寻找字体2，如字体2也不存在，按字体3显示内容，如果字体3 也不存在；则按系统默认字体显示；</span><br><span class="line">当字体是中文字体时，需加双引号；</span><br><span class="line">当英文字体中有空格时，需加双引号如（“Times New Roman”）</span><br><span class="line">当英文字体只有一个单词组成是不加双引号；如：（Arial）；</span><br><span class="line">Windows中文版本操作系统下，中文默认字体为宋体或者新宋体，英文字体默认为Arial.</span><br></pre></td></tr></table></figure><h2 id="文字加粗font-weight-bolder-更粗的-bold（加粗）-normal（常规）-100—900"><a href="#文字加粗font-weight-bolder-更粗的-bold（加粗）-normal（常规）-100—900" class="headerlink" title="文字加粗font-weight:bolder(更粗的)&#x2F;bold（加粗）&#x2F;normal（常规）&#x2F;100—900;"></a><strong>文字加粗font-weight:bolder(更粗的)&#x2F;bold（加粗）&#x2F;normal（常规）&#x2F;100—900;</strong></h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"></span><br><span class="line">在css规范中，把字体的粗细分为9个等级，分别为100——900，其中100对应最轻的字体变形，而900对应最重的字体变形，</span><br><span class="line">100-400 一般 500常规字体 600-900加粗字体</span><br></pre></td></tr></table></figure><h2 id="font-style：italic-oblique-normal（取消倾斜，常规显示）"><a href="#font-style：italic-oblique-normal（取消倾斜，常规显示）" class="headerlink" title="font-style：italic&#x2F;oblique&#x2F;normal（取消倾斜，常规显示）;"></a><strong>font-style：italic&#x2F;oblique&#x2F;normal（取消倾斜，常规显示）;</strong></h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"></span><br><span class="line">italic和oblique都是向右倾斜的文字, 但区别在于Italic是指斜体字，而Oblique是倾斜的文字，对于没有斜体的字体应该使用Oblique属性值来实现倾斜的文字效果.</span><br></pre></td></tr></table></figure><h2 id="文字行高-line-height-normal-value"><a href="#文字行高-line-height-normal-value" class="headerlink" title="文字行高 {line-height:normal/value;}"></a><strong>文字行高 <code>&#123;line-height:normal/value;&#125;</code></strong></h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">当单行文本的行高等于容器高时，可实现单行文本在容器中垂直方向居中对齐；</span><br><span class="line">当单行文本的行高小于容器高时，可实现单行文本在容器中垂直中齐以上；</span><br><span class="line">当单行文本的行高大于容器高时，可实现单行文本在容器中垂直中齐以下（IE6及以下版本存在浏览器兼容问题）</span><br><span class="line">*文字属性简写：font:12px/24px &quot;宋体&quot;;</span><br><span class="line">font属性的简写：字号，行高，字体</span><br><span class="line">font-size:12px; line-height:24px; font-family:”宋体”；</span><br><span class="line">font属性的简写：</span><br><span class="line">说明:font的属性值应按以下次序书写(各个属性之间用空格隔开)</span><br><span class="line">顺序: font-style font-weight font-size / line-height font-family</span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">(1)简写时 , font-size和line-height只能通过斜杠/组成一个值，不能分开写。</span><br><span class="line">(2) 顺序不能改变 ,这种简写法只有在同时指定font-size和font-family属性时才起作用,而且,你没有设定font-weight , font-style , 他们会使用缺省值（默认值）。</span><br></pre></td></tr></table></figure><h2 id="水平对齐方式"><a href="#水平对齐方式" class="headerlink" title="水平对齐方式"></a>水平对齐方式</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align:left/right/center/justify（两端对齐中文不起作用）</span><br></pre></td></tr></table></figure><h2 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a><strong>文本修饰</strong></h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">text-decoration:</span><br><span class="line">说明：</span><br><span class="line">none:没有修饰</span><br><span class="line">underline:添加下划线</span><br><span class="line">overline:添加上划线</span><br><span class="line">line-through:添加删除线</span><br></pre></td></tr></table></figure><h2 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a><strong>首行缩进</strong></h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1）text-indent可以取负值；</span><br><span class="line">2）text-indent属性只对第一行起作用。</span><br></pre></td></tr></table></figure><h2 id="字间距、词间距"><a href="#字间距、词间距" class="headerlink" title="字间距、词间距"></a>字间距、词间距</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字间距`&#123;letter-spacing:value;&#125;`控制英文字母或汉字的字距。</span><br><span class="line"></span><br><span class="line">词间距`&#123;word-spacing:value;&#125;`控制英文单词词距。</span><br></pre></td></tr></table></figure><h2 id="检索或设置对象中的文本的大小写-只对英文起作用"><a href="#检索或设置对象中的文本的大小写-只对英文起作用" class="headerlink" title="检索或设置对象中的文本的大小写(只对英文起作用)"></a>检索或设置对象中的文本的大小写(只对英文起作用)</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`&#123;text-transform:none/capitalize/uppercase/lowercase&#125;` </span><br><span class="line">capitalize:首字母大写;uppercase:全部大写;lowercase:全部小写 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font-variant：属性设置小型大写字母的字体显示，意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小</span><br><span class="line">font-variant:small-caps浏览器会显示小型大写字母的字体</span><br><span class="line">normal：默认值。浏览器显示一个标准的字体</span><br><span class="line">例：把段落设置为小型大写字母字体：</span><br><span class="line">p.small `&#123;font-variant: small-caps&#125;`</span><br><span class="line">&lt;p class=&quot;small&quot;&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;vertical-align:top/bottom/middle;&#125;</span><br><span class="line">说明：图文排列中常用；此属性无法单独使用，需要支持的条件； 只会对inline-block元素类型起作用；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><h2 id="1、定义列表符号样式"><a href="#1、定义列表符号样式" class="headerlink" title="1、定义列表符号样式"></a>1、定义列表符号样式</h2><p>list-style-type：disc(实心圆)&#x2F;circle(空心圆)&#x2F;square(实心方块)&#x2F;none(去掉列表符号)；list-style-type:none&#x3D;&#x3D;&#x3D;（简写）list-style:none;</p><h2 id="2、使用图片作为列表符号"><a href="#2、使用图片作为列表符号" class="headerlink" title="2、使用图片作为列表符号"></a>2、使用图片作为列表符号</h2><p>list-style-image：url(所使用图片的路径及全称)；</p><h2 id="3、定义列表符号的位置"><a href="#3、定义列表符号的位置" class="headerlink" title="3、定义列表符号的位置"></a>3、定义列表符号的位置</h2><p>list-style-position:outside(外边)&#x2F;inside(里边)；</p><p><em>list-style:none;去掉列表符号</em></p><h2 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">border:边框宽度 边框风格 边框颜色;</span><br><span class="line">例如：border:5px solid #ff0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">边框：border,网页中很多修饰性线条都是由边框来实现的。</span><br><span class="line">边框宽度：border-width:</span><br><span class="line">边框颜色：border-color:</span><br><span class="line">边框样式：border-style:solid(实线)/dashed(虚线)dotted(点划线)double(双线) none(没有线)可单独设置一方向边框，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可单独设置一方向边框，</span><br><span class="line">    border-bottom:边框宽度 边框风格 边框颜色;  底边框</span><br><span class="line">    border-left:边框宽度 边框风格 边框颜色;   左边框</span><br><span class="line">    border-right:边框宽度 边框风格 边框颜色;  右边框</span><br><span class="line">    border-top:边框宽度 边框风格 边框颜色;   上边框</span><br></pre></td></tr></table></figure><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><ul><li><p><strong>1、背景颜色 <code>&#123;background-color:颜色值;&#125;</code></strong></p></li><li><p><strong>2、背景图片的设置 background-image：url(背景图片的路径及全称)；</strong>背景图片的显示原则<br>1）容器尺寸等于图片尺寸，背景图片正好显示在容器中<br>2）容器尺寸大于图片尺寸，背景图片将默认平铺，直至铺满元素；<br>3）容器尺寸小于图片尺寸，只显示元素范围以内的背景图。<br>网页上有两种图片形式：插入图片、背景图；<br><em>插入图片：</em>属于网页内容，也就是结构。<br><em>背景图：</em>属于网页的表现，背景图上可以显示文字、插入图片、表格等。</p></li><li><p><strong>3、背景图片平铺属性<code>&#123;background-repeat:no-repeat/repeat/repeat-x/repeat-y &#125;</code></strong></p></li><li><p>**4、背景图的位置 性<code>&#123;background-position:left/center/right/数值 top/center/bottom/数值;&#125;</code>**水平方向上的对齐方式（left&#x2F;center&#x2F;right）或值<br>垂直方向上的对齐方式(top&#x2F;center&#x2F;bottom)或值<br>background-position:值1 值2;<br>两个值 ：第一个值表示水平位置的值，第二个值：表示垂直的位置。<br>当两个值都是center的时候写一个值就可以代表的是水平位置和垂直位置<br>说明：向左方向，向上方向是负值<br><em>背景属性的缩写语法：</em><br>background:属性值1 属性值2 属性值3；<br>背景缩写：background:url（背景图片的路径及全称） no-repeat center top #f00；</p><p><em>网页上常用的图片格式（压缩图片）</em><br>1)jpg :有损压缩格式，靠损失图片本身的质量来减小图片的体积，适用于颜色丰富的图像;(像素点组成的，像素点越多会越清晰 )如果网页中<br>2）gif：有损压缩格式，靠损失图片的色彩数量来减小图片的体积，支持透明，支持动画，适用于颜色数量较少的图像;<br>3)png:有损压缩格式，损失图片的色彩数量来减小图片的体积，支持透明，不支持动画，是fireworks的 源文件格式，适用于颜色数量较少的图像;</p></li><li><p>**5、背景图的固定 性<code>&#123;</code>{background-attachment:scroll(滚动)&#x2F;fixed(固定);}&#96;**fixed 固定，不随内容一块滚动；<br>scroll:随内容一块滚动。</p></li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>语法：float:none&#x2F;left&#x2F;right;</p><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><p>浮动框是脱离了普通的文档流</p><p>常见的浮动现象：</p><p><a href="https://imgtu.com/i/6rbZwD"><img src="https://s3.ax1x.com/2021/03/16/6rbZwD.jpg" alt="6rbZwD.jpg"></a></p><p>清除浮动属性 </p><p>语法：<code>&#123;clear： ;&#125;</code></p><p>属性值：none：  允许两边都可以有浮动对象</p><p>both：  清除元素两边浮动</p><p>left：    清除元素左边浮动</p><p>right:    清除元素右边浮动 </p><p>清除浮动方法</p><p>1，在想清除的浮动元素后面添加一个空元素，并给这个空元素添加一个样式属性，clear: both;</p><p>高度自适应详细说明</p><p>2，通过：after为父容器添加一个后置伪元素，并通过display: block;转换成块元素，在设置clear: both;以达到清楚子元素浮动的效果*&#x2F;</p><p>&#x2F;<em>overflow:hidden，控制元素内容移除，可以将溢出元素内容隐藏。</em>&#x2F;</p><p>.clearfix:after<code>&#123; content: &quot;.&quot;; display: block; clear: both; font-size: 1px;/*将文字设置到最小，为了解决一些老版本浏览器文字默认高度的问题*/ height: 0px; overflow:hidden;visibility:hidden;&#125;</code></p><p>什么情况下需要清浮动</p><p>最外面的盒子给了固定的高所以没清除浮动，如果最外面的盒子不给高，出现<strong>高度塌陷</strong>，需要清除浮动</p><h1 id="css属性继承"><a href="#css属性继承" class="headerlink" title="css属性继承"></a>css属性继承</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不可继承的：display、margin、border、padding、background、height、min-height、max- height、、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align</span><br><span class="line"></span><br><span class="line">所有元素可继承：visibility和cursor。</span><br><span class="line">内联元素可继承：letter-spacing、word-spacing、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform。</span><br><span class="line">块状元素可继承：text-indent和text-align</span><br><span class="line">列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</span><br><span class="line">表格元素可继承：border-collapse。</span><br></pre></td></tr></table></figure><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">盒模型是css布局的基石，它规定了网页元素如何显示以及元素间相互关系。css定义所有的元素都可以拥有像盒子一样的外形和平面空间。即都包含内容区、补白（填充）、边框、边界(外边距)这就是盒模型。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6rHxwF"><img src="https://s3.ax1x.com/2021/03/16/6rHxwF.png" alt="6rHxwF.png"></a></p><p><a href="https://imgtu.com/i/6rbFQx"><img src="https://s3.ax1x.com/2021/03/16/6rbFQx.png" alt="6rbFQx.png"></a></p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><table><thead><tr><th align="center">padding用法:</th><th align="left"></th></tr></thead><tbody><tr><td align="center"></td><td align="left">1:padding是在盒子里面，在盒子与内容之间。</td></tr><tr><td align="center"></td><td align="left">2：padding的作用：控制子元素在父元素里面的位置关系。</td></tr><tr><td align="center"></td><td align="left">3：padding会把盒子撑大。</td></tr><tr><td align="center"></td><td align="left">4：如果想让盒子保持原有的大小：在宽高基础上减掉。（ 如果一个元素是被内容撑开的，没有设置固定的宽高，padding直接撑开。不用减掉 ）</td></tr><tr><td align="center"></td><td align="left">5:如果给单一方向添加padding</td></tr><tr><td align="center"></td><td align="left">padding-top&#x2F;bottom&#x2F;left&#x2F;right</td></tr><tr><td align="center"></td><td align="left">6:padding的设置特点：</td></tr><tr><td align="center"></td><td align="left">padding:30px;    四周</td></tr><tr><td align="center"></td><td align="left">padding:10px 30px;     上下     左右</td></tr><tr><td align="center"></td><td align="left">padding:10px 30px 50px    上   左右    下</td></tr><tr><td align="center"></td><td align="left">padding:10px 30px 50px 100px     上右下左</td></tr><tr><td align="center"></td><td align="left">7:padding不会对背景图的位置造成影响。</td></tr></tbody></table><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><table><thead><tr><th align="center">margin用法    （外边距、边界）</th><th align="left"></th></tr></thead><tbody><tr><td align="center"></td><td align="left">1:margin在元素外围，不会撑大元素的大小</td></tr><tr><td align="center"></td><td align="left">2:作用:控制元素与元素之间的间距。</td></tr><tr><td align="center"></td><td align="left">3：给单一方向添加margin</td></tr><tr><td align="center"></td><td align="left">margin-left&#x2F;right&#x2F;top&#x2F;bottom</td></tr><tr><td align="center"></td><td align="left">4 :margin设置方法：</td></tr><tr><td align="center"></td><td align="left">margin:30px;    四周</td></tr><tr><td align="center"></td><td align="left">margin:10px 30px;     上下     左右</td></tr><tr><td align="center"></td><td align="left">margin:10px 30px 50px    上   左右    下</td></tr><tr><td align="center"></td><td align="left">margin:10px 30px 50px 100px     上右下左</td></tr><tr><td align="center"></td><td align="left"></td></tr><tr><td align="center"></td><td align="left">5:margin:0 auto;</td></tr><tr><td align="center"></td><td align="left">让当前元素在父元素里面左右居中。</td></tr><tr><td align="center"></td><td align="left">6:margin常出现的bug</td></tr><tr><td align="center"></td><td align="left">a:两个相邻元素上下的margin值 不会叠加 按照较大值设置。</td></tr><tr><td align="center"></td><td align="left">b:如果父元素和第一个子元素没有浮动的情况下，给第一个子元素添加margin-top,会错误放在父元素上面。</td></tr></tbody></table><h2 id="盒子大小计算"><a href="#盒子大小计算" class="headerlink" title="盒子大小计算"></a>盒子大小计算</h2><p><a href="https://imgtu.com/i/6rHveU"><img src="https://s3.ax1x.com/2021/03/16/6rHveU.png" alt="6rHveU.png"></a></p><p><a href="https://imgtu.com/i/6rHXLT"><img src="https://s3.ax1x.com/2021/03/16/6rHXLT.png" alt="6rHXLT.png"></a></p><h1 id="文本溢出"><a href="#文本溢出" class="headerlink" title="文本溢出"></a>文本溢出</h1><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">visible:默认值，内容不会被修剪，会呈现在元素框之外；</span><br><span class="line">hidden：内容会被修剪，并且其余内容是不可见的；</span><br><span class="line">scroll：内容会被修剪，但是浏览器会显示滚动条，以便查看其余的内容;</span><br><span class="line">auto：如果内容被修剪，则浏览器会显示滚动条，以便查看其他的内容;</span><br><span class="line">inherit：规定应该从父元素继承overflow属性的值。</span><br></pre></td></tr></table></figure><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">normal：默认值，多余空白会被浏览器忽略只保留一个；</span><br><span class="line">pre：空白会被浏览器保留；</span><br><span class="line">pre-wrap：保留一部分空白符序列，但是正常的进行换行；</span><br><span class="line">pre-line:合并空白符序列，但是保留换行符；</span><br><span class="line">nowrap:文本不会换行，文本会在同一行上继续，直到遇到&lt;br/&gt;标签为止;</span><br></pre></td></tr></table></figure><h2 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip：不显示省略号（...），而是简单的裁切;</span><br><span class="line">ellipsis：当对象内文本溢出时，显示省略标记；</span><br></pre></td></tr></table></figure><h2 id="文本溢出变省略号设置"><a href="#文本溢出变省略号设置" class="headerlink" title="文本溢出变省略号设置"></a>文本溢出变省略号设置</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">省略号设置：</span><br><span class="line">text-overflow属性仅是：当文本溢出时是否显示省略标记，并不具备其它的样式属性定义，要实现溢出时产生省略号的效果还需定义：</span><br><span class="line">1、容器宽度：width：value；（px、%，都可以）</span><br><span class="line">2、强制文本在一行内显示:white-space：nowrap;</span><br><span class="line">3、溢出内容为隐藏：overflow：hidden；</span><br><span class="line">4、溢出文本显示省略号：</span><br><span class="line">     text-overflow：ellipsis;</span><br><span class="line">                        </span><br><span class="line">注：必须是单行文本才能设置本文溢出！！！</span><br></pre></td></tr></table></figure><h1 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">根据css显示分类，XHTML元素被分为</span><br><span class="line"></span><br><span class="line">三种类型:</span><br><span class="line">块状元素，内联元素，可变元素</span><br><span class="line"></span><br><span class="line">&amp;&amp;</span><br><span class="line"></span><br><span class="line">三种类型：</span><br><span class="line">块状元素，内联元素，内联块元素(css2.1增加)</span><br></pre></td></tr></table></figure><h2 id="块状元素的特点"><a href="#块状元素的特点" class="headerlink" title="块状元素的特点"></a>块状元素的特点</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A:块状元素在网页中就是以块的形式显示，所谓块状就是元素显示为矩形区域，</span><br><span class="line">B:默认情况下，块状元素都会占据一行，通俗地说，两个相邻块状元素不会出现并列显示的现象；默认情况下，块状元素会按顺序自上而下排列。</span><br><span class="line">C:块状元素都可以定义自己的宽度和高度。 </span><br><span class="line">D:块状元素一般都作为其他元素的容器，它可以容纳其它内联元素和其它块状元素。我们可以把这种容器比喻为一个盒子。</span><br></pre></td></tr></table></figure><h2 id="内联元素的特点"><a href="#内联元素的特点" class="headerlink" title="内联元素的特点"></a>内联元素的特点</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:内联元素的表现形式是始终以行内逐个进行显示；</span><br><span class="line">B:内联元素没有自己的形状，不能定义它的宽和高,它显示的宽度、高度只能根据所包含内容的高度和宽度来确定，它的最小内容单元也会呈现矩形形状；</span><br><span class="line">C:内联元素也会遵循盒模型基本规则，如可以定义padding,border,margin,background等属性，但个别属性不能正确显示;(padding-top:;margin-top/bottom:;)</span><br><span class="line">D:内联元素加了浮动就相当于自动转换为内联块元素。</span><br><span class="line">当display为none时不显示。</span><br></pre></td></tr></table></figure><h2 id="可变元素"><a href="#可变元素" class="headerlink" title="可变元素"></a>可变元素</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要根据上下文关系确定该元素是块元素或者内联元素。</span><br></pre></td></tr></table></figure><h2 id="常见的标签"><a href="#常见的标签" class="headerlink" title="常见的标签"></a>常见的标签</h2><h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div -最常用的块级元素</span><br><span class="line">dl - 和dt-dd 搭配使用的块级元素</span><br><span class="line">form - 交互表单</span><br><span class="line">h1 -h6- 大标题</span><br><span class="line">hr - 水平分隔线</span><br><span class="line">ol – 有序列表</span><br><span class="line">p - 段落</span><br><span class="line">ul - 无序列表</span><br><span class="line">li</span><br><span class="line">fieldset - 表单字段集</span><br><span class="line">colgroup-col - 表单列分组元素</span><br><span class="line">table-tr-td  表格及行-单元格</span><br></pre></td></tr></table></figure><h2 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a –超链接（锚点）                               </span><br><span class="line">b - 粗体(不推荐)                         </span><br><span class="line">i - 斜体</span><br><span class="line">em - 强调                                                         </span><br><span class="line">span - 常用内联容器，定义文本内区块</span><br><span class="line">strong - 粗体强调</span><br><span class="line">sub - 下标   </span><br><span class="line">sup - 上标</span><br><span class="line">u - 下划线</span><br></pre></td></tr></table></figure><h2 id="内联块元素"><a href="#内联块元素" class="headerlink" title="内联块元素"></a>内联块元素</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img - 图片                         </span><br><span class="line">input - 输入框               </span><br><span class="line">label - 表单标签                  </span><br><span class="line">textarea - 多行文本输入框</span><br><span class="line">select - 项目选择  </span><br></pre></td></tr></table></figure><h2 id="元素类型的转换"><a href="#元素类型的转换" class="headerlink" title="元素类型的转换"></a>元素类型的转换</h2><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">盒子模型可通过display属性来改变默认的显示类型</span><br></pre></td></tr></table></figure><h2 id="display的属性值"><a href="#display的属性值" class="headerlink" title="display的属性值"></a>display的属性值</h2><table><thead><tr><th>none</th><th>此元素不会被显示。</th></tr></thead><tbody><tr><td><strong>block</strong></td><td><strong>此元素将显示为块级元素，此元素前后会带有换行符。</strong></td></tr><tr><td><strong>inline</strong></td><td>此元素会被显示为内联元素，元素前后没有换行符。**</td></tr><tr><td><strong>inline-block</strong></td><td><strong>行内块元素。（CSS2.1 新增的值）</strong></td></tr><tr><td><strong>list-item</strong></td><td><strong>此元素会作为列表显示。</strong></td></tr><tr><td>run-in</td><td>此元素会根据上下文作为块级元素或内联元素显示。</td></tr><tr><td>compact</td><td>CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td></tr><tr><td>marker</td><td>CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td></tr><tr><td>table</td><td>此元素会作为块级表格来显示（类似 <code>&lt;table&gt;</code>），表格前后带有换行符。</td></tr><tr><td>inline-table</td><td>此元素会作为内联表格来显示（类似 <code>&lt;table&gt;</code>），表格前后没有换行符。</td></tr><tr><td>table-row-group</td><td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tbody&gt;</code>）。</td></tr><tr><td>table-header-group</td><td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;thead&gt;</code>）。</td></tr><tr><td>table-footer-group</td><td>此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tfoot&gt;</code>）。</td></tr><tr><td>table-row</td><td>此元素会作为一个表格行显示（类似 <code>&lt;tr&gt;</code>）。</td></tr><tr><td>table-column-group</td><td>此元素会作为一个或多个列的分组来显示（类似 <code>&lt;colgroup&gt;</code>）。</td></tr><tr><td>table-column</td><td>此元素会作为一个单元格列显示（类似 <code>&lt;col&gt;</code>）</td></tr><tr><td>table-cell</td><td>此元素会作为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>）</td></tr><tr><td>table-caption</td><td>此元素会作为一个表格标题显示（类似 <code>&lt;caption&gt;</code>）</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 display 属性的值。</td></tr></tbody></table><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A、大部分块元素display属性值默认为block，其中列表li的默认值为list-item。</span><br><span class="line">B、大部分内联元素的display属性值默认为inline,其中img,input，默认为inline-block（行内块元素）。</span><br></pre></td></tr></table></figure><h2 id="元素在容器中垂直居中"><a href="#元素在容器中垂直居中" class="headerlink" title="元素在容器中垂直居中"></a>元素在容器中垂直居中</h2><p><strong>设置一个元素在一个容器中垂直居中，必须更改默认的display属性值为inline-block;并加上同级元素（标尺）（同级元素[标尺]样式设置为vertical-align:middle;width:0;height:100%;display:inline-block;）</strong><br>    三个条件：<br>        1：必须给容器（父元素）加上text-align:center;<br>        2:必须给当前元素转成行内块元素（display:inline-block;）再给当前元素加上vertical-align:middle;<br>        3：在当前元素的后面（没有回车）加上同级元素span;并对span进行vertical-align:middle;width:0;height:100%;display:inline-block </p><h2 id="置换元素"><a href="#置换元素" class="headerlink" title="置换元素"></a>置换元素</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一、引题</span><br><span class="line">在之前的浅谈HTML中的块级元素和内联元素中了解到了内联元素一般是不能设置宽高的，但是也有特殊。比如img是内联元素，但可以设置宽高，这肯定让不少人迷惑。这样我们就要引入HTML中置换元素的概念（非置换元素在w3c中没有给出明确的解释，姑且我们就把除置换元素外的元素当作非置换元素吧）。</span><br><span class="line"></span><br><span class="line">二、置换元素与非置换元素</span><br><span class="line">a) 置换元素：浏览器根据元素的标签和属性，来决定元素的具体显示内容。 </span><br><span class="line">例如：浏览器会根据&lt;img&gt;标签的src属性的值来读取图片信息并显示出来，而如果查看(x)html代码，则看不到图片的实际内容；&lt;input&gt;标签的type属性来决定是显示输入框，还是单选按钮等。 (x)html中的&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;都是置换元素。这些元素往往没有实际的内容，即是一个空元素。</span><br><span class="line"></span><br><span class="line">置换元素在其显示中生成了框，这也就是有的内联元素（img,input）能够设置宽高的原因。</span><br><span class="line"></span><br><span class="line">b) 不可替换元素（非置换元素）：(x)html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。</span><br></pre></td></tr></table></figure><h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><ul><li>CSS 有三种基本的定位机制：<strong>普通流、浮动流、定位流</strong>。</li></ul><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><ul><li>position定位属性，检索或设置对象的定位方式</li></ul><h2 id="position属性值"><a href="#position属性值" class="headerlink" title="position属性值"></a>position属性值</h2><table><thead><tr><th><strong>static</strong></th><th><strong>默认值。位置设置为 static 的元素会正常显示，它始终会处于文档流给予的位置（static元素会忽略任何 top、bottom、left或 right 声明）</strong></th></tr></thead><tbody><tr><td><strong>absolute</strong></td><td><strong>相对于父级元素、的绝对定位，浮出、脱离布局流，它不占据空间，就是我们所说的层，其位置相对于最近的已定位父元素而言的位置，可直接指定“left”、“top”、“right” 以及 “bottom”属性。若父级都没有定位，则以html（根元素）。(层叠的顺序z-index:value)</strong></td></tr><tr><td><strong>relative</strong></td><td><strong>是相对于默认位置的相对定位，通过设置left、top、right、bottom值可将其移至相对于其正常位置的地方（相对于自己的开始的位置发生的位置上的移动，【不会破坏正常的布局流，占据空间】）</strong></td></tr><tr><td><strong>fixed</strong></td><td><strong>相对浏览器的绝对定位，是相对于浏览器窗口的指定坐标进行定位。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。</strong></td></tr><tr><td><strong>sticky</strong></td><td><strong>可以看出是<code>position:relative</code>和<code>position:fixed</code>的结合体——当元素在屏幕内，表现为relative，就要滚出显示器屏幕的时候，表现为fixed。</strong></td></tr></tbody></table><p><a href="https://imgtu.com/i/6rbVeO"><img src="https://s3.ax1x.com/2021/03/16/6rbVeO.png" alt="6rbVeO.png"></a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">二、绝对定位和相对定位的区别</span><br><span class="line"></span><br><span class="line">1、参照物不同，绝对定位的参照物是包含块（已定位的父元素），相对定位的参照物是元素本身默认的位置；</span><br><span class="line"></span><br><span class="line">2、绝对定位将对象从文档流中拖离出来因此不占据空间，相对定位不破坏正常的文档流顺序无论是否进行移动，元素仍然占据原来的空间。</span><br></pre></td></tr></table></figure><h2 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">包含块是绝对定位的基础，包含块就是为定位元素提供坐标，偏移和显示范围的参照物，即确定绝对定位的偏移起点和百分比 长度的参考；</span><br><span class="line"></span><br><span class="line">默认状态下，html是一个大的包含块，所有绝对定位的元素都是根据窗口来定自己所处的位置和百分比大小的显示的，如果我们定义了包含元素为包含元素块以后，对于被包含的绝对定位元素来说，就会根据最接近的具有定位功能的上级包含元素来定位自己的显示位置。</span><br><span class="line"></span><br><span class="line">定义元素为包含块：给绝对定位元素的父元素添加声明position：relative；</span><br></pre></td></tr></table></figure><h2 id="定位元素层次关系"><a href="#定位元素层次关系" class="headerlink" title="定位元素层次关系"></a>定位元素层次关系</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z-index : auto |number</span><br><span class="line"></span><br><span class="line">检索或设置对象的层叠顺序。</span><br><span class="line">auto：默认值。</span><br><span class="line">number:无单位的整数值。可为负数</span><br><span class="line">没有设置z-index时，最后写的对象优先显示在上层，设置后，数值越大，层越靠上；</span><br><span class="line">必须有定位才能使用该属性</span><br></pre></td></tr></table></figure><h2 id="元素在浏览器窗口居中的方法"><a href="#元素在浏览器窗口居中的方法" class="headerlink" title="元素在浏览器窗口居中的方法"></a>元素在浏览器窗口居中的方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让一个元素始终在窗口水平、垂直位置居中 */</span></span><br><span class="line"><span class="comment">/* 第一种 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background</span>:<span class="number">#f00</span>;</span><br><span class="line">     <span class="attribute">position</span>:fixed;</span><br><span class="line">     <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 第二种 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background</span>:<span class="number">#f00</span>;</span><br><span class="line">     <span class="attribute">position</span>:fixed;</span><br><span class="line">     <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">margin</span>:-<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="透明度的设置"><a href="#透明度的设置" class="headerlink" title="透明度的设置"></a><strong>透明度的设置</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">IE10以下浏览器写法：</span><br><span class="line"></span><br><span class="line">filter:alpha(opacity=value);取值范围 1-100</span><br><span class="line"></span><br><span class="line">IE9两种都支持，但是优先显示上面的方法；</span><br><span class="line"></span><br><span class="line">兼容其他浏览器写法：</span><br><span class="line"></span><br><span class="line">opacity:  .value（0.2）</span><br><span class="line"></span><br><span class="line">(value的取值范围0-1,0.1,0.2,0.3-----0.9)</span><br><span class="line"></span><br><span class="line">例如：opacity: .8 ; filter:alpha(opacity=80);</span><br><span class="line"></span><br><span class="line">Background:rgba(255,255,255,0.5)仅仅只是透明背景颜色，不透明文字</span><br></pre></td></tr></table></figure><h1 id="marquee滚动字幕的应用"><a href="#marquee滚动字幕的应用" class="headerlink" title="marquee滚动字幕的应用"></a><strong>marquee滚动字幕的应用</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">“scroll/alternate”</span> <span class="attr">direction</span>=<span class="string">&quot;up/down/left/right&quot;</span> <span class="attr">scrollamount</span>=<span class="string">“5s</span> ” <span class="attr">height</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span>&gt;</span>这里放的是内容<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">behavior（行为）=&quot;scroll(滚动)/alternate（晃动） </span></span><br><span class="line"><span class="comment">direction（方向）=&quot;up(从下向上)/down（从上向下）/left（从右向左）/right（从左向右）&quot;</span></span><br><span class="line"><span class="comment">scrollamount（滚动速度）=&quot;value&quot; </span></span><br><span class="line"><span class="comment">height=&quot;&quot; (上下滚动范围)</span></span><br><span class="line"><span class="comment">width=&quot;&quot;(左右滚动范围)  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">命名锚点链接的应用：</span><br><span class="line"></span><br><span class="line">命名锚点的作用：在同一页面内的不同位置进行跳转。</span><br><span class="line">制作锚标记：</span><br><span class="line">1、给元素定义命名锚记名</span><br><span class="line">语法：&lt;标签 id=&quot;命名锚记名&quot;&gt;&lt;/标签&gt;</span><br><span class="line"></span><br><span class="line">2、命名锚记连接</span><br><span class="line">语法：&lt;a href=&quot;#命名锚记名称&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6rbky6"><img src="https://s3.ax1x.com/2021/03/16/6rbky6.png" alt="6rbky6.png"></a></p><h1 id="宽高自适应"><a href="#宽高自适应" class="headerlink" title="宽高自适应"></a>宽高自适应</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网页布局中经常要定义元素的宽和高。但很多时候我们希望元素的大小能够根据窗口或子元素自动调整，这就是pc自适应。</span><br><span class="line">自适应的优点：</span><br><span class="line">元素自适应在网页布局中非常重要，它能够使网页显示更灵活，可以适应在不同设备、不同窗口和不同分辨率下显示。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="宽度自适应"><a href="#宽度自适应" class="headerlink" title="宽度自适应"></a>宽度自适应</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素宽度设置为100%。（块元素宽度默认为100%）</span><br><span class="line">或者不设置宽度（width）;（宽度是父元素的宽度）</span><br></pre></td></tr></table></figure><h2 id="高度自适应"><a href="#高度自适应" class="headerlink" title="高度自适应"></a>高度自适应</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)自适应元素高度：height:auto;或者不设置;（是子元素撑开父元素的高度）</span><br><span class="line"></span><br><span class="line">2)元素高度自适应窗口高度</span><br><span class="line">   设置方法：html,body`&#123;height:100%;&#125;`</span><br><span class="line">注：如果设置子元素的高度跟随父元素的高度变化而变化，那么父元素必须有高度。</span><br></pre></td></tr></table></figure><h2 id="最小高度的自适应"><a href="#最小高度的自适应" class="headerlink" title="最小高度的自适应"></a>最小高度的自适应</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">min-height属性：最小高度；(IE6浏览器不识别该属性)</span><br><span class="line"></span><br><span class="line">hack1:min-height:value;_height:value;</span><br><span class="line"></span><br><span class="line">hack2:min-height:value;  height:auto!important;height:value; </span><br><span class="line">max-height属性：最大高度</span><br><span class="line">max-width属性：最大宽度</span><br><span class="line">min-width属性：最小宽度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浮动元素父元素高度自适应（高度塌陷）"><a href="#浮动元素父元素高度自适应（高度塌陷）" class="headerlink" title="浮动元素父元素高度自适应（高度塌陷）"></a>浮动元素父元素高度自适应（高度塌陷）</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当子元素有浮动并且父元素没有高度的情况下父元素会出现高度塌陷</span><br></pre></td></tr></table></figure><h2 id="高度塌陷的解决方法"><a href="#高度塌陷的解决方法" class="headerlink" title="高度塌陷的解决方法"></a>高度塌陷的解决方法</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hack1：给父元素添加声明overflow:hidden;(触发一个BFC)</span><br><span class="line"></span><br><span class="line">hack2:在浮动元素下方添加空div,并给该元素添加</span><br><span class="line">        声明：div`&#123;clear:both; height:0; overflow:hidden;&#125;`</span><br><span class="line">        </span><br><span class="line">hack3:万能清除浮动法</span><br><span class="line">选择符:after`&#123;content:“&quot;;clear:both;display:block;height:0;overflow:hidden;visibility:hidden;&#125;`</span><br></pre></td></tr></table></figure><h2 id="visibility-hidden-隐藏"><a href="#visibility-hidden-隐藏" class="headerlink" title="visibility:hidden&#x2F;隐藏"></a>visibility:hidden&#x2F;隐藏</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">visibility:hidden;和display:none;的区别：</span><br><span class="line">visibility:hidden;属性会使对象不可见，但该对象在网页所占的空间没有改变，等于留出了一块空白区域，而 display:none属性会使这个对象彻底消失不显示，也不再占用位置。</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe框架 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 语法： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;规定在 iframe 中显示的文档的 URL&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;1/0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe名称&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;yes/no/auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- frameborder=&quot;1/0&quot;  1 代表有框架边框/ 0 代表无框架边框 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scrolling=&quot;yes/no/auto&quot; yes:有  no:无  auto：自动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe的name属性值&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!-- 表示超链接的目标地址在框架中打开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;news.html#top&quot;</span>&gt;</span>返回我原来页面的原来位置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><p><strong>BFC(Block formatting context)直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box（块）参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</strong></p><h2 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h2><ol><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li><li>计算BFC的高度时，内部的浮动元素也参与计算，就是不会出现高度塌陷</li></ol><h2 id="哪些元素或属性能触发BFC"><a href="#哪些元素或属性能触发BFC" class="headerlink" title="哪些元素或属性能触发BFC"></a>哪些元素或属性能触发BFC</h2><ul><li>根元素(html)</li><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow不为visible</li></ul><h2 id="BFC的应用"><a href="#BFC的应用" class="headerlink" title="BFC的应用"></a>BFC的应用</h2><ol><li>自适应两栏布局</li><li>清除内部浮动</li><li>防止margin上下重叠</li></ol><p><a href="http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/">详细讲解：CSS深入理解流体特性和BFC特性下多栏自适应布局</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/posts/e173abca.html"/>
      <url>/posts/e173abca.html</url>
      
        <content type="html"><![CDATA[<h1 id="网站的建站流程"><a href="#网站的建站流程" class="headerlink" title="网站的建站流程"></a>网站的建站流程</h1><p><a href="https://imgtu.com/i/6D69hQ"><img src="https://s3.ax1x.com/2021/03/15/6D69hQ.png" alt="6D69hQ.png"></a></p><h1 id="页面图例"><a href="#页面图例" class="headerlink" title="页面图例"></a>页面图例</h1><p><a href="https://imgtu.com/i/6D6Z7T"><img src="https://s3.ax1x.com/2021/03/15/6D6Z7T.jpg" alt="6D6Z7T.jpg"></a></p><h1 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h1><p><a href="https://imgtu.com/i/6Dyv0f"><img src="https://s3.ax1x.com/2021/03/15/6Dyv0f.png" alt="6Dyv0f.png"></a></p><h1 id="WEB标准"><a href="#WEB标准" class="headerlink" title="WEB标准"></a>WEB标准</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WEB标准是网页制作的标准，它不是一个标准，它是根据网页的不同组成部分生成的一系列标准。这些标准大部分由W3C起草发布，也有部分标准由ECMA起草发布</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6Dyx78"><img src="https://s3.ax1x.com/2021/03/15/6Dyx78.png" alt="6Dyx78.png"></a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）W3C( World Wide Web Consortium )万维网联盟，创建于1994年是Web技术领域最具权威和影响力的国际中立性技术标准机构；是专门负责网络标准制定的非赢利组织。制定了结构标准和样式标准；</span><br><span class="line">（2）ECMA：欧洲电脑网商联合会（厂商协会），制定了行为标准；</span><br></pre></td></tr></table></figure><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML 指的是超文本标记语言 (Hyper Text Markup Language) www万维网的描述性语言。</span><br><span class="line"></span><br><span class="line">XHTML指可扩展超文本标记语言（标识语言）（EXtensible HyperText Markup Language）是一种置标语言，表现方式与超文本标记语言（HTML）类似，不过语法上更加严格。</span><br><span class="line"></span><br><span class="line">HTML5指的是HTML的第五次重大修改（第5个版本）</span><br></pre></td></tr></table></figure><h2 id="HTML发展"><a href="#HTML发展" class="headerlink" title="HTML发展"></a>HTML发展</h2><p><a href="https://imgtu.com/i/6D6ptg"><img src="https://s3.ax1x.com/2021/03/15/6D6ptg.png" alt="6D6ptg.png"></a></p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p><a href="https://imgtu.com/i/6D6Ppj"><img src="https://s3.ax1x.com/2021/03/15/6D6Ppj.png" alt="6D6Ppj.png"></a></p><h2 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h2><ul><li>规划网站的所有内容和代码</li><li>整合资源</li></ul><h2 id="文件的命名规范"><a href="#文件的命名规范" class="headerlink" title="文件的命名规范"></a>文件的命名规范</h2><ul><li>小写英文字母、数字、下划线的组合，</li><li>其中不得包含汉字、空格和特殊字符；</li><li>必须以英文字母开头。</li></ul><h1 id="HTML开始"><a href="#HTML开始" class="headerlink" title="HTML开始"></a>HTML开始</h1><h2 id="HTML架构"><a href="#HTML架构" class="headerlink" title="HTML架构"></a>HTML架构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">有三种：  Strict（严格型)、Trasitional（过渡型）、Frameset（框架型）</span><br></pre></td></tr></table></figure><h2 id="HTML5基本结构"><a href="#HTML5基本结构" class="headerlink" title="HTML5基本结构"></a>HTML5基本结构</h2><p><a href="https://imgtu.com/i/6D6Fcn"><img src="https://s3.ax1x.com/2021/03/15/6D6Fcn.png" alt="6D6Fcn.png"></a></p><h2 id="HTML语言"><a href="#HTML语言" class="headerlink" title="HTML语言"></a>HTML语言</h2><ul><li><p>HTML语言组成</p><ul><li><p>标签</p><ul><li>写在尖角号&lt;&gt;里的第一个单词，叫做标记，也叫做标签，也称作元素；</li></ul></li><li><p>属性</p><ul><li>标记和属性用空格隔开，属性和属性值用等号连接，属性值必须放在双引号内一个标记可以有多个属性，属性和属性之间用空格隔开，属性不分先后顺序</li></ul></li></ul></li><li><p><strong>HTML语法</strong></p><ul><li>常规标记(双标记)：<br>&lt;标记名称 属性1名&#x3D;”属性1值” 属性2名&#x3D;”属性2值” ………… &gt;&lt;&#x2F;标记名&gt;</li><li>空标记（单标记）：&lt;标记名 属性1名&#x3D;”属性1值” &#x2F;&gt;</li></ul></li></ul><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><h2 id="文本标题标签"><a href="#文本标题标签" class="headerlink" title="文本标题标签"></a>文本标题标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文本标题共有6个（h1-h6）</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>(唯一性,放网站LOGO)</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="字体倾斜-加粗标记"><a href="#字体倾斜-加粗标记" class="headerlink" title="字体倾斜&amp;加粗标记"></a>字体倾斜&amp;加粗标记</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文本倾斜:</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line">文本加粗：</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下划线-删除线"><a href="#下划线-删除线" class="headerlink" title="下划线&amp;删除线"></a>下划线&amp;删除线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span> 下划线</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span> 删除线</span><br></pre></td></tr></table></figure><h2 id="换行-水平线"><a href="#换行-水平线" class="headerlink" title="换行&amp;水平线"></a>换行&amp;水平线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="上标-下标"><a href="#上标-下标" class="headerlink" title="上标&amp;下标"></a>上标&amp;下标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="段落标记"><a href="#段落标记" class="headerlink" title="段落标记"></a>段落标记</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符-（-小段文本-）"><a href="#字符-（-小段文本-）" class="headerlink" title="字符 （ 小段文本 ）"></a>字符 （ 小段文本 ）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用转义字符"><a href="#常用转义字符" class="headerlink" title="常用转义字符"></a>常用转义字符</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;nbsp;     空格</span><br><span class="line">&amp;gt;       &gt;右尖括号</span><br><span class="line">&amp;lt;       &lt;左尖括号</span><br><span class="line">&amp;copy;     备案中图标版权 ©</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>（1） 无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">type:规定列表中的列表项目的项目符号的类型</span><br><span class="line">语法：<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">“</span> <span class="attr">a</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">1 数字顺序的有序列表（默认值）（1, 2, 3, 4）。</span><br><span class="line">a 字母顺序的有序列表，小写（a, b, c, d）。</span><br><span class="line">A 字母顺序的有序列表，大写（A,B,C,D)</span><br><span class="line">i 罗马数字，小写（i, ii, iii, iv）。</span><br><span class="line">I 罗马数字，大写（i, ii, iii, iv）。</span><br><span class="line"></span><br><span class="line">start 属性规定有序列表的开始点。(start的属性值必须是数字)</span><br><span class="line">语法：<span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​（3）自定义列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;&lt;/a&gt;</span><br><span class="line">属性：</span><br><span class="line">href = &#x27;url&#x27;</span><br><span class="line">target = &quot;_blank  /表示的是新窗口打开（打开新的标签页）  _self&quot; 默认的，表示的是当前的窗口打开</span><br><span class="line">title = &#x27;文本提示&#x27;</span><br><span class="line"></span><br><span class="line">拓展：</span><br><span class="line">rel = &#x27;nofollow&#x27;; 告诉搜索引擎不要此网页上的链接或不要追踪此特定链接</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">属性：</span><br><span class="line">src = &#x27;url&#x27;;</span><br><span class="line">alt = &#x27; 标签 实例 带有指定替代文本的图像&#x27;  </span><br><span class="line">        title = &#x27;文本提示&#x27;</span><br><span class="line">width = &#x27;&#x27;</span><br><span class="line">height = &#x27;&#x27;</span><br><span class="line">border = &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="图片-title-和-alt区别："><a href="#图片-title-和-alt区别：" class="headerlink" title="图片 title 和 alt区别："></a>图片 title 和 alt区别：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alt:</span><br><span class="line">       1、alt属性是考虑到不支持图像显示或者图像显示被关闭的浏览器的用户，以及视觉障碍的用户和使用屏幕阅读器的用户。当图片不显示的时候，图片的替换文字。</span><br><span class="line">       2、alt属性值得长度必须少于100个英文字符</span><br><span class="line">       3、alt属性是img标签的必须属性，如果没有特别意义的图片，可以写alt=&quot;&quot;</span><br><span class="line">       4、alt属性是搜索引擎判断图片与文字是否相关的重要依据，alt属性添加到img主要的目的才是为了SEO</span><br><span class="line">       </span><br><span class="line">   title:</span><br><span class="line">   1、title属性并不是必须的。</span><br><span class="line">       2、title属性规定元素的额外信息，有视觉效果，当鼠标放到文字或是图片上时有文字显示。</span><br><span class="line">       3、title属性并不作为搜索引擎抓取图片的参考，更多倾向于用户体验的考虑。</span><br></pre></td></tr></table></figure><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（同级）</span><br><span class="line">1)当当前文件与目标文件在同一目录下，直接书写目标文件的文件名+扩展名；</span><br><span class="line">（上级找下级）</span><br><span class="line">2)当当前文件与目标文件所处的文件夹在同一目录下，写法如下：</span><br><span class="line">文件夹名/目标文件全称+扩展名；</span><br><span class="line">（下级找上级）</span><br><span class="line">3)当当前文件所处的文件夹和目标文件在同一目录下，写法如下：</span><br><span class="line">../目标文件文件名+扩展名；</span><br></pre></td></tr></table></figure><h2 id="DIV"><a href="#DIV" class="headerlink" title="DIV"></a>DIV</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释 --&gt;</span>  ctrl+/ </span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><a href="https://imgtu.com/i/6D6i1s"><img src="https://s3.ax1x.com/2021/03/15/6D6i1s.png" alt="6D6i1s.png"></a></p><h2 id="表格基本结构"><a href="#表格基本结构" class="headerlink" title="表格基本结构"></a>表格基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">table 为表格</span></span><br><span class="line"><span class="comment">tr 行</span></span><br><span class="line"><span class="comment">td 列（每一个单元格）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格的html属性"><a href="#表格的html属性" class="headerlink" title="表格的html属性"></a>表格的html属性</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1）width=&quot;表格的宽度&quot;</span><br><span class="line">2）height=&quot;表格的高度&quot;</span><br><span class="line">3）border=&quot;表格的边框&quot;</span><br><span class="line">4）bordercolor=&quot;边框色&quot;</span><br><span class="line">5）cellspacing=&quot;单元格与单元格之间的间距&quot;</span><br><span class="line">6）cellpadding=“单元格与内容之间的距离&quot;</span><br><span class="line">7）align=&quot;表格水平对齐方式&quot;</span><br><span class="line">   取值：left 左边、right 右边、center 居中、</span><br><span class="line">   valign=“垂直对齐” top 上边\bottom 下边\middle 居中</span><br><span class="line">8）合并单元格属性：(td)</span><br><span class="line">  合并列： colspan=“所要合并的单元格的列数&quot;</span><br><span class="line">  合并行： rowspan=“要合并单元格的行数”</span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p><strong>表单的作用：获取用户信息的</strong></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">属性 ： </span><br><span class="line">action = &#x27;接口地址&#x27;</span><br><span class="line">method = &#x27;get / post&#x27;</span><br><span class="line">name = &#x27;表单名称&#x27;</span><br></pre></td></tr></table></figure><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">属性：</span><br><span class="line">type = &#x27;控件类型&#x27;</span><br><span class="line">name：属性标识表单域的名称；</span><br><span class="line">Value：属性定义表单域的默认值，其他属性根据type的不同而有所变化。</span><br><span class="line">maxlength：控制最多输入的字符数，</span><br><span class="line">Size：控制框的宽度（以字符为单位）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1)文本框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span>/&gt;</span></span><br><span class="line">2)密码框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">3)提交按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮内容&quot;</span> /&gt;</span></span><br><span class="line">4)重置按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮内容&quot;</span> /&gt;</span></span><br><span class="line">5)空按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="拓展：post-get"><a href="#拓展：post-get" class="headerlink" title="拓展：post&#x2F;get"></a>拓展：post&#x2F;get</h1><ul><li>从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</li><li>从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</li><li>从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母&#x2F;数字，原样发送；否则，会将其编码为 application&#x2F;x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文&#x2F;其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。</li><li>就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</li><li>从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</li></ul><h1 id="表格补充"><a href="#表格补充" class="headerlink" title="表格补充"></a>表格补充</h1><h2 id="数据行分组"><a href="#数据行分组" class="headerlink" title="数据行分组"></a>数据行分组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据列分组"><a href="#数据列分组" class="headerlink" title="数据列分组"></a>数据列分组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">colgroup</span> <span class="attr">span</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span属性为把几列分为一组--&gt;</span></span><br><span class="line">1）col和colgroup元素会根据从左到右的顺序依次对数据表格进行分组。</span><br><span class="line">2）span属性显示指定相邻几列组成一组，span属性值默认为1，默认时仅定义一列为一组。</span><br><span class="line">3）可以通过给table添加rules=&quot;groups&quot;属性来给分组列添加组分割线。</span><br><span class="line">４）rules=&quot;groups/rows/cols/all/none&quot;    添加组分隔线 加给table标签上</span><br><span class="line">说明：</span><br><span class="line">rows:位于行之间的线条</span><br><span class="line">cols:位于列之间的线条</span><br><span class="line">all：位于行和列之间的线条</span><br><span class="line">none:没有线条</span><br><span class="line">groups:位于行组和列组之间的线条</span><br><span class="line"></span><br><span class="line">注意：虽然col和colgroup具有相同的功能，但是，我们只能使用colgroup元素来设置表格内容部分分割线（rules）应该处于的位置，而col没有这个功能。</span><br></pre></td></tr></table></figure><h2 id="列标题"><a href="#列标题" class="headerlink" title="列标题"></a>列标题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">表格标题位置：caption-side:top/right/bottom/left</span><br><span class="line">说明：定义表格的caption对象放于表格的哪个位置，与caption对象一起使用；</span><br><span class="line">  top为默认值；</span><br><span class="line">  left,right位置只有火狐识别，</span><br><span class="line">  top,bottom IE6以上版本支持，IE6以下        版本不支持其它属性值，只识别top;</span><br></pre></td></tr></table></figure><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p><strong>1、单元格间距：border-spacing:value;</strong></p><p>​说明：单元格间距(该属性必须给table添加) 表示单元格边框之间的距离， 不可取负值</p><p><strong>2、合并相邻单元格边框：border-collapse:separate&#x2F;collapse;</strong></p><p>​说明：合并相邻单元格边框 (该属性必须给table添加) separate(边框分开)默认值； collapse(边框合并)</p><p><strong>3、无内容时单元格的设置：empty-cells:show&#x2F;hide;</strong></p><p>​   说明：定义当单元格无内容时，是否显示该单元格的边框区域；show：显示 ；hide：隐藏；</p><p>*<em>注，不能和</em>***border-collapse：collapse一起使用，否则无效</p><p><strong>4、显示单元格行和列的算法(加快运行的速度)： table-layout:auto&#x2F;fixed;</strong></p><p><a href="https://imgtu.com/i/6DyjnP"><img src="https://s3.ax1x.com/2021/03/15/6DyjnP.png" alt="6DyjnP.png"></a></p><p><a href="https://imgtu.com/i/6D6En0"><img src="https://s3.ax1x.com/2021/03/15/6D6En0.png" alt="6D6En0.png"></a></p><h1 id="表单补充"><a href="#表单补充" class="headerlink" title="表单补充"></a>表单补充</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1）单选按钮组</span><br><span class="line">    &lt;input type=“radio” name=“ral” /&gt;男</span><br><span class="line">    &lt;input type=“radio” name=“ral”</span><br><span class="line">    checked=“checked”/&gt;(默认选中)女</span><br><span class="line">2）复选框组</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; disabled=&quot;disabled&quot; /&gt;</span><br><span class="line">     *  disabled=&quot;disabled&quot; (禁用)</span><br><span class="line">     *  checked=&quot;checked&quot;   (默认选中)</span><br><span class="line">3）下拉列表（菜单）内联块元素：</span><br><span class="line">&lt;select &gt;</span><br><span class="line">   &lt;option&gt;下拉选项1&lt;/option&gt;</span><br><span class="line">   &lt;option&gt;下拉选项2&lt;/option&gt;</span><br><span class="line">   …………</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">表示下拉列表，name属性不是必须的</span><br><span class="line">默认选择项用selected属性；</span><br><span class="line">4）表单域多行文本定义（内联块）：</span><br><span class="line">语法:&lt;textarea name=&quot;&quot;  cols=&quot;&quot;  rows=&quot;&quot; &gt;&lt;/textarea&gt;</span><br><span class="line">多行文本。rows属性和cols属性用来设置文本输入窗口的高度和宽度，单位是字符。</span><br><span class="line">阻止浏览器对窗口的拖动设置:&#123;resize:none;&#125;（css属性）</span><br><span class="line">5)上传文件：</span><br><span class="line">语法：&lt;input type=&quot;file&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="表单标签-1"><a href="#表单标签-1" class="headerlink" title="表单标签"></a>表单标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1）表单字段集</span><br><span class="line">语法：<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">说明：相当于一个方框，在字段集中可以包含文本和其他元素。该元素用于对表单中的元素进行分组并在文档中区别标出文本。fieldset元素可以嵌套，在其内部可以在设置多个fieldset对象。</span><br><span class="line"></span><br><span class="line">2）字段集标题：</span><br><span class="line">语法：<span class="tag">&lt;<span class="name">legend</span> <span class="attr">align</span>=<span class="string">&quot;left/center/right/justify&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">说明：legend元素可以在fieldset对象绘制的方框内插入一个标题。legend元素必须是fieldset内的唯一个元素。</span><br><span class="line">3)提示信息标签：</span><br><span class="line">语法：<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;绑定控件id名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">tpye</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;绑定控件id名&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">说明：label元素用来定义标签，为页面上的其他元素指定提示信息。要将label元素绑定到其他的控件上，可以将label元素的for属性设置为与该控件的id属性值相同。</span><br><span class="line"></span><br><span class="line">4)定义选项组：</span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;组名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">用于组合选项。当使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易。</span><br><span class="line">例如：</span><br><span class="line">         <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;西安&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>雁塔区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>灞桥区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>高新区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6D6VBV"><img src="https://s3.ax1x.com/2021/03/15/6D6VBV.png" alt="6D6VBV.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
