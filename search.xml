<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>koa2+mongodb搭建后端api项目</title>
      <link href="/posts/80d480ac.html"/>
      <url>/posts/80d480ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用koa2-mongodb搭建后端api项目"><a href="#使用koa2-mongodb搭建后端api项目" class="headerlink" title="使用koa2+mongodb搭建后端api项目"></a>使用koa2+mongodb搭建后端api项目</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">自行安装 node + npm</span><br></pre></td></tr></table></figure><h2 id="二、安装脚手架并创建项目"><a href="#二、安装脚手架并创建项目" class="headerlink" title="二、安装脚手架并创建项目"></a>二、安装脚手架并创建项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g koa-generator</span><br><span class="line">koa2 &lt;pro_name&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122113926.png"></p><h2 id="三、安装依赖并启动项目"><a href="#三、安装依赖并启动项目" class="headerlink" title="三、安装依赖并启动项目"></a>三、安装依赖并启动项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm i koa2-cors mongoose (跨域还有操作数据库的库)</span><br><span class="line">npm dev (启动命令自行查看package.json)</span><br></pre></td></tr></table></figure><h2 id="四、数据库操作-模块化开发"><a href="#四、数据库操作-模块化开发" class="headerlink" title="四、数据库操作(模块化开发)"></a>四、数据库操作(模块化开发)</h2><h3 id="脚手架生成的初始文件目录结构"><a href="#脚手架生成的初始文件目录结构" class="headerlink" title="脚手架生成的初始文件目录结构"></a>脚手架生成的初始文件目录结构</h3><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122114218.png"></p><h3 id="创建mongodb文件夹"><a href="#创建mongodb文件夹" class="headerlink" title="创建mongodb文件夹"></a>创建mongodb文件夹</h3><h4 id="mongodb文件夹结构"><a href="#mongodb文件夹结构" class="headerlink" title="mongodb文件夹结构"></a>mongodb文件夹结构</h4><p><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20211122114700.png"></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">controller文件夹: 存放对数据库增删改查的函数的文件,文件名对应数据库中的一个表(集合);</span><br><span class="line">models文件夹: 存放由schemas生成的表,文件名同理;</span><br><span class="line">schemas文件夹: 存放schemas文件</span><br></pre></td></tr></table></figure><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><ol><li>先创建mongodb/index.js文件,再在app.js中导入,导入时注意模块导入顺序<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/index.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span> 连接数据库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">kenis</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://192.168.43.158:27017/car&quot;</span>);</span><br><span class="line">mongoose.<span class="property">Promise</span> = <span class="variable language_">global</span>.<span class="property">Promise</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听打开成功还是失败</span></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 链接失败</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&quot;链接失败&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;connected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 链接成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;链接成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;disconnected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 断开链接</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;断开链接&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * app.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="comment">// const views = require(&quot;koa-views&quot;);</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&quot;koa-json&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> onerror = <span class="built_in">require</span>(<span class="string">&quot;koa-onerror&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&quot;koa-logger&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&quot;./mongodb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line"><span class="title function_">onerror</span>(app);</span><br><span class="line"></span><br><span class="line"><span class="comment">// middlewares</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">bodyparser</span>(&#123;</span><br><span class="line">    <span class="attr">enableTypes</span>: [<span class="string">&quot;json&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;text&quot;</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>)(__dirname + <span class="string">&quot;/public&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域处理</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa2-cors&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图配置</span></span><br><span class="line"><span class="comment">// app.use(</span></span><br><span class="line"><span class="comment">//   views(__dirname + &quot;/views&quot;, &#123;</span></span><br><span class="line"><span class="comment">//     extension: &quot;pug&quot;,</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="keyword">new</span> <span class="title class_">Date</span>() - start;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router 修改路由的注册方式，通过遍历routes文件夹读取文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;./routes&quot;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> api = <span class="built_in">require</span>(<span class="string">`./routes/<span class="subst">$&#123;route&#125;</span>`</span>);</span><br><span class="line">  app.<span class="title function_">use</span>(api.<span class="title function_">routes</span>(), api.<span class="title function_">allowedMethods</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error-handling</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;server error&quot;</span>, err, ctx);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库集合的模板类型和模型<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/schemas/car.js</span></span><br><span class="line"><span class="comment"> * 创建模板类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sportsCarSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="comment">// 说明集合中要存储的字段，字段类型</span></span><br><span class="line">  <span class="attr">name_zh_CN</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">name_en_US</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; sportsCarSchema &#125;;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/models/car.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; sportsCarSchema &#125; = <span class="built_in">require</span>(<span class="string">&quot;../schemas/car&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SportsCarModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;SportsCar&quot;</span>, sportsCarSchema);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="title class_">SportsCarModel</span> &#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建操作数据库的控制器文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongodb/controller/car.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SportsCarModel</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;../mongodb/models/car&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">findAll</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">find</span>(&#123;&#125;);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;查找成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;查找失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">deleteOne</span>(ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">create</span>(ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;添加成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;添加失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id修改数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateOne</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="number">0</span>; <span class="comment">// 状态码 0:成功 -1:失败</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>; <span class="comment">// 返回内容</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, update &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">let</span> doc = <span class="keyword">await</span> <span class="title class_">SportsCarModel</span>.<span class="title function_">findByIdAndUpdate</span>(id, update);</span><br><span class="line">    code = <span class="number">0</span>;</span><br><span class="line">    result = <span class="string">&quot;修改成功&quot;</span>;</span><br><span class="line">    data = doc;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    code = -<span class="number">1</span>;</span><br><span class="line">    result = <span class="string">&quot;修改失败&quot;</span>;</span><br><span class="line">    data = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    code,</span><br><span class="line">    result,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; findAll, delOne, addOne, updateOne &#125;;</span><br></pre></td></tr></table></figure></li><li><p>创建路由文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * routes/cars.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  findAll,</span><br><span class="line">  delOne,</span><br><span class="line">  addOne,</span><br><span class="line">  updateOne,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;../mongodb/controller/car&quot;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">prefix</span>(<span class="string">&quot;/cars&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/list&quot;</span>, findAll);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/del&quot;</span>, delOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>, addOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/update&quot;</span>, updateOne);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+selenium webdriver自动化测试</title>
      <link href="/posts/730667ac.html"/>
      <url>/posts/730667ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装selenium和浏览器驱动"><a href="#安装selenium和浏览器驱动" class="headerlink" title="安装selenium和浏览器驱动"></a>安装selenium和浏览器驱动</h2><p><code>pip install selenium</code></p><p>Linux:<br>下载各浏览器驱动然后解压到<code>/usr/bin/</code>下即可或者配置环境变量<br>eg:<code>/usr/bin/chromedriver</code></p><h2 id="各浏览器驱动下载地址-根据浏览器的版本下载对应驱动"><a href="#各浏览器驱动下载地址-根据浏览器的版本下载对应驱动" class="headerlink" title="各浏览器驱动下载地址(根据浏览器的版本下载对应驱动)"></a>各浏览器驱动下载地址(根据浏览器的版本下载对应驱动)</h2><ul><li><a href="http://npm.taobao.org/mirrors/chromedriver/">chrome:http://npm.taobao.org/mirrors/chromedriver/</a></li><li><a href="http://npm.taobao.org/mirrors/geckodriver/">firefox:http://npm.taobao.org/mirrors/geckodriver/</a></li></ul><h2 id="selenium使用"><a href="#selenium使用" class="headerlink" title="selenium使用"></a>selenium使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用chrome浏览器</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开浏览器并跳转到百度</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 找到搜索框输入selenium</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="comment"># 10秒后关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron</title>
      <link href="/posts/ccd37491.html"/>
      <url>/posts/ccd37491.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>设置镜像 <code>npm config set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</code></li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="electron-packager"><a href="#electron-packager" class="headerlink" title="electron-packager"></a>electron-packager</h3><p>打包全平台 <code>electron-packager ./ --all</code></p><h3 id="nativefier"><a href="#nativefier" class="headerlink" title="nativefier"></a>nativefier</h3><p>介绍: 基于electron的一键封装url为桌面应用的工具<br>使用: <code>nativefier url</code><br>例子: <code>nativefier https://www.baidu.com</code></p><h2 id="替代品-tauri"><a href="#替代品-tauri" class="headerlink" title="替代品 tauri"></a>替代品 <strong>tauri</strong></h2><p><a href="https://www.cnblogs.com/Grewer/p/12789261.html">参考</a><br><a href="https://tauri.studio/en/docs/usage/development/integration/">官网</a></p><ul><li>官网说tauri原始程序打包后比electron小140多MB</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> 软件使用和配置 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro安装后必须做的事情</title>
      <link href="/posts/15bbee35.html"/>
      <url>/posts/15bbee35.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h2><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><h2 id="添加-archlinuxcn-源-antergos源-arch4edu源"><a href="#添加-archlinuxcn-源-antergos源-arch4edu源" class="headerlink" title="添加 archlinuxcn 源,antergos源,arch4edu源"></a>添加 archlinuxcn 源,antergos源,arch4edu源</h2><ul><li><p>编辑 <code>/etc/pacman.conf</code> 添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">#中科大源</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class="line">#清华源</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br><span class="line"></span><br><span class="line">[antergos]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/antergos/$repo/$arch</span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch</span><br></pre></td></tr></table></figure></li><li><p>防止签名错误</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -g</span><br></pre></td></tr></table></figure><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul><li><p><code>sudo pacman -S base-devel</code></p></li><li><p>包管理工具  <strong>yay</strong>  <code>sudo pacman -S yay</code></p></li><li><p>显示有关相应系统的简要信息工具 <strong>neofetch</strong> <code>yay -S neofetch</code></p></li><li><p>谷歌浏览器 <code>yay -S google-chrome</code></p></li><li><p><strong>neovim</strong> <code>yay -S neovim</code></p></li><li><p>中文输入法 <strong>fcitx-im</strong> <code>yay -S fcitx-im</code></p><ul><li><p>设置 IM 环境变量</p></li><li><p><code>nvim ~/.pam_environment</code> 添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>重启电脑</li><li>安装 fcitx 的GUI配置工具 <code>yay -S kcm-fcitx fcitx-configtool</code></li><li>Fcitx 自带剪贴板，其快捷键为 <code>Ctrl + ;</code>, 小小功能拯救世界。</li><li>云拼音 <strong>fcitx-cloudpinyin</strong> <code>yay -S fcitx-cloudpinyin</code><ul><li>安装好后重启fcitx,进入配置切换云拼音来源为百度，默认是Google</li></ul></li><li>终端文件管理器 <strong>ranger</strong> <code>yay -S ranger</code></li><li>windows模拟器 <strong>wine</strong> <code>yay -S wine wine-gecko wine-mono</code></li><li><strong>ocs-url</strong> <code>yay -S ocs-url</code></li><li><strong>nodejs</strong> <code>yay -S nodejs npm</code></li><li>deb包转换工具 <strong>debtap</strong> <code>yay -S debtap</code></li><li><strong>dmenu</strong> <strong>rofi</strong> <strong>feh</strong> <strong>picom</strong> <strong>w3m</strong> <strong>python-pip</strong> <strong>bat</strong></li><li><strong>deepin-wine-qq</strong> 安装好后是一个安装包，安装包安装好后重启系统或者等一会才能打开，不然会报错，报错就重启系统就行了</li><li><strong>ffmpegthumbnailer</strong></li><li><strong>mpv</strong> <strong>ttf-font-awesome</strong> <strong>ttf-font-icons</strong></li><li><strong>xorg-xrandr</strong></li><li><strong>gvim</strong></li><li><code>pip install quickswitch-i3 i3-py</code> 在用demu的时候使用的脚本</li><li><code>yay -S wqy-microhei wqy-bitmapfont wqy-zenhei wqy-microhei-li</code></li><li><code>yay -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</code></li></ul><h2 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h2><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><ul><li><code>git clone https://gitee.com/huang_jian_hua/oh-my-zsh.git</code></li><li>运行 <code>oh-my-zsh/tools/install.sh</code></li><li>安装完毕删除 <strong>oh-my-zsh</strong> 文件夹</li><li>使用<strong>konsole</strong>的需手动更改bash为zsh</li></ul><h3 id="安装语法高亮和自动建议插件"><a href="#安装语法高亮和自动建议插件" class="headerlink" title="安装语法高亮和自动建议插件"></a>安装语法高亮和自动建议插件</h3><ul><li><p>oh-my-zsh插件安装方法</p><ol><li>将插件放到<code>~/.oh-my-zsh/custom/plugins/</code>下</li><li>在配置文件<code>~/.zshrc</code>里添加插件名称</li></ol></li><li><p>进入 <code>~/.oh-my-zsh/custom/plugins/</code></p></li><li><p>自动建议 <code>git clone https://gitee.com/huang_jian_hua/zsh-autosuggestions.git</code></p></li><li><p>语法高亮 <code>git clone https://gitee.com/huang_jian_hua/zsh-syntax-highlighting.git</code></p></li><li><p>配置文件 <strong>71行</strong> 修改为<code>plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</code></p></li><li><p>重启终端</p></li></ul><h3 id="配置zsh主题"><a href="#配置zsh主题" class="headerlink" title="配置zsh主题"></a>配置zsh主题</h3><ul><li><code>.zshrc</code> 文件第<strong>11</strong>行 <code>ZSH_THEME=&quot;robbyrussell&quot;</code></li><li>修改成<strong>random</strong>为随机主题</li><li>可填参数在<code>~/.oh-my-zsh/themes</code>文件夹里面可自行查看</li><li>自定义的主题应该放在<code>~/.oh-my-zsh/custom/themes</code></li></ul><h2 id="配置ranger"><a href="#配置ranger" class="headerlink" title="配置ranger"></a>配置ranger</h2><ul><li>生成配置文件<ul><li><code>ranger --copy-config=all</code></li></ul></li><li>安装文件图标<ul><li>终端字体需换成Nerd Font字体</li><li>运行以下两句命令<ul><li><code>git clone https://gitee.com/huang_jian_hua/ranger_devicons.git ~/.config/ranger/plugins/ranger_devicons</code></li><li><code>echo &quot;default_linemode devicons&quot; &gt;&gt; $HOME/.config/ranger/rc.conf</code></li></ul></li><li>重启ranger</li></ul></li><li>修改配置文件 <strong>rc.conf</strong> 和 <strong>scope.sh</strong></li></ul><h2 id="美化折腾"><a href="#美化折腾" class="headerlink" title="美化折腾"></a>美化折腾</h2><h3 id="动态壁纸"><a href="#动态壁纸" class="headerlink" title="动态壁纸"></a>动态壁纸</h3><ol><li><p>右键桌面<br> <a href="https://imgtu.com/i/gYPh0f"><img src="https://z3.ax1x.com/2021/05/09/gYPh0f.png" alt="gYPh0f.png"></a></p></li><li><p>获取新插件<br> <a href="https://imgtu.com/i/gYPRXt"><img src="https://z3.ax1x.com/2021/05/09/gYPRXt.png" alt="gYPRXt.png"></a></p></li><li><p>安装插件<br> <a href="https://imgtu.com/i/gYPfnP"><img src="https://z3.ax1x.com/2021/05/09/gYPfnP.png" alt="gYPfnP.png"></a></p></li><li><p>选择壁纸类型<br> <a href="https://imgtu.com/i/gYP26I"><img src="https://z3.ax1x.com/2021/05/09/gYP26I.png" alt="gYP26I.png"></a></p></li><li><p>选择视频文件<br> <a href="https://imgtu.com/i/gYPg1A"><img src="https://z3.ax1x.com/2021/05/09/gYPg1A.png" alt="gYPg1A.png"></a></p></li></ol><h2 id="如果是在vmware的话-安装open-vm-tools"><a href="#如果是在vmware的话-安装open-vm-tools" class="headerlink" title="如果是在vmware的话,安装open-vm-tools"></a>如果是在vmware的话,安装open-vm-tools</h2><p><code>yay -S open-vm-tools</code><br><code>systemctl enable vmtoolsd.service</code><br><code>systemctl start vmtoolsd.service</code></p>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7/10 qutebrowser安装和使用</title>
      <link href="/posts/c8833c04.html"/>
      <url>/posts/c8833c04.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>使用 powershell 的包管理工具安装<br>  <code>Install-Package qutebrowser</code></li></ul><ul><li><p>使用 Scoop 安装</p><p>  <code>scoop bucket add extras</code><br>  <code>scoop install qutebrowser</code></p></li></ul><ul><li><p>使用 Chocolatey 安装</p><p>  <code>choco install qutebrowser</code></p></li></ul><ul><li><p>手动安装</p><ol><li>安装python3.6以上的版本</li><li>更换pip源</li><li>克隆到本地:<code>git clone https://github.com/qutebrowser/qutebrowser.git</code></li><li>进入项目根目录:<code>cd qutebrowser</code></li><li>安装生成文档的工具:<code>pip install asciidoc</code></li><li><code>python3 scripts/mkvenv.py</code></li></ol></li><li><p>注意</p><ul><li>除了<code>手动安装</code>其他方式安装的都是基于<code>python3.9</code>版本的</li><li>所以只有win7需要手动安装</li><li>手动安装的启动程序在项目根目录下的<code>.venv\Scripts</code>目录中有个<code>qutebrowser.exe</code></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p><a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100106.jpg"><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100106.jpg" alt="20210530094550.png"></a></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li>进入设置界面步骤:按下<code>o</code>,输入<code>qute://settings</code>，回车</li><li>修改首页和搜索引擎(eg:不同搜索引擎url格式不同)<ul><li>首页<br>   <a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png"><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100220.png" alt="20210530094728.png"></a></li><li>搜索引擎<br>   <a href="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100105.jpg"><img src="https://gitee.com/huang_jian_hua/blog-images-bed/raw/master/20210530100105.jpg" alt="20210530094816.png"></a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QuteBrowser </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window安装ctags</title>
      <link href="/posts/f9fa4d10.html"/>
      <url>/posts/f9fa4d10.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用scoop安装"><a href="#使用scoop安装" class="headerlink" title="使用scoop安装"></a>使用scoop安装</h2><p><code>scoop install ctags</code></p><h2 id="下载文件安装"><a href="#下载文件安装" class="headerlink" title="下载文件安装"></a>下载文件安装</h2><ul><li>官网：<code>http://ctags.sourceforge.net/</code></li><li>下载对应系统的压缩包</li><li>解压并把解压文件夹加入环境变量</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>在需要使用的文件夹里运行<code>ctags -R</code>生成索引文件</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctags </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署code-server</title>
      <link href="/posts/ebb73e0.html"/>
      <url>/posts/ebb73e0.html</url>
      
        <content type="html"><![CDATA[<h2 id="服务器放行8080端口"><a href="#服务器放行8080端口" class="headerlink" title="服务器放行8080端口"></a>服务器放行8080端口</h2><h2 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><h2 id="先启动一次，让他生成配置文件"><a href="#先启动一次，让他生成配置文件" class="headerlink" title="先启动一次，让他生成配置文件"></a>先启动一次，让他生成配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code-server --bind-addr=0.0.0.0:8080</span><br></pre></td></tr></table></figure><h2 id="修改配置文件-config-code-server-config-yaml"><a href="#修改配置文件-config-code-server-config-yaml" class="headerlink" title="修改配置文件**~/.config/code-server/config.yaml**"></a>修改配置文件**~/.config/code-server/config.yaml**</h2><ul><li>bind-addr为0.0.0.0才能远程访问</li><li>password设置密码<blockquote><p>修改后</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&gt;bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="string">&gt;auth:</span> <span class="string">password</span></span><br><span class="line"><span class="string">&gt;password:</span> <span class="number">123456</span></span><br><span class="line"><span class="string">&gt;cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="配置系统管理进程"><a href="#配置系统管理进程" class="headerlink" title="配置系统管理进程"></a>配置系统管理进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status code-server@<span class="variable">$USER</span> <span class="comment"># 查看 code-server 进程状态</span></span><br><span class="line">systemctl start code-server@<span class="variable">$USER</span>    <span class="comment"># 启动 code-server 进程</span></span><br><span class="line">systemctl stop code-server@<span class="variable">$USER</span>    <span class="comment"># 停止 code-server 进程</span></span><br><span class="line">systemctl restart code-server@<span class="variable">$USER</span>    <span class="comment"># 重启 code-server 进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> code-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aliyun+Ubuntu20.04+xfce4+vnc+xdrp</title>
      <link href="/posts/6aafa0a1.html"/>
      <url>/posts/6aafa0a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云安全组添加端口5901-3389"><a href="#阿里云安全组添加端口5901-3389" class="headerlink" title="阿里云安全组添加端口5901,3389"></a>阿里云安全组添加端口5901,3389</h1><h1 id="apt-update-amp-amp-apt-upgrade-–fix-missing"><a href="#apt-update-amp-amp-apt-upgrade-–fix-missing" class="headerlink" title="apt update &amp;&amp; apt upgrade –fix-missing"></a>apt update &amp;&amp; apt upgrade –fix-missing</h1><h1 id="apt-install-xfce4-xfce4-terminal"><a href="#apt-install-xfce4-xfce4-terminal" class="headerlink" title="apt install xfce4 xfce4-terminal"></a>apt install xfce4 xfce4-terminal</h1><h1 id="apt-install-tightvncserver-xdrp"><a href="#apt-install-tightvncserver-xdrp" class="headerlink" title="apt install tightvncserver xdrp"></a>apt install tightvncserver xdrp</h1><h1 id="vncserver"><a href="#vncserver" class="headerlink" title="vncserver"></a>vncserver</h1><h1 id="此时可以连接但是是灰色的"><a href="#此时可以连接但是是灰色的" class="headerlink" title="此时可以连接但是是灰色的"></a>此时可以连接但是是灰色的</h1><h1 id="vncserver-kill-1"><a href="#vncserver-kill-1" class="headerlink" title="vncserver -kill :1"></a>vncserver -kill :1</h1><h1 id="mv-vnc-xstartup-vnc-xstartup-bak"><a href="#mv-vnc-xstartup-vnc-xstartup-bak" class="headerlink" title="mv ~/.vnc/xstartup ~/.vnc/xstartup.bak"></a>mv ~/.vnc/xstartup ~/.vnc/xstartup.bak</h1><h1 id="vim-vnc-xstartup"><a href="#vim-vnc-xstartup" class="headerlink" title="vim ~/.vnc/xstartup"></a>vim ~/.vnc/xstartup</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></span><br><span class="line"><span class="comment"># unset SESSION_MANAGER</span></span><br><span class="line"><span class="comment"># unset DBUS_SESSION_BUS_ADDRESS </span></span><br><span class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></span><br><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</span><br><span class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</span><br><span class="line">xsetroot -solid grey</span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">x-terminal-emulator -geometry 80x24+10+10 -<span class="built_in">ls</span> -title <span class="string">&quot;<span class="variable">$VNCDESKTOP</span> Desktop&quot;</span> &amp;</span><br><span class="line"><span class="comment"># x-window-manager &amp;</span></span><br><span class="line">x-session-manager &amp; </span><br><span class="line">xfdesktop &amp; xfce4-panel &amp;     </span><br><span class="line">xfce4-menu-plugin &amp;     </span><br><span class="line">xfsettingsd &amp;     </span><br><span class="line">xfconfd &amp;     </span><br><span class="line">xfwm4 &amp;</span><br></pre></td></tr></table></figure><h1 id="修改文件权限（无论什么用户都得修改）"><a href="#修改文件权限（无论什么用户都得修改）" class="headerlink" title="修改文件权限（无论什么用户都得修改）"></a>修改文件权限（无论什么用户都得修改）</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/.vnc/xstartup</span><br></pre></td></tr></table></figure><h1 id="重新运行vncserver就可以使用vncviewer连接vnc了"><a href="#重新运行vncserver就可以使用vncviewer连接vnc了" class="headerlink" title="重新运行vncserver就可以使用vncviewer连接vnc了"></a>重新运行<code>vncserver</code>就可以使用vncviewer连接vnc了</h1><h1 id="配置xdrp"><a href="#配置xdrp" class="headerlink" title="配置xdrp"></a>配置xdrp</h1><ul><li>echo “xfce4-session” &gt;~/.xsession</li><li>在/etc/xrdp/startwm.sh开头插入xfce4-session</li><li>sudo systemctl restart xrdp</li><li>使用win10自带远程桌面连接</li></ul><h1 id="配置vnc默认分辨率"><a href="#配置vnc默认分辨率" class="headerlink" title="配置vnc默认分辨率"></a>配置vnc默认分辨率</h1><ul><li>修改/usr/bin/vncserver里的$geometry</li><li>$geometry = “1920x1080”;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件使用和配置 </category>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNC </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-questions</title>
      <link href="/posts/63b082fb.html"/>
      <url>/posts/63b082fb.html</url>
      
        <content type="html"><![CDATA[<p>从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！</p><p>答案在问题下方的折叠部分，点击即可展开问题。祝你好运 </p><hr><h2 id="1-输出是什么？"><a href="#1-输出是什么？" class="headerlink" title="1. 输出是什么？"></a>1. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>Lydia</code> 和 <code>undefined</code></li><li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> 和 <code>21</code></li><li>D: <code>undefined</code> 和 <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><ul><li><p>在函数内部，我们首先通过 var 关键字声明了 name 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 undefined。因为当我们打印 name 变量时还没有执行到定义变量的位置，因此变量的值保持为 undefined。</p></li><li><p>通过 let 和 const 关键字声明的变量也会提升，但是和 var 不同，它们不会被初始化。在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 ReferenceError 错误。</p></li></ul></div></div><hr><h2 id="2-输出是什么？"><a href="#2-输出是什么？" class="headerlink" title="2. 输出是什么？"></a>2. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0 1 2</code> 和 <code>0 1 2</code></li><li>B: <code>0 1 2</code> 和 <code>3 3 3</code></li><li>C: <code>3 3 3</code> 和 <code>0 1 2</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><ul><li><p>由于 JavaScript 的事件循环，setTimeout 回调会在遍历结束后才执行。因为在第一个遍历中遍历 i 是通过 var 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我们通过一元操作符 ++ 来每次递增 i 的值。当 setTimeout 回调执行的时候，i 的值等于 3。</p></li><li><p>在第二个遍历中，遍历 i 是通过 let 关键字声明的：通过 let 和 const 关键字声明的变量是拥有块级作用域（指的是任何在 {} 中的内容）。在每次的遍历过程中，i 都有一个新值，并且每个值都在循环内的作用域中。</p></li></ul></div></div><hr><h2 id="3-输出是什么？"><a href="#3-输出是什么？" class="headerlink" title="3. 输出是什么？"></a>3. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">diameter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">perimeter</span>: <span class="function">() =&gt;</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shape.<span class="title function_">diameter</span>()</span><br><span class="line">shape.<span class="title function_">perimeter</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>注意 <code>diameter</code> 的值是一个常规函数，但是 <code>perimeter</code> 的值是一个箭头函数。</p><p>对于箭头函数，<code>this</code> 关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。这意味着当我们调用 <code>perimeter</code> 时，<code>this</code> 不是指向 <code>shape</code> 对象，而是它的周围作用域（在例子中是 <code>window</code>）。</p><p>在 <code>window</code> 中没有 <code>radius</code> 这个属性，因此返回 <code>undefined</code>。</p></div></div><hr><h2 id="4-输出是什么？"><a href="#4-输出是什么？" class="headerlink" title="4. 输出是什么？"></a>4. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="literal">true</span>;</span><br><span class="line">!<span class="string">&quot;Lydia&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>一元操作符加号尝试将 bool 转为 number。<code>true</code> 转换为 number 的话为 <code>1</code>，<code>false</code> 为 <code>0</code>。</p><p>字符串 <code>&#39;Lydia&#39;</code> 是一个真值，真值取反那么就返回 <code>false</code>。</p></div></div><hr><h2 id="5-哪一个是正确的？"><a href="#5-哪一个是正确的？" class="headerlink" title="5. 哪一个是正确的？"></a>5. 哪一个是正确的？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mickey&#x27;</span>,</span><br><span class="line">  <span class="attr">small</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>mouse.bird.size</code>是无效的</li><li>B: <code>mouse[bird.size]</code>是无效的</li><li>C: <code>mouse[bird[&quot;size&quot;]]</code>是无效的</li><li>D: 以上三个选项都是有效的</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在 JavaScript 中，所有对象的 keys 都是字符串（除非对象是 Symbol）。尽管我们可能不会定义它们为字符串，但它们在底层总会被转换为字符串。</p><p>当我们使用括号语法时（[]），JavaScript 会解释（或者 unboxes）语句。它首先看到第一个开始括号 <code>[</code> 并继续前进直到找到结束括号 <code>]</code>。只有这样，它才会计算语句的值。</p><p><code>mouse[bird.size]</code>：首先计算 <code>bird.size</code>，这会得到 <code>small</code>。<code>mouse[&quot;small&quot;]</code> 返回 <code>true</code>。</p><p>然后使用点语法的话，上面这一切都不会发生。<code>mouse</code> 没有 <code>bird</code> 这个 key，这也就意味着 <code>mouse.bird</code> 是 <code>undefined</code>。然后当我们使用点语法 <code>mouse.bird.size</code> 时，因为 <code>mouse.bird</code> 是 <code>undefined</code>，这也就变成了 <code>undefined.size</code>。这个行为是无效的，并且会抛出一个错误类似 <code>Cannot read property &quot;size&quot; of undefined</code>。</p></div></div><hr><h2 id="6-输出是什么？"><a href="#6-输出是什么？" class="headerlink" title="6. 输出是什么？"></a>6. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hey!&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> d</span><br><span class="line"></span><br><span class="line">d = c</span><br><span class="line">c.<span class="property">greeting</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">greeting</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在 JavaScript 中，当设置两个对象彼此相等时，它们会通过<em>引用</em>进行交互。</p><p>首先，变量 <code>c</code> 的值是一个对象。接下来，我们给 <code>d</code> 分配了一个和 <code>c</code> 对象相同的引用。</p><img src="https://i.imgur.com/ko5k0fs.png" width="200"><p>因此当我们改变其中一个对象时，其实是改变了所有的对象。</p></div></div><hr><h2 id="7-输出是什么？"><a href="#7-输出是什么？" class="headerlink" title="7. 输出是什么？"></a>7. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === c)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>new Number()</code> 是一个内建的函数构造器。虽然它看着像是一个 number，但它实际上并不是一个真实的 number：它有一堆额外的功能并且它是一个对象。</p><p>当我们使用 <code>==</code> 操作符时，它只会检查两者是否拥有相同的<em>值</em>。因为它们的值都是 <code>3</code>，因此返回 <code>true</code>。</p><p>然后，当我们使用 <code>===</code> 操作符时，两者的值以及<em>类型</em>都应该是相同的。<code>new Number()</code> 是一个对象而不是 number，因此返回 <code>false</code>。</p></div></div><hr><h2 id="8-输出是什么？"><a href="#8-输出是什么？" class="headerlink" title="8. 输出是什么？"></a>8. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chameleon</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">colorChange</span>(<span class="params">newColor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">newColor</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; newColor = <span class="string">&#x27;green&#x27;</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freddie = <span class="keyword">new</span> <span class="title class_">Chameleon</span>(&#123; <span class="attr">newColor</span>: <span class="string">&#x27;purple&#x27;</span> &#125;)</span><br><span class="line">freddie.<span class="title function_">colorChange</span>(<span class="string">&#x27;orange&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>colorChange</code> 是一个静态方法。静态方法被设计为只能被创建它们的构造器使用（也就是 <code>Chameleon</code>），并且不能传递给实例。因为 <code>freddie</code> 是一个实例，静态方法不能被实例使用，因此抛出了 <code>TypeError</code> 错误。</p></div></div><hr><h2 id="9-输出是什么？"><a href="#9-输出是什么？" class="headerlink" title="9. 输出是什么？"></a>9. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting</span><br><span class="line">greetign = &#123;&#125; <span class="comment">// Typo!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greetign)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;&#125;</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 <code>greeting</code> 写错成 <code>greetign</code> 时，JS 解释器实际在上浏览器中将它视为 <code>global.greetign = {}</code> （或者 <code>window.greetign = {}</code>）。</p><p>为了避免这个为题，我们可以使用 `”use strict”。这能确保当你声明变量时必须赋值。</p></div></div><hr><h2 id="10-当我们这么做时，会发生什么？"><a href="#10-当我们这么做时，会发生什么？" class="headerlink" title="10. 当我们这么做时，会发生什么？"></a>10. 当我们这么做时，会发生什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.<span class="property">animal</span> = <span class="string">&#x27;dog&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>A: 正常运行!</li><li>B: <code>SyntaxError</code>. 你不能通过这种方式给函数增加属性。</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>这在 JavaScript 中是可以的，因为函数是对象！（除了基本类型之外其他都是对象）</p><p>函数是一个特殊的对象。你写的这个代码其实不是一个实际的函数。函数是一个拥有属性的对象，并且属性也可被调用。</p></div></div><hr><h2 id="11-输出是什么？"><a href="#11-输出是什么？" class="headerlink" title="11. 输出是什么？"></a>11. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lydia&quot;</span>, <span class="string">&quot;Hallie&quot;</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="title function_">getFullName</span>());</span><br></pre></td></tr></table></figure><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才会使 <code>member.getFullName()</code> 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 <code>Person</code> 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！</p></div></div><hr><h2 id="12-输出是什么？"><a href="#12-输出是什么？" class="headerlink" title="12. 输出是什么？"></a>12. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lydia&#x27;</span>, <span class="string">&#x27;Hallie&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sarah = <span class="title class_">Person</span>(<span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lydia)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sarah)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>undefined</code></li><li>B: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>Person &#123;firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;&#125;</code></li><li>C: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>&#123;&#125;</code></li><li>D:<code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>对于 <code>sarah</code>，我们没有使用 <code>new</code> 关键字。当使用 <code>new</code> 时，<code>this</code> 引用我们创建的空对象。当未使用 <code>new</code> 时，<code>this</code> 引用的是<strong>全局对象</strong>（global object）。</p><p>我们说 <code>this.firstName</code> 等于 <code>&quot;Sarah&quot;</code>，并且 <code>this.lastName</code> 等于 <code>&quot;Smith&quot;</code>。实际上我们做的是，定义了 <code>global.firstName = &#39;Sarah&#39;</code> 和 <code>global.lastName = &#39;Smith&#39;</code>。而 <code>sarah</code> 本身是 <code>undefined</code>。</p></div></div><hr><h2 id="13-事件传播的三个阶段是什么？"><a href="#13-事件传播的三个阶段是什么？" class="headerlink" title="13. 事件传播的三个阶段是什么？"></a>13. 事件传播的三个阶段是什么？</h2><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在<strong>捕获</strong>（capturing）阶段中，事件从祖先元素向下传播到目标元素。当事件达到<strong>目标</strong>（target）元素后，<strong>冒泡</strong>（bubbling）才开始。</p></div></div><hr><h2 id="14-所有对象都有原型。"><a href="#14-所有对象都有原型。" class="headerlink" title="14. 所有对象都有原型。"></a>14. 所有对象都有原型。</h2><ul><li>A: 对</li><li>B: 错</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>除了<strong>基本对象</strong>（base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 <code>.toString</code>。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。</p></div></div><hr><h2 id="15-输出是什么？"><a href="#15-输出是什么？" class="headerlink" title="15. 输出是什么？"></a>15. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>JavaScript 是一种<strong>动态类型语言</strong>：我们不指定某些变量的类型。值可以在你不知道的情况下自动转换成另一种类型，这种类型称为<strong>隐式类型转换</strong>（implicit type coercion）。<strong>Coercion</strong> 是指将一种类型转换为另一种类型。</p><p>在本例中，JavaScript 将数字 <code>1</code> 转换为字符串，以便函数有意义并返回一个值。在数字类型（<code>1</code>）和字符串类型（<code>&#39;2&#39;</code>）相加时，该数字被视为字符串。我们可以连接字符串，比如 <code>&quot;Hello&quot; + &quot;World&quot;</code>，这里发生的是 <code>&quot;1&quot; + &quot;2&quot;</code>，它返回 <code>&quot;12&quot;</code>。</p></div></div><hr><h2 id="16-输出是什么？"><a href="#16-输出是什么？" class="headerlink" title="16. 输出是什么？"></a>16. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number++)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一元<strong>后自增</strong>运算符 <code>++</code>：</p><ol><li>返回值（返回 <code>0</code>）</li><li>值自增（number 现在是 <code>1</code>）</li></ol><p>一元<strong>前自增</strong>运算符 <code>++</code>：</p><ol><li>值自增（number 现在是 <code>2</code>）</li><li>返回值（返回 <code>2</code>）</li></ol><p>结果是 <code>0 2 2</code>.</p></div></div><hr><h2 id="17-输出是什么？"><a href="#17-输出是什么？" class="headerlink" title="17. 输出是什么？"></a>17. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonInfo</span>(<span class="params">one, two, three</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>21</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！</p></div></div><hr><h2 id="18-输出是什么？"><a href="#18-输出是什么？" class="headerlink" title="18. 输出是什么？"></a>18. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are an adult!&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are still an adult.&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hmm.. You don&#x27;t have an age I guess`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkAge</span>(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在测试相等性时，基本类型通过它们的值（value）进行比较，而对象通过它们的引用（reference）进行比较。JavaScript 检查对象是否具有对内存中相同位置的引用。</p><p>题目中我们正在比较的两个对象不是同一个引用：作为参数传递的对象引用的内存位置，与用于判断相等的对象所引用的内存位置并不同。</p><p>这也是 <code>{ age: 18 } === { age: 18 }</code> 和 <code>{ age: 18 } == { age: 18 }</code> 都返回 <code>false</code> 的原因。</p></div></div><hr><h2 id="19-输出是什么？"><a href="#19-输出是什么？" class="headerlink" title="19. 输出是什么？"></a>19. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>(<span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>扩展运算符（<code>...args</code>）会返回实参组成的数组。而数组是对象，因此 <code>typeof args</code> 返回 <code>&quot;object&quot;</code>。</p></div></div><hr><h2 id="20-输出是什么？"><a href="#20-输出是什么？" class="headerlink" title="20. 输出是什么？"></a>20. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  age = <span class="number">21</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用 <code>&quot;use strict&quot;</code>，你可以确保不会意外地声明全局变量。我们从来没有声明变量 <code>age</code>，因为我们使用 <code>&quot;use strict&quot;</code>，它将抛出一个引用错误。如果我们不使用 <code>&quot;use strict&quot;</code>，它就会工作，因为属性 <code>age</code> 会被添加到全局对象中了。</p></div></div><hr><h2 id="21-输出是什么？"><a href="#21-输出是什么？" class="headerlink" title="21. 输出是什么？"></a>21. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">&#x27;10*10+5&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>代码以字符串形式传递进来，<code>eval</code> 对其求值。如果它是一个表达式，就像本例中那样，它对表达式求值。表达式是 <code>10 * 10 + 5</code>。这将返回数字 <code>105</code>。</p></div></div><hr><h2 id="22-cool-secret-可访问多长时间？"><a href="#22-cool-secret-可访问多长时间？" class="headerlink" title="22. cool_secret 可访问多长时间？"></a>22. cool_secret 可访问多长时间？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;cool_secret&#x27;</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 永远，数据不会丢失。</li><li>B: 当用户关掉标签页时。</li><li>C: 当用户关掉整个浏览器，而不只是关掉标签页。</li><li>D: 当用户关闭电脑时。</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>关闭 <strong>tab 标签页</strong> 后，<code>sessionStorage</code> 存储的数据才会删除。</p><p>如果使用 <code>localStorage</code>，那么数据将永远在那里，除非调用了 <code>localStorage.clear()</code>。</p></div></div><hr><h2 id="23-输出是什么？"><a href="#23-输出是什么？" class="headerlink" title="23. 输出是什么？"></a>23. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>使用 <code>var</code> 关键字，你可以用相同的名称声明多个变量。然后变量将保存最新的值。</p><p>你不能使用 <code>let</code> 或 <code>const</code> 来实现这一点，因为它们是块作用域的。</p></div></div><hr><h2 id="24-输出是什么？"><a href="#24-输出是什么？" class="headerlink" title="24. 输出是什么？"></a>24. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="number">1</span>)</span><br><span class="line">set.<span class="title function_">has</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>所有对象的键（不包括 Symbol）在底层都是字符串，即使你自己没有将其作为字符串输入。这就是为什么 <code>obj.hasOwnProperty(&#39;1&#39;)</code> 也返回 <code>true</code>。</p><p>对于集合，它不是这样工作的。在我们的集合中没有 <code>&#39;1&#39;</code>：<code>set.has(&#39;1&#39;)</code> 返回 <code>false</code>。它有数字类型为 <code>1</code>，<code>set.has(1)</code> 返回 <code>true</code>。</p></div></div><hr><h2 id="25-输出是什么？"><a href="#25-输出是什么？" class="headerlink" title="25. 输出是什么？"></a>25. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;one&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;two&#x27;</span>, <span class="attr">a</span>: <span class="string">&#x27;three&#x27;</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; a: &quot;one&quot;, b: &quot;two&quot; &#125;</code></li><li>B: <code>&#123; b: &quot;two&quot;, a: &quot;three&quot; &#125;</code></li><li>C: <code>&#123; a: &quot;three&quot;, b: &quot;two&quot; &#125;</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>如果你有两个名称相同的键，则键会被替换掉。它仍然位于第一个键出现的位置，但是值是最后出现那个键的值。</p></div></div><hr><h2 id="26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。"><a href="#26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。" class="headerlink" title="26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。"></a>26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。</h2><ul><li>A: 对</li><li>B: 错</li><li>C: 看情况</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>基本执行上下文是全局执行上下文：它是代码中随处可访问的内容。</p></div></div><hr><h2 id="27-输出是什么？"><a href="#27-输出是什么？" class="headerlink" title="27. 输出是什么？"></a>27. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>如果某个条件返回 <code>true</code>，则 <code>continue</code> 语句跳过本次迭代。</p></div></div><hr><h2 id="28-输出是什么？"><a href="#28-输出是什么？" class="headerlink" title="28. 输出是什么？"></a>28. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">giveLydiaPizza</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Just give Lydia pizza already!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line">name.<span class="title function_">giveLydiaPizza</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>String</code> 是内置的构造函数，我们可以向它添加属性。我只是在它的原型中添加了一个方法。基本类型字符串被自动转换为字符串对象，由字符串原型函数生成。因此，所有 string(string 对象)都可以访问该方法！</p></div></div><hr><h2 id="29-输出是什么？"><a href="#29-输出是什么？" class="headerlink" title="29. 输出是什么？"></a>29. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span></span><br><span class="line">a[c] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象的键被自动转换为字符串。我们试图将一个对象 <code>b</code> 设置为对象 <code>a</code> 的键，且相应的值为 <code>123</code>。</p><p>然而，当字符串化一个对象时，它会变成 <code>&quot;[object Object]&quot;</code>。因此这里说的是，<code>a[&quot;[object Object]&quot;] = 123</code>。然后，我们再一次做了同样的事情，<code>c</code> 是另外一个对象，这里也有隐式字符串化，于是，<code>a[&quot;[object Object]&quot;] = 456</code>。</p><p>然后，我们打印 <code>a[b]</code>，也就是 <code>a[&quot;[object Object]&quot;]</code>。之前刚设置为 <code>456</code>，因此返回的是 <code>456</code>。</p></div></div><hr><h2 id="30-输出是什么？"><a href="#30-输出是什么？" class="headerlink" title="30. 输出是什么？"></a>30. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">baz</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们有一个 <code>setTimeout</code> 函数，并首先调用它。然而，它是最后打印日志的。</p><p>这是因为在浏览器中，我们不仅有运行时引擎，还有一个叫做 <code>WebAPI</code> 的东西。<code>WebAPI</code> 提供了 <code>setTimeout</code> 函数，也包含其他的，例如 DOM。</p><p>将 <em>callback</em> 推送到 WebAPI 后，<code>setTimeout</code> 函数本身(但不是回调！)将从栈中弹出。</p><img src="https://z3.ax1x.com/2021/05/10/gtPPbV.png" width="200"><p>现在，<code>foo</code> 被调用，打印 <code>&quot;First&quot;</code>。</p><img src="https://z3.ax1x.com/2021/05/10/gtPFET.png" width="200"><p><code>foo</code> 从栈中弹出，<code>baz</code> 被调用. 打印 <code>&quot;Third&quot;</code>。</p><img src="https://z3.ax1x.com/2021/05/10/gtPVC4.png" width="200"><p>WebAPI 不能随时向栈内添加内容。相反，它将回调函数推到名为 <em>queue</em> 的地方。</p><img src="https://z3.ax1x.com/2021/05/10/gtPe29.png" width="200"><p>这就是事件循环开始工作的地方。一个<strong>事件循环</strong>查看栈和任务队列。如果栈是空的，它接受队列上的第一个元素并将其推入栈。</p><img src="https://z3.ax1x.com/2021/05/10/gtPZ8J.png" width="200"><p><code>bar</code> 被调用，打印 <code>&quot;Second&quot;</code>，然后它被栈弹出。</p></div></div><hr><h2 id="31-当点击按钮时，event-target是什么？"><a href="#31-当点击按钮时，event-target是什么？" class="headerlink" title="31. 当点击按钮时，event.target是什么？"></a>31. 当点击按钮时，event.target是什么？</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;first div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;second div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;button&#x27;)&quot;</span>&gt;</span></span><br><span class="line">      Click!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: 一个包含所有嵌套元素的数组。</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>导致事件的最深嵌套的元素是事件的 target。你可以通过 <code>event.stopPropagation</code> 来停止冒泡。</p></div></div><hr><h2 id="32-当您单击该段落时，日志输出是什么？"><a href="#32-当您单击该段落时，日志输出是什么？" class="headerlink" title="32. 当您单击该段落时，日志输出是什么？"></a>32. 当您单击该段落时，日志输出是什么？</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;p&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    Click here!</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>如果我们点击 <code>p</code>，我们会看到两个日志：<code>p</code> 和 <code>div</code>。在事件传播期间，有三个阶段：捕获、目标和冒泡。默认情况下，事件处理程序在冒泡阶段执行（除非将 <code>useCapture</code> 设置为 <code>true</code>）。它从嵌套最深的元素向外传播。</p></div></div><hr><h2 id="33-输出是什么？"><a href="#33-输出是什么？" class="headerlink" title="33. 输出是什么？"></a>33. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Lydia&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.<span class="title function_">call</span>(person, <span class="number">21</span>)</span><br><span class="line">sayHi.<span class="title function_">bind</span>(person, <span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>使用这两种方法，我们都可以传递我们希望 <code>this</code> 关键字引用的对象。但是，<code>.call</code> 是<strong>立即执行</strong>的。</p><p><code>.bind</code> 返回函数的<strong>副本</strong>，但带有绑定上下文！它不是立即执行的。</p></div></div><hr><h2 id="34-输出是什么？"><a href="#34-输出是什么？" class="headerlink" title="34. 输出是什么？"></a>34. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function">() =&gt;</span> <span class="number">0</span>)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>sayHi</code> 方法返回的是立即执行函数(IIFE)的返回值.此立即执行函数的返回值是 <code>0</code>， 类型是 <code>number</code></p><p>参考：只有7种内置类型：<code>null</code>，<code>undefined</code>，<code>boolean</code>，<code>number</code>，<code>string</code>，<code>object</code>, <code>symbol</code> 和 <code>bigint</code>。 <code>function</code> 不是一种类型，函数是对象，它的类型是<code>object</code>。</p></div></div><hr><h2 id="35-下面哪些值是-falsy"><a href="#35-下面哪些值是-falsy" class="headerlink" title="35. 下面哪些值是 falsy?"></a>35. 下面哪些值是 falsy?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>)</span><br><span class="line">(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: All of them are falsy</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>只有 6 种 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a> 值:</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>&#39;&#39;</code> (empty string)</li><li><code>false</code></li></ul><p><code>Function</code> 构造函数, 比如 <code>new Number</code> 和 <code>new Boolean</code>，是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a>。</p></div></div><hr><h2 id="36-输出是什么？"><a href="#36-输出是什么？" class="headerlink" title="36. 输出是什么？"></a>36. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>typeof 1</code> 返回 <code>&quot;number&quot;</code>。<br><code>typeof &quot;number&quot;</code> 返回 <code>&quot;string&quot;</code>。</p></div></div><hr><h2 id="37-输出是什么？"><a href="#37-输出是什么？" class="headerlink" title="37. 输出是什么？"></a>37. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>当你为数组设置超过数组长度的值的时候， JavaScript 会创建名为 “empty slots” 的东西。它们的值实际上是 <code>undefined</code>。你会看到以下场景：</p><p><code>[1, 2, 3, 7 x empty, 11]</code></p><p>这取决于你的运行环境（每个浏览器，以及 node 环境，都有可能不同）</p></div></div><hr><h2 id="38-输出是什么？"><a href="#38-输出是什么？" class="headerlink" title="38. 输出是什么？"></a>38. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x, y</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">    (x = <span class="number">1</span>), (y = <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>catch</code> 代码块接收参数 <code>x</code>。当我们传递参数时，这与之前定义的变量 <code>x</code> 不同 。这个 <code>x</code> 是属于 <code>catch</code> 块级作用域的。</p><p>然后，我们将块级作用域中的变量赋值为 <code>1</code>，同时也设置了变量 <code>y</code> 的值。现在，我们打印块级作用域中的变量 <code>x</code>，值为 <code>1</code>。</p><p><code>catch</code> 块之外的变量 <code>x</code> 的值仍为 <code>undefined</code>， <code>y</code> 的值为 <code>2</code>。当我们在 <code>catch</code> 块之外执行 <code>console.log(x)</code> 时，返回 <code>undefined</code>，<code>y</code> 返回 <code>2</code>。</p></div></div><hr><h2 id="39-JavaScript-中的一切都是？"><a href="#39-JavaScript-中的一切都是？" class="headerlink" title="39. JavaScript 中的一切都是？"></a>39. JavaScript 中的一切都是？</h2><ul><li>A: 基本类型与对象</li><li>B: 函数与对象</li><li>C: 只有对象</li><li>D: 数字与对象</li><li><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>JavaScript 只有基本类型和对象。</p><p>基本类型包括 <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, <code>symbol</code>。</p></div></div></li></ul><hr><h2 id="40-输出是什么？"><a href="#40-输出是什么？" class="headerlink" title="40. 输出是什么？"></a>40. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]].<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc.<span class="title function_">concat</span>(cur)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>[1, 2]</code>是初始值。初始值将会作为首次调用时第一个参数 <code>acc</code> 的值。在第一次执行时， <code>acc</code> 的值是 <code>[1, 2]</code>， <code>cur</code> 的值是 <code>[0, 1]</code>。合并它们，结果为 <code>[1, 2, 0, 1]</code>。<br>第二次执行， <code>acc</code> 的值是 <code>[1, 2, 0, 1]</code>， <code>cur</code> 的值是 <code>[2, 3]</code>。合并它们，最终结果为 <code>[1, 2, 0, 1, 2, 3]</code></p></div></div><hr><h2 id="41-输出是什么？"><a href="#41-输出是什么？" class="headerlink" title="41. 输出是什么？"></a>41. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!!<span class="literal">null</span></span><br><span class="line">!!<span class="string">&#x27;&#x27;</span></span><br><span class="line">!!<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>null</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a>。 <code>!null</code> 的值是 <code>true</code>。 <code>!true</code> 的值是 <code>false</code>。</p><p><code>&quot;&quot;</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy</a>。 <code>!&quot;&quot;</code> 的值是 <code>true</code>。  <code>!true</code> 的值是 <code>false</code>。</p><p><code>1</code> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a>。 <code>!1</code> 的值是 <code>false</code>。 <code>!false</code> 的值是 <code>true</code>。</p></div></div><hr><h2 id="42-setInterval-方法的返回值是什么？"><a href="#42-setInterval-方法的返回值是什么？" class="headerlink" title="42. setInterval 方法的返回值是什么？"></a>42. <code>setInterval</code> 方法的返回值是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 一个唯一的id</li><li>B: 该方法指定的毫秒数</li><li>C: 传递的函数</li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>setInterval</code> 返回一个唯一的 id。此 id 可被用于 <code>clearInterval</code> 函数来取消定时。</p></div></div><hr><h2 id="43-输出是什么？"><a href="#43-输出是什么？" class="headerlink" title="43. 输出是什么？"></a>43. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[...<span class="string">&#x27;Lydia&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>string 类型是可迭代的。扩展运算符将迭代的每个字符映射成一个元素。</p></div></div><hr><h2 id="44-输出是什么"><a href="#44-输出是什么" class="headerlink" title="44. 输出是什么?"></a>44. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> i;</span><br><span class="line">  <span class="keyword">yield</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">generator</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 10], [10, 20]</code></li><li>B: <code>20, 20</code></li><li>C: <code>10, 20</code></li><li>D: <code>0, 10 and 10, 20</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一般的函数在执行之后是不能中途停下的。但是，生成器函数却可以中途“停下”，之后可以再从停下的地方继续。当生成器遇到<code>yield</code>关键字的时候，会生成<code>yield</code>后面的值。注意，生成器在这种情况下不 <em>返回</em> (<em>return</em> )值，而是 <em>生成</em> (<em>yield</em>)值。</p><p>首先，我们用<code>10</code>作为参数<code>i</code>来初始化生成器函数。然后使用<code>next()</code>方法一步步执行生成器。第一次执行生成器的时候，<code>i</code>的值为<code>10</code>，遇到第一个<code>yield</code>关键字，它要生成<code>i</code>的值。此时，生成器“暂停”，生成了<code>10</code>。</p><p>然后，我们再执行<code>next()</code>方法。生成器会从刚才暂停的地方继续，这个时候<code>i</code>还是<code>10</code>。于是我们走到了第二个<code>yield</code>关键字处，这时候需要生成的值是<code>i*2</code>，<code>i</code>为<code>10</code>，那么此时生成的值便是<code>20</code>。所以这道题的最终结果是<code>10,20</code>。</p></div></div><h2 id="45-返回值是什么"><a href="#45-返回值是什么" class="headerlink" title="45. 返回值是什么?"></a>45. 返回值是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">500</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">100</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([firstPromise, secondPromise]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;one&quot;</code></li><li>B: <code>&quot;two&quot;</code></li><li>C: <code>&quot;two&quot; &quot;one&quot;</code></li><li>D: <code>&quot;one&quot; &quot;two&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当我们向<code>Promise.race</code>方法中传入多个<code>Promise</code>时，会进行 <em>优先</em> 解析。在这个例子中，我们用<code>setTimeout</code>给<code>firstPromise</code>和<code>secondPromise</code>分别设定了500ms和100ms的定时器。这意味着<code>secondPromise</code>会首先解析出字符串<code>two</code>。那么此时<code>res</code>参数即为<code>two</code>，是为输出结果。</p></div></div><hr><h2 id="46-输出是什么"><a href="#46-输出是什么" class="headerlink" title="46. 输出是什么?"></a>46. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> members = [person];</span><br><span class="line">person = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(members);</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code></li><li>B: <code>[null]</code></li><li>C: <code>[&#123;&#125;]</code></li><li>D: <code>[&#123; name: &quot;Lydia&quot; &#125;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>首先我们声明了一个拥有<code>name</code>属性的对象 <code>person</code>。</p><img src="https://i.imgur.com/TML1MbS.png" width="200"><p>然后我们又声明了一个变量<code>members</code>. 将首个元素赋值为变量<code>person</code>。 当设置两个对象彼此相等时，它们会通过 <em>引用</em> 进行交互。但是当你将引用从一个变量分配至另一个变量时，其实只是执行了一个 <em>复制</em> 操作。（注意一点，他们的引用 <em>并不相同</em>!）</p><img src="https://i.imgur.com/FSG5K3F.png" width="300"><p>接下来我们让<code>person</code>等于<code>null</code>。</p><img src="https://i.imgur.com/sYjcsMT.png" width="300"><p>我们没有修改数组第一个元素的值，而只是修改了变量<code>person</code>的值,因为元素（复制而来）的引用与<code>person</code>不同。<code>members</code>的第一个元素仍然保持着对原始对象的引用。当我们输出<code>members</code>数组时，第一个元素会将引用的对象打印出来。</p></div></div><hr><h2 id="47-输出是什么"><a href="#47-输出是什么" class="headerlink" title="47. 输出是什么?"></a>47. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &#123; age: 21 &#125;</code></li><li>B: <code>&quot;name&quot;, &quot;age&quot;</code></li><li>C: <code>&quot;Lydia&quot;, 21</code></li><li>D: <code>[&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在<code>for-in</code>循环中,我们可以通过对象的key来进行迭代,也就是这里的<code>name</code>和<code>age</code>。在底层，对象的key都是字符串（如果他们不是Symbol的话）。在每次循环中，我们将<code>item</code>设定为当前遍历到的key.所以一开始，<code>item</code>是<code>name</code>，之后 <code>item</code>输出的则是<code>age</code>。</p></div></div><hr><h2 id="48-输出是什么"><a href="#48-输出是什么" class="headerlink" title="48. 输出是什么?"></a>48. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + <span class="number">4</span> + <span class="string">&quot;5&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;345&quot;</code></li><li>B: <code>&quot;75&quot;</code></li><li>C: <code>12</code></li><li>D: <code>&quot;12&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当所有运算符的 <em>优先级</em> 相同时，计算表达式需要确定运算符的结合顺序，即从右到左还是从左往右。在这个例子中，我们只有一类运算符<code>+</code>，对于加法来说，结合顺序就是从左到右。</p><p><code>3 + 4</code>首先计算，得到数字<code>7</code>.</p><p>由于类型的强制转换，<code>7 + &#39;5&#39;</code>的结果是<code>&quot;75&quot;</code>. JavaScript将<code>7</code>转换成了字符串，可以参考问题15.我们可以用<code>+</code>号把两个字符串连接起来。 <code>&quot;7&quot; + &quot;5&quot;</code> 就得到了<code>&quot;75&quot;</code>.</p></div></div><hr><h2 id="49-num的值是什么"><a href="#49-num的值是什么" class="headerlink" title="49. num的值是什么?"></a>49. <code>num</code>的值是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;7*6&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>42</code></li><li>B: <code>&quot;42&quot;</code></li><li>C: <code>7</code></li><li>D: <code>NaN</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>只返回了字符串中第一个字母. 设定了 <em>进制</em> 后 (也就是第二个参数，指定需要解析的数字是什么进制: 十进制、十六机制、八进制、二进制等等……),<code>parseInt</code> 检查字符串中的字符是否合法. 一旦遇到一个在指定进制中不合法的字符后，立即停止解析并且忽略后面所有的字符。</p><p><code>*</code>就是不合法的数字字符。所以只解析到<code>&quot;7&quot;</code>，并将其解析为十进制的<code>7</code>. <code>num</code>的值即为<code>7</code>.</p></div></div><hr><h2 id="50-输出是什么"><a href="#50-输出是什么" class="headerlink" title="50. 输出是什么?"></a>50. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[]</code></li><li>B: <code>[null, null, null]</code></li><li>C: <code>[undefined, undefined, undefined]</code></li><li>D: <code>[ 3 x empty ]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>对数组进行映射的时候,<code>num</code>就是当前循环到的元素. 在这个例子中，所有的映射都是number类型，所以if中的判断<code>typeof num === &quot;number&quot;</code>结果都是<code>true</code>.map函数创建了新数组并且将函数的返回值插入数组。</p><p>但是，没有任何值返回。当函数没有返回任何值时，即默认返回<code>undefined</code>.对数组中的每一个元素来说，函数块都得到了这个返回值，所以结果中每一个元素都是<code>undefined</code>.</p></div></div><hr><h2 id="51-输出的是什么"><a href="#51-输出的是什么" class="headerlink" title="51. 输出的是什么?"></a>51. 输出的是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">member, year</span>) &#123;</span><br><span class="line">  member.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">  year = <span class="string">&quot;1998&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Sarah&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> birthYear = <span class="string">&quot;1997&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>(person, birthYear);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person, birthYear);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1997&quot;</code></li><li>B: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1998&quot;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1998&quot;</code></li><li>D: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1997&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>普通参数都是 <em>值</em> 传递的，而对象则不同，是 <em>引用</em> 传递。所以说，<code>birthYear</code>是值传递，因为他是个字符串而不是对象。当我们对参数进行值传递时，会创建一份该值的 <em>复制</em> 。（可以参考问题46）</p><p>变量<code>birthYear</code>有一个对<code>&quot;1997&quot;</code>的引用，而传入的参数也有一个对<code>&quot;1997&quot;</code>的引用，但二者的引用并不相同。当我们通过给 <code>year</code>赋值<code>&quot;1998&quot;</code>来更新<code>year</code>的值的时候我们只是更新了<code>year</code>（的引用）。此时<code>birthYear</code>仍然是<code>&quot;1997&quot;</code>.</p><p>而<code>person</code>是个对象。参数<code>member</code>引用与之 <em>相同的</em> 对象。当我们修改<code>member</code>所引用对象的属性时,<code>person</code>的相应属性也被修改了,因为他们引用了相同的对象. <code>person</code>的 <code>name</code>属性也变成了 <code>&quot;Lydia&quot;</code>.</p></div></div><hr><h2 id="52-输出是什么"><a href="#52-输出是什么" class="headerlink" title="52. 输出是什么?"></a>52. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">greeting</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It worked!&quot;</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh no an error:&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;It worked! Hello world!&quot;</code></li><li>B: <code>&quot;Oh no an error: undefined</code></li><li>C: <code>SyntaxError: can only throw Error objects</code></li><li>D: <code>&quot;Oh no an error: Hello world!</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>通过<code>throw</code>语句，我么可以创建自定义错误。 而通过它，我们可以抛出异常。异常可以是一个<b>字符串</b>, 一个 <b>数字</b>, 一个 <b>布尔类型</b> 或者是一个 <b>对象</b>。在本例中，我们的异常是字符串<code>&#39;Hello world&#39;</code>.</p><p>通过 <code>catch</code>语句，我们可以设定当<code>try</code>语句块中抛出异常后应该做什么处理。在本例中抛出的异常是字符串<code>&#39;Hello world&#39;</code>. <code>e</code>就是这个字符串，因此被输出。最终结果就是<code>&#39;Oh an error: Hello world&#39;</code>.</p></div></div><hr><h2 id="53-输出是什么"><a href="#53-输出是什么" class="headerlink" title="53. 输出是什么?"></a>53. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = <span class="string">&quot;Lamborghini&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">make</span>: <span class="string">&quot;Maserati&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCar.<span class="property">make</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lamborghini&quot;</code></li><li>B: <code>&quot;Maserati&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>返回属性的时候，属性的值等于 <em>返回的</em> 值，而不是构造函数中设定的值。我们返回了字符串 <code>&quot;Maserati&quot;</code>，所以 <code>myCar.make</code>等于<code>&quot;Maserati&quot;</code>.</p></div></div><hr><h2 id="54-输出是什么"><a href="#54-输出是什么" class="headerlink" title="54. 输出是什么?"></a>54. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = (y = <span class="number">10</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li><li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li><li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li><li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>let x = y = 10;</code> 是下面这个表达式的缩写:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = y;</span><br></pre></td></tr></table></figure><p>我们设定<code>y</code>等于<code>10</code>时,我们实际上增加了一个属性<code>y</code>给全局对象(浏览器里的<code>window</code>, Nodejs里的<code>global</code>)。在浏览器中， <code>window.y</code>等于<code>10</code>.</p><p>然后我们声明了变量<code>x</code>等于<code>y</code>,也是<code>10</code>.但变量是使用 <code>let</code>声明的，它只作用于 <em>块级作用域</em>, 仅在声明它的块中有效；就是案例中的立即调用表达式(IIFE)。使用<code>typeof</code>操作符时, 操作值 <code>x</code>没有被定义：因为我们在<code>x</code>声明块的外部，无法调用它。这就意味着<code>x</code>未定义。未分配或是未声明的变量类型为<code>&quot;undefined&quot;</code>. <code>console.log(typeof x)</code>返回<code>&quot;undefined&quot;</code>.</p><p>而我们创建了全局变量<code>y</code>，并且设定<code>y</code>等于<code>10</code>.这个值在我们的代码各处都访问的到。 <code>y</code>已经被定义了，而且有一个<code>&quot;number&quot;</code>类型的值。 <code>console.log(typeof y)</code>返回<code>&quot;number&quot;</code>.</p></div></div><hr><h2 id="55-输出是什么"><a href="#55-输出是什么" class="headerlink" title="55. 输出是什么?"></a><a name=20190629></a>55. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Woof I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Mara&quot;</span>);</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span>;</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Woof I am Mara&quot;</code>, <code>TypeError</code></li><li>B: <code>&quot;Woof I am Mara&quot;</code>,<code>&quot;Woof I am Mara&quot;</code></li><li>C: <code>&quot;Woof I am Mara&quot;</code>, <code>undefined</code></li><li>D: <code>TypeError</code>, <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们可以用<code>delete</code>关键字删除对象的属性，对原型也是适用的。删除了原型的属性后，该属性在原型链上就不可用了。在本例中，函数<code>bark</code>在执行了<code>delete Dog.prototype.bark</code>后不可用, 然而后面的代码还在调用它。</p><p>当我们尝试调用一个不存在的函数时<code>TypeError</code>异常会被抛出。在本例中就是 <code>TypeError: pet.bark is not a function</code>，因为<code>pet.bark</code>是<code>undefined</code>.</p></div></div><hr><h2 id="56-输出是什么"><a href="#56-输出是什么" class="headerlink" title="56. 输出是什么?"></a>56. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 1, 2, 3, 4]</code></li><li>B: <code>[1, 2, 3, 4]</code></li><li>C: <code>&#123;1, 1, 2, 3, 4&#125;</code></li><li>D: <code>&#123;1, 2, 3, 4&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>Set</code>对象是独一无二的值的集合：也就是说同一个值在其中仅出现一次。</p><p>我们传入了数组<code>[1, 1, 2, 3, 4]</code>，他有一个重复值<code>1</code>.以为一个集合里不能有两个重复的值，其中一个就被移除了。所以结果是 <code>{1, 2, 3, 4}</code>.</p></div></div><hr><h2 id="57-输出是什么"><a href="#57-输出是什么" class="headerlink" title="57. 输出是什么?"></a>57. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> myCounter <span class="keyword">from</span> <span class="string">&quot;./counter&quot;</span>;</span><br><span class="line"></span><br><span class="line">myCounter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCounter);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>Error</code></li><li>D: <code>NaN</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>引入的模块是 <em>只读</em> 的: 你不能修改引入的模块。只有导出他们的模块才能修改其值。</p><p>当我们给<code>myCounter</code>增加一个值的时候会抛出一个异常： <code>myCounter</code>是只读的，不能被修改。</p></div></div><hr><h2 id="58-输出是什么"><a href="#58-输出是什么" class="headerlink" title="58. 输出是什么?"></a>58. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> age);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code>, <code>true</code></li><li>B: <code>&quot;Lydia&quot;</code>, <code>21</code></li><li>C: <code>true</code>, <code>true</code></li><li>D: <code>undefined</code>, <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>delete</code>操作符返回一个布尔值： <code>true</code>指删除成功，否则返回<code>false</code>. 但是通过 <code>var</code>, <code>const</code> 或 <code>let</code> 关键字声明的变量无法用 <code>delete</code> 操作符来删除。</p><p><code>name</code>变量由<code>const</code>关键字声明，所以删除不成功:返回 <code>false</code>. 而我们设定<code>age</code>等于<code>21</code>时,我们实际上添加了一个名为<code>age</code>的属性给全局对象。对象中的属性是可以删除的，全局对象也是如此，所以<code>delete age</code>返回<code>true</code>.</p></div></div><hr><h2 id="59-输出是什么"><a href="#59-输出是什么" class="headerlink" title="59. 输出是什么?"></a>59. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [y] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[1, 2, 3, 4, 5]]</code></li><li>B: <code>[1, 2, 3, 4, 5]</code></li><li>C: <code>1</code></li><li>D: <code>[1]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们可以通过解构赋值来解析来自对象的数组或属性的值，比如说：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/ADFpVop.png" width="200"><p><code>a</code>的值现在是<code>1</code>，<code>b</code>的值现在是<code>2</code>.而在题目中，我们是这么做的:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/NzGkMNk.png" width="200"><p>也就是说，<code>y</code>等于数组的第一个值就是数字<code>1</code>.我们输出<code>y</code>， 返回<code>1</code>.</p></div></div><hr><h2 id="60-输出是什么"><a href="#60-输出是什么" class="headerlink" title="60. 输出是什么?"></a>60. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> admin = &#123; <span class="attr">admin</span>: <span class="literal">true</span>, ...user &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(admin);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; admin: true, user: &#123; name: &quot;Lydia&quot;, age: 21 &#125; &#125;</code></li><li>B: <code>&#123; admin: true, name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>&#123; admin: true, user: [&quot;Lydia&quot;, 21] &#125;</code></li><li>D: <code>&#123; admin: true &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>扩展运算符<code>...</code>为对象的组合提供了可能。你可以复制对象中的键值对，然后把它们加到另一个对象里去。在本例中，我们复制了<code>user</code>对象键值对，然后把它们加入到<code>admin</code>对象中。<code>admin</code>对象就拥有了这些键值对，所以结果为<code>{ admin: true, name: &quot;Lydia&quot;, age: 21 }</code>.</p></div></div><hr><h2 id="61-输出是什么"><a href="#61-输出是什么" class="headerlink" title="61. 输出是什么?"></a>61. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">21</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;]</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>D: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;age&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过<code>defineProperty</code>方法，我们可以给对象添加一个新属性，或者修改已经存在的属性。而我们使用<code>defineProperty</code>方法给对象添加了一个属性之后，属性默认为 <em>不可枚举(not enumerable)</em>. <code>Object.keys</code>方法仅返回对象中 <em>可枚举(enumerable)</em> 的属性，因此只剩下了<code>&quot;name&quot;</code>.</p><p>用<code>defineProperty</code>方法添加的属性默认不可变。你可以通过<code>writable</code>, <code>configurable</code> 和 <code>enumerable</code>属性来改变这一行为。这样的话， 相比于自己添加的属性，<code>defineProperty</code>方法添加的属性有了更多的控制权。</p></div></div><hr><h2 id="62-输出是什么"><a href="#62-输出是什么" class="headerlink" title="62. 输出是什么?"></a>62. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;lydiahallie&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">90</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(settings, [<span class="string">&quot;level&quot;</span>, <span class="string">&quot;health&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&#123;&quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li><li>B: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;&#125;&quot;</code></li><li>C: <code>&quot;[&quot;level&quot;, &quot;health&quot;]&quot;</code></li><li>D: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;, &quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>JSON.stringify</code>的第二个参数是 <em>替代者(replacer)</em>. 替代者(replacer)可以是个函数或数组，用以控制哪些值如何被转换为字符串。</p><p>如果替代者(replacer)是个 <em>数组</em> ，那么就只有包含在数组中的属性将会被转化为字符串。在本例中，只有名为<code>&quot;level&quot;</code> 和 <code>&quot;health&quot;</code> 的属性被包括进来， <code>&quot;username&quot;</code>则被排除在外。 <code>data</code> 就等于 <code>&quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot;</code>.</p><p>而如果替代者(replacer)是个 _函数_，这个函数将被对象的每个属性都调用一遍。<br>函数返回的值会成为这个属性的值，最终体现在转化后的JSON字符串中（译者注：Chrome下，经过实验，如果所有属性均返回同一个值的时候有异常，会直接将返回值作为结果输出而不会输出JSON字符串），而如果返回值为<code>undefined</code>，则该属性会被排除在外。</p></div></div><hr><h2 id="63-输出是什么"><a href="#63-输出是什么" class="headerlink" title="63. 输出是什么?"></a>63. 输出是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increaseNumber</span> = (<span class="params"></span>) =&gt; num++;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increasePassedNumber</span> = number =&gt; number++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="title function_">increaseNumber</span>();</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="title function_">increasePassedNumber</span>(num1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code>, <code>10</code></li><li>B: <code>10</code>, <code>11</code></li><li>C: <code>11</code>, <code>11</code></li><li>D: <code>11</code>, <code>12</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>一元操作符 <code>++</code> <em>先返回</em> 操作值, <em>再累加</em> 操作值。<code>num1</code>的值是<code>10</code>, 因为<code>increaseNumber</code>函数首先返回<code>num</code>的值，也就是<code>10</code>，随后再进行 <code>num</code>的累加。</p><p><code>num2</code>是<code>10</code>因为我们将 <code>num1</code>传入<code>increasePassedNumber</code>. <code>number</code>等于<code>10</code>（<code>num1</code>的值。同样道理，<code>++</code> <em>先返回</em> 操作值, <em>再累加</em> 操作值。） <code>number</code>是<code>10</code>，所以<code>num2</code>也是<code>10</code>.</p></div></div><hr><h2 id="64-输出什么"><a href="#64-输出什么" class="headerlink" title="64. 输出什么?"></a>64. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">number</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x = &#123; ...value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">number</span> *= <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">multiply</span>();</span><br><span class="line"><span class="title function_">multiply</span>();</span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li><li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li><li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li><li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在ES6中，我们可以使用默认值初始化参数。如果没有给函数传参，或者传的参值为 <code>&quot;undefined&quot;</code> ，那么参数的值将是默认值。上述例子中，我们将 <code>value</code> 对象进行了解构并传到一个新对象中，因此 <code>x</code> 的默认值为 <code>{number：10}</code> 。</p><p>默认参数在调用时才会进行计算，每次调用函数时，都会创建一个新的对象。我们前两次调用 <code>multiply</code> 函数且不传递值，那么每一次 <code>x</code> 的默认值都为 <code>{number：10}</code> ，因此打印出该数字的乘积值为<code>20</code>。</p><p>第三次调用 <code>multiply</code> 时，我们传递了一个参数，即对象<code>value</code>。 <code>*=</code>运算符实际上是<code>x.number = x.number * 2</code>的简写，我们修改了<code>x.number</code>的值，并打印出值<code>20</code>。</p><p>第四次，我们再次传递<code>value</code>对象。 <code>x.number</code>之前被修改为<code>20</code>，所以<code>x.number * = 2</code>打印为<code>40</code>。</p></div></div><hr><h2 id="65-输出什么"><a href="#65-输出什么" class="headerlink" title="65. 输出什么?"></a>65. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y));</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li><li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li><li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li><li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>reducer</code> 函数接收4个参数:</p><ol><li>Accumulator (acc) (累计器)</li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引)</li><li>Source Array (src) (源数组)</li></ol><p><code>reducer</code> 函数的返回值将会分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</p><p><code>reducer</code> 函数还有一个可选参数<code>initialValue</code>, 该参数将作为第一次调用回调函数时的第一个参数的值。如果没有提供<code>initialValue</code>，则将使用数组中的第一个元素。</p><p>在上述例子，<code>reduce</code>方法接收的第一个参数(Accumulator)是<code>x</code>, 第二个参数(Current Value)是<code>y</code>。</p><p>在第一次调用时，累加器<code>x</code>为<code>1</code>，当前值<code>“y”</code>为<code>2</code>，打印出累加器和当前值：<code>1</code>和<code>2</code>。</p><p>例子中我们的回调函数没有返回任何值，只是打印累加器的值和当前值。如果函数没有返回值，则默认返回<code>undefined</code>。 在下一次调用时，累加器为<code>undefined</code>，当前值为“3”, 因此<code>undefined</code>和<code>3</code>被打印出。</p><p>在第四次调用时，回调函数依然没有返回值。 累加器再次为 <code>undefined</code> ，当前值为“4”。 <code>undefined</code>和<code>4</code>被打印出。</p></div></div><hr><h2 id="66-使用哪个构造函数可以成功继承Dog类"><a href="#66-使用哪个构造函数可以成功继承Dog类" class="headerlink" title="66. 使用哪个构造函数可以成功继承Dog类?"></a>66. 使用哪个构造函数可以成功继承<code>Dog</code>类?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Labrador</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="comment">// 1 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在子类中，在调用<code>super</code>之前不能访问到<code>this</code>关键字。 如果这样做，它将抛出一个<code>ReferenceError</code>：1和4将引发一个引用错误。</p><p>使用<code>super</code>关键字，需要用给定的参数来调用父类的构造函数。 父类的构造函数接收<code>name</code>参数，因此我们需要将<code>name</code>传递给<code>super</code>。</p><p><code>Labrador</code>类接收两个参数，<code>name</code>参数是由于它继承了<code>Dog</code>，<code>size</code>作为<code>Labrador</code>类的额外属性，它们都需要传递给<code>Labrador</code>的构造函数，因此使用构造函数2正确完成。</p></div></div><hr><h2 id="67-输出什么"><a href="#67-输出什么" class="headerlink" title="67. 输出什么?"></a>67. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running index.js&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./sum.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running sum.js&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><ul><li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li><li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li><li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li><li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>import</code>命令是编译阶段执行的，在代码运行之前。因此这意味着被导入的模块会先运行，而导入模块的文件会后执行。</p><p>这是CommonJS中<code>require（）</code>和<code>import</code>之间的区别。使用<code>require()</code>，您可以在运行代码时根据需要加载依赖项。 如果我们使用<code>require</code>而不是<code>import</code>，<code>running index.js</code>，<code>running sum.js</code>，<code>3</code>会被依次打印。</p></div></div><hr><h2 id="68-输出什么"><a href="#68-输出什么" class="headerlink" title="68. 输出什么?"></a>68. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">2</span>) === <span class="title class_">Number</span>(<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">false</span>) === <span class="title class_">Boolean</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code>, <code>true</code>, <code>false</code></li><li>B: <code>false</code>, <code>true</code>, <code>false</code></li><li>C: <code>true</code>, <code>false</code>, <code>true</code></li><li>D: <code>true</code>, <code>true</code>, <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>每个<code>Symbol</code>都是完全唯一的。传递给<code>Symbol</code>的参数只是给<code>Symbol</code>的一个描述。 <code>Symbol</code>的值不依赖于传递的参数。 当我们测试相等时，我们创建了两个全新的符号：第一个<code>Symbol（&#39;foo&#39;）</code>，第二个<code>Symbol（&#39;foo&#39;）</code>, 这两个值是唯一的，彼此不相等，因此返回<code>false</code>。</p></div></div><hr><h2 id="69-输出什么"><a href="#69-输出什么" class="headerlink" title="69. 输出什么?"></a>69. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">13</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code></li><li>B: <code>&quot;           Lydia Hallie&quot;</code>, <code>&quot;  Lydia Hallie&quot;</code> (<code>&quot;[13x whitespace]Lydia Hallie&quot;</code>, <code>&quot;[2x whitespace]Lydia Hallie&quot;</code>)</li><li>C: <code>&quot; Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[1x whitespace]Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code>)</li><li>D: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lyd&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用<code>padStart</code>方法，我们可以在字符串的开头添加填充。传递给此方法的参数是字符串的总长度（包含填充）。字符串<code>Lydia Hallie</code>的长度为<code>12</code>, 因此<code>name.padStart（13）</code>在字符串的开头只会插入1（<code>13 - 12 = 1</code>）个空格。</p><p>如果传递给<code>padStart</code>方法的参数小于字符串的长度，则不会添加填充。</p></div></div><hr><h2 id="70-输出什么"><a href="#70-输出什么" class="headerlink" title="70. 输出什么?"></a>70. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🥑&quot;</span> + <span class="string">&quot;💻&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑💻&quot;</code></li><li>B: <code>257548</code></li><li>C: A string containing their code points</li><li>D: Error</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>+</code>运算符，您可以连接字符串。 上述情况，我们将字符串<code>“🥑”</code>与字符串<code>”💻“</code>连接起来，产生<code>”🥑💻“</code>。</p></div></div><hr><h2 id="71-如何能打印出console-log语句后注释掉的值？"><a href="#71-如何能打印出console-log语句后注释掉的值？" class="headerlink" title="71. 如何能打印出console.log语句后注释掉的值？"></a>71. 如何能打印出<code>console.log</code>语句后注释掉的值？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> 答案 = <span class="keyword">yield</span> <span class="string">&quot;Do you love JavaScript?&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (答案 !== <span class="string">&quot;Yes&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Oh wow... Guess we&#x27;re gone here&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;JavaScript loves you back ❤️&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="title function_">startGame</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 1 */</span>); <span class="comment">// Do you love JavaScript?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 2 */</span>); <span class="comment">// JavaScript loves you back ❤️</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>game.next(&quot;Yes&quot;).value</code> and <code>game.next().value</code></li><li>B: <code>game.next.value(&quot;Yes&quot;)</code> and <code>game.next.value()</code></li><li>C: <code>game.next().value</code> and <code>game.next(&quot;Yes&quot;).value</code></li><li>D: <code>game.next.value()</code> and <code>game.next.value(&quot;Yes&quot;)</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>generator</code>函数在遇到<code>yield</code>关键字时会“暂停”其执行。 首先，我们需要让函数产生字符串<code>Do you love JavaScript?</code>，这可以通过调用<code>game.next().value</code>来完成。上述函数的第一行就有一个<code>yield</code>关键字，那么运行立即停止了，<code>yield</code>表达式本身没有返回值，或者说总是返回<code>undefined</code>, 这意味着此时变量 <code>答案</code> 为<code>undefined</code></p><p><code>next</code>方法可以带一个参数，该参数会被当作上一个 <code>yield</code> 表达式的返回值。当我们调用<code>game.next(&quot;Yes&quot;).value</code>时，先前的 <code>yield</code> 的返回值将被替换为传递给<code>next()</code>函数的参数<code>&quot;Yes&quot;</code>。此时变量 <code>答案</code> 被赋值为 <code>&quot;Yes&quot;</code>，<code>if</code>语句返回<code>false</code>，所以<code>JavaScript loves you back ❤️</code>被打印。</p></div></div><hr><h2 id="72-输出什么"><a href="#72-输出什么" class="headerlink" title="72. 输出什么?"></a>72. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Hello\nworld`</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello world!</code></li><li>B: <code>Hello</code> <br />&nbsp; &nbsp; &nbsp;<code>world</code></li><li>C: <code>Hello\nworld</code></li><li>D: <code>Hello\n</code> <br /> &nbsp; &nbsp; &nbsp;<code>world</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>String.raw</code>函数是用来获取一个模板字符串的原始字符串的，它返回一个字符串，其中忽略了转义符（<code>\n</code>，<code>\v</code>，<code>\t</code>等）。但反斜杠可能造成问题，因为你可能会遇到下面这种类似情况：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="string">`C:\Documents\Projects\table.html`</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property">raw</span><span class="string">`<span class="subst">$&#123;path&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>这将导致：</p><p><code>&quot;C:DocumentsProjects able.html&quot;</code></p><p>直接使用<code>String.raw</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property">raw</span><span class="string">`C:\Documents\Projects\table.html`</span></span><br></pre></td></tr></table></figure><p>它会忽略转义字符并打印：<code>C:\Documents\Projects\table.html</code></p><p>上述情况，字符串是<code>Hello\nworld</code>被打印出。</p></div></div><hr><h2 id="73-输出什么"><a href="#73-输出什么" class="headerlink" title="73. 输出什么?"></a>73. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;I made it!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">getData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;I made it!&quot;</code></li><li>B: <code>Promise &#123;&lt;resolved&gt;: &quot;I made it!&quot;&#125;</code></li><li>C: <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>异步函数始终返回一个promise。<code>await</code>仍然需要等待promise的解决：当我们调用<code>getData()</code>并将其赋值给<code>data</code>，此时<code>data</code>为<code>getData</code>方法返回的一个挂起的promise，该promise并没有解决。</p><p>如果我们想要访问已解决的值<code>&quot;I made it!&quot;</code>，可以在<code>data</code>上使用<code>.then()</code>方法：</p><p><code>data.then(res =&gt; console.log(res))</code></p><p>这样将打印 <code>&quot;I made it!&quot;</code></p></div></div><hr><h2 id="74-输出什么"><a href="#74-输出什么" class="headerlink" title="74. 输出什么?"></a>74. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addToList</span>(<span class="params">item, list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">addToList</span>(<span class="string">&quot;apple&quot;</span>, [<span class="string">&quot;banana&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;apple&#39;, &#39;banana&#39;]</code></li><li>B: <code>2</code></li><li>C: <code>true</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>push()</code>方法返回新数组的长度。一开始，数组包含一个元素（字符串<code>&quot;banana&quot;</code>），长度为1。 在数组中添加字符串<code>&quot;apple&quot;</code>后，长度变为2，并将从<code>addToList</code>函数返回。</p><p><code>push</code>方法修改原始数组，如果你想从函数返回数组而不是数组长度，那么应该在push <code>item</code>之后返回<code>list</code>。</p></div></div><hr><h2 id="75-输出什么"><a href="#75-输出什么" class="headerlink" title="75. 输出什么?"></a>75. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = box;</span><br><span class="line">shape.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shape)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; x: 100, y: 20 &#125;</code></li><li>B: <code>&#123; x: 10, y: 20 &#125;</code></li><li>C: <code>&#123; x: 100 &#125;</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>Object.freeze</code>使得无法添加、删除或修改对象的属性（除非属性的值是另一个对象）。</p><p>当我们创建变量<code>shape</code>并将其设置为等于冻结对象<code>box</code>时，<code>shape</code>指向的也是冻结对象。你可以使用<code>Object.isFrozen</code>检查一个对象是否被冻结，上述情况，<code>Object.isFrozen（shape）</code>将返回<code>true</code>。</p><p>由于<code>shape</code>被冻结，并且<code>x</code>的值不是对象，所以我们不能修改属性<code>x</code>。 <code>x</code>仍然等于<code>10</code>，<code>{x：10，y：20}</code>被打印。</p><p>注意，上述例子我们对属性<code>x</code>进行修改，可能会导致抛出TypeError异常（最常见但不仅限于严格模式下时）。</p></div></div><hr><h2 id="76-输出什么"><a href="#76-输出什么" class="headerlink" title="76. 输出什么?"></a>76. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;myName&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>当我们从右侧的对象解构属性<code>name</code>时，我们将其值<code>Lydia</code>分配给名为<code>myName</code>的变量。</p><p>使用<code>{name：myName}</code>，我们是在告诉JavaScript我们要创建一个名为<code>myName</code>的新变量，并且其值是右侧对象的<code>name</code>属性的值。</p><p>当我们尝试打印<code>name</code>，一个未定义的变量时，就会引发<code>ReferenceError</code>。</p></div></div><hr><h2 id="77-以下是个纯函数么"><a href="#77-以下是个纯函数么" class="headerlink" title="77. 以下是个纯函数么?"></a>77. 以下是个纯函数么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: Yes</li><li>B: No</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>纯函数在相同的输入值时，需产生相同的输出，其输出的结果，与输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。<br>纯函数不会产生副作用。</p><p>纯函数与副作用的定义可参考：<br><a href="https://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">https://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)</a></p></div></div><hr><h2 id="78-输出什么"><a href="#78-输出什么" class="headerlink" title="78. 输出什么?"></a>78. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`From cache! <span class="subst">$&#123;cache[num]&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = num + <span class="number">10</span>;</span><br><span class="line">      cache[num] = result;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Calculated! <span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFunction = <span class="title function_">add</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">5</span> * <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li><li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li><li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li><li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>add</code>函数是一个记忆函数。 通过记忆化，我们可以缓存函数的结果，以加快其执行速度。上述情况，我们创建一个<code>cache</code>对象，用于存储先前返回过的值。</p><p>如果我们使用相同的参数多次调用<code>addFunction</code>函数，它首先检查缓存中是否已有该值，如果有，则返回缓存值，这将节省执行时间。如果没有，那么它将计算该值，并存储在缓存中。</p><p>我们用相同的值三次调用了<code>addFunction</code>函数：</p><p>在第一次调用，<code>num</code>等于<code>10</code>时函数的值尚未缓存，if语句<code>num in cache</code>返回<code>false</code>，else块的代码被执行：<code>Calculated! 20</code>，并且其结果被添加到缓存对象，<code>cache</code>现在看起来像<code>{10：20}</code>。</p><p>第二次，<code>cache</code>对象包含<code>10</code>的返回值。 if语句 <code>num in cache</code> 返回<code>true</code>，<code>From cache! 20</code>被打印。</p><p>第三次，我们将<code>5 * 2</code>(值为10)传递给函数。 <code>cache</code>对象包含<code>10</code>的返回值。 if语句 <code>num in cache</code> 返回<code>true</code>，<code>From cache! 20</code>被打印。</p></div></div><hr><h2 id="79-输出什么"><a href="#79-输出什么" class="headerlink" title="79. 输出什么?"></a><a name=20190726></a>79. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLifeSummedUp = [<span class="string">&quot;☕&quot;</span>, <span class="string">&quot;💻&quot;</span>, <span class="string">&quot;🍷&quot;</span>, <span class="string">&quot;🍫&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>B: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>C: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li><li>D:  <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&#123;0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>通过<code>for-in</code>循环，我们可以遍历一个对象<strong>自有的</strong>、<strong>继承的</strong>、<strong>可枚举的</strong>、<strong>非Symbol的</strong>属性。 在数组中，可枚举属性是数组元素的“键”， 即它们的索引。 类似于下面这个对象：</p><p><code>{0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;}</code></p><p>其中键则是可枚举属性，因此 <code>0</code>，<code>1</code>，<code>2</code>，<code>3</code>被记录。</p><p>通过<code>for-of</code>循环，我们可以迭代<strong>可迭代对象</strong>（包括 <code>Array</code>，<code>Map</code>，<code>Set</code>，<code>String</code>，<code>arguments</code>等）。当我们迭代数组时，在每次迭代中，不同属性的值将被分配给变量<code>item</code>, 因此<code>“☕”</code>，<code>“💻”</code>，<code>“🍷”</code>，<code>“🍫”</code>被打印。</p></div></div><hr><h2 id="80-输出什么"><a href="#80-输出什么" class="headerlink" title="80. 输出什么?"></a>80. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span> + <span class="number">2</span>, <span class="number">1</span> * <span class="number">2</span>, <span class="number">1</span> / <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;]</code></li><li>B: <code>[&quot;12&quot;, 2, 0.5]</code></li><li>C: <code>[3, 2, 0.5]</code></li><li>D:  <code>[1, 1, 1]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>数组元素可以包含任何值。 数字，字符串，布尔值，对象，数组，<code>null</code>，<code>undeifned</code>, 以及其他表达式，如日期，函数和计算。</p><p>元素将等于返回的值。 <code>1 + 2</code>返回<code>3</code>，<code>1 * 2</code>返回’2<code>，&#39;1 / 2</code>返回<code>0.5</code>。</p></div></div><hr><h2 id="81-输出什么"><a href="#81-输出什么" class="headerlink" title="81. 输出什么?"></a>81. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hi there, <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHi</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hi there, </code></li><li>B: <code>Hi there, undefined</code></li><li>C: <code>Hi there, null</code></li><li>D:  <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>默认情况下，如果不给函数传参，参数的值将为<code>undefined</code>。 上述情况，我们没有给参数<code>name</code>传值。 <code>name</code>等于<code>undefined</code>，并被打印。</p><p>在ES6中，我们可以使用默认参数覆盖此默认的<code>undefined</code>值。 例如：</p><p><code>function sayHi（name =“Lydia”）{...}</code></p><p>在这种情况下，如果我们没有传递值或者如果我们传递<code>undefined</code>，<code>name</code>总是等于字符串<code>Lydia</code></p></div></div><hr><h2 id="82-输出什么"><a href="#82-输出什么" class="headerlink" title="82. 输出什么?"></a>82. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> status = <span class="string">&quot;😎&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="string">&quot;😍&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;🥑&quot;</span>,</span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">getStatus</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">getStatus</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>))</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑&quot;</code> and <code>&quot;😍&quot;</code></li><li>B: <code>&quot;🥑&quot;</code> and <code>&quot;😎&quot;</code></li><li>C: <code>&quot;😍&quot;</code> and <code>&quot;😎&quot;</code></li><li>D: <code>&quot;😎&quot;</code> and <code>&quot;😎&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>this</code>关键字的指向取决于使用它的位置。 在<strong>函数</strong>中，比如<code>getStatus</code>，<code>this</code>指向的是调用它的对象，上述例子中<code>data</code>对象调用了<code>getStatus</code>，因此<code>this</code>指向的就是<code>data</code>对象。 当我们打印<code>this.status</code>时，<code>data</code>对象的<code>status</code>属性被打印，即<code>&quot;🥑&quot;</code>。</p><p>使用<code>call</code>方法，可以更改<code>this</code>指向的对象。<code>data.getStatus.call(this)</code>是将<code>this</code>的指向由<code>data</code>对象更改为全局对象。在全局对象上，有一个名为<code>status</code>的变量，其值为<code>”😎“</code>。 因此打印<code>this.status</code>时，会打印<code>“😎”</code>。</p></div></div><hr><h2 id="83-输出什么"><a href="#83-输出什么" class="headerlink" title="83. 输出什么?"></a>83. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> city = person.<span class="property">city</span></span><br><span class="line">city = <span class="string">&quot;Amsterdam&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot; &#125;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: undefined &#125;</code></li><li>D: <code>&quot;Amsterdam&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们将变量<code>city</code>设置为等于<code>person</code>对象上名为<code>city</code>的属性的值。 这个对象上没有名为<code>city</code>的属性，因此变量<code>city</code>的值为<code>undefined</code>。</p><p>请注意，我们没有引用<code>person</code>对象本身，只是将变量<code>city</code>设置为等于<code>person</code>对象上<code>city</code>属性的当前值。</p><p>然后，我们将<code>city</code>设置为等于字符串<code>“Amsterdam”</code>。 这不会更改person对象：没有对该对象的引用。</p><p>因此打印<code>person</code>对象时，会返回未修改的对象。</p></div></div><hr><h2 id="84-输出什么"><a href="#84-输出什么" class="headerlink" title="84. 输出什么?"></a>84. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Sorry, you&#x27;re too young.&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Yay! You&#x27;re old enough!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">21</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Sorry, you&#39;re too young.&quot;</code></li><li>B: <code>&quot;Yay! You&#39;re old enough!&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>const</code>和<code>let</code>声明的变量是具有<strong>块级作用域</strong>的，块是大括号（<code>{}</code>）之间的任何东西, 即上述情况<code>if / else</code>语句的花括号。 由于块级作用域，我们无法在声明的块之外引用变量，因此抛出<code>ReferenceError</code>。</p></div></div><hr><h2 id="85-什么样的信息将被打印"><a href="#85-什么样的信息将被打印" class="headerlink" title="85. 什么样的信息将被打印?"></a>85. 什么样的信息将被打印?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://www.website.com/api/user/1&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><ul><li>A: <code>fetch</code>方法的结果</li><li>B: 第二次调用<code>fetch</code>方法的结果</li><li>C: 前一个<code>.then()</code>中回调方法返回的结果</li><li>D: 总是<code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>第二个<code>.then</code>中<code>res</code>的值等于前一个<code>.then</code>中的回调函数返回的值。 你可以像这样继续链接<code>.then</code>，将值传递给下一个处理程序。</p></div></div><hr><h2 id="86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递"><a href="#86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递" class="headerlink" title="86. 哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递?"></a>86. 哪个选项是将<code>hasName</code>设置为<code>true</code>的方法，前提是不能将<code>true</code>作为参数传递?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hasName = <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>!!name</code></li><li>B: <code>name</code></li><li>C: <code>new Boolean(name)</code></li><li>D: <code>name.length</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用逻辑非运算符<code>!</code>，将返回一个布尔值，使用<code>!! name</code>，我们可以确定<code>name</code>的值是真的还是假的。 如果<code>name</code>是真实的，那么<code>!name</code>返回<code>false</code>。 <code>!false</code>返回<code>true</code>。</p><p>通过将<code>hasName</code>设置为<code>name</code>，可以将<code>hasName</code>设置为等于传递给<code>getName</code>函数的值，而不是布尔值<code>true</code>。</p><p><code>new Boolean（true）</code>返回一个对象包装器，而不是布尔值本身。</p><p><code>name.length</code>返回传递的参数的长度，而不是布尔值<code>true</code>。</p></div></div><h2 id="87-输出什么"><a href="#87-输出什么" class="headerlink" title="87. 输出什么?"></a>87. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I want pizza&quot;</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&quot;&quot;</code></li><li>B: <code>&quot;I&quot;</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>可以使用方括号表示法获取字符串中特定索引的字符，字符串中的第一个字符具有索引0，依此类推。 在这种情况下，我们想要得到索引为0的元素，字符<code>&#39;I&#39;</code>被记录。</p><p>请注意，IE7及更低版本不支持此方法。 在这种情况下，应该使用<code>.charAt（）</code></p></div></div><hr><h2 id="88-输出什么"><a href="#88-输出什么" class="headerlink" title="88. 输出什么?"></a>88. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2 = num1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>20</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>您可以将默认参数的值设置为函数的另一个参数，只要另一个参数定义在其之前即可。 我们将值<code>10</code>传递给<code>sum</code>函数。 如果<code>sum</code>函数只接收1个参数，则意味着没有传递<code>num2</code>的值，这种情况下，<code>num1</code>的值等于传递的值<code>10</code>。 <code>num2</code>的默认值是<code>num1</code>的值，即<code>10</code>。 <code>num1 + num2</code>返回<code>20</code>。</p><p>如果您尝试将默认参数的值设置为后面定义的参数，则可能导致参数的值尚未初始化，从而引发错误。比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">m = n, n = <span class="number">2</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>() <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;n&#x27; before initialization</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">3</span>) <span class="comment">// 3 2</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3 4</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="89-输出什么"><a href="#89-输出什么" class="headerlink" title="89. 输出什么?"></a>89. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> data <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; default: function default(), name: &quot;Lydia&quot; &#125;</code></li><li>B: <code>&#123; default: function default() &#125;</code></li><li>C: <code>&#123; default: &quot;Hello world&quot;, name: &quot;Lydia&quot; &#125;</code></li><li>D: Global object of <code>module.js</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>import * as name</code>语法，我们将<code>module.js</code>文件中所有<code>export</code>导入到<code>index.js</code>文件中，并且创建了一个名为<code>data</code>的新对象。 在<code>module.js</code>文件中，有两个导出：默认导出和命名导出。 默认导出是一个返回字符串“Hello World”的函数，命名导出是一个名为<code>name</code>的变量，其值为字符串<code>“Lydia”</code>。</p><p><code>data</code>对象具有默认导出的<code>default</code>属性，其他属性具有指定exports的名称及其对应的值。</p></div></div><hr><h2 id="90-输出什么"><a href="#90-输出什么" class="headerlink" title="90. 输出什么?"></a>90. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;class&quot;</code></li><li>B: <code>&quot;function&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;string&quot;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>类是构造函数的语法糖，如果用构造函数的方式来重写<code>Person</code>类则将是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>new</code>来调用构造函数，将会生成构造函数<code>Person</code>的实例，对实例执行<code>typeof</code>关键字将返回<code>&quot;object&quot;</code>，上述情况打印出<code>&quot;object&quot;</code>。</p></div></div><hr><h2 id="91-输出什么"><a href="#91-输出什么" class="headerlink" title="91. 输出什么?"></a>91. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newList.<span class="title function_">push</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 4, 5]</code></li><li>B: <code>[1, 2, 3, 5]</code></li><li>C: <code>[1, 2, 3, 4]</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>.push</code>方法返回数组的长度，而不是数组本身！ 通过将<code>newList</code>设置为<code>[1,2,3].push(4)</code>，实际上<code>newList</code>等于数组的新长度：<code>4</code>。</p><p>然后，尝试在<code>newList</code>上使用<code>.push</code>方法。 由于<code>newList</code>是数值<code>4</code>，抛出TypeError。</p></div></div><hr><h2 id="92-输出什么"><a href="#92-输出什么" class="headerlink" title="92. 输出什么?"></a>92. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">giveLydiaPizza</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Here is pizza!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">giveLydiaChocolate</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;Here&#x27;s chocolate... now go hit the gym already.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaPizza.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaChocolate.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; constructor: ...&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>B: <code>&#123;&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>C: <code>&#123; constructor: ...&#125;</code> <code>&#123;&#125;</code></li><li>D: <code>&#123; constructor: ...&#125;</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>常规函数，例如<code>giveLydiaPizza</code>函数，有一个<code>prototype</code>属性，它是一个带有<code>constructor</code>属性的对象（原型对象）。 然而，箭头函数，例如<code>giveLydiaChocolate</code>函数，没有这个<code>prototype</code>属性。 尝试使用<code>giveLydiaChocolate.prototype</code>访问<code>prototype</code>属性时会返回<code>undefined</code>。</p></div></div><hr><h2 id="93-输出什么"><a href="#93-输出什么" class="headerlink" title="93. 输出什么?"></a>93. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [x, y] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(person)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li><li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> and <code>[&quot;age&quot;, 21]</code> </li><li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> and <code>undefined</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，上述情况返回一个二维数组，数组每个元素是一个包含键和值的数组：</p><p><code>[[&#39;name&#39;，&#39;Lydia&#39;]，[&#39;age&#39;，21]]</code></p><p>使用<code>for-of</code>循环，我们可以迭代数组中的每个元素，上述情况是子数组。 我们可以使用<code>const [x，y]</code>在<code>for-of</code>循环中解构子数组。 <code>x</code>等于子数组中的第一个元素，<code>y</code>等于子数组中的第二个元素。</p><p>第一个子阵列是<code>[“name”，“Lydia”]</code>，其中<code>x</code>等于<code>name</code>，而<code>y</code>等于<code>Lydia</code>。<br>第二个子阵列是<code>[“age”，21]</code>，其中<code>x</code>等于<code>age</code>，而<code>y</code>等于<code>21</code>。</p></div></div><hr><h2 id="94-输出什么"><a href="#94-输出什么" class="headerlink" title="94. 输出什么?"></a>94. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getItems</span>(<span class="params">fruitList, ...args, favoriteFruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getItems</span>([<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>], <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;]</code></li><li>B: <code>[[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;]</code> </li><li>C: <code>[&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;]</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>... args</code>是剩余参数，剩余参数的值是一个包含所有剩余参数的数组，<strong>并且只能作为最后一个参数</strong>。上述示例中，剩余参数是第二个参数，这是不可能的，并会抛出语法错误。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getItems</span>(<span class="params">fruitList, favoriteFruit, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getItems</span>([<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>], <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure><p>上述例子是有效的，将会返回数组：<code>[ &#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;pear&#39; ]</code></p></div></div><hr><h2 id="95-输出什么"><a href="#95-输出什么" class="headerlink" title="95. 输出什么?"></a><a name=20190817></a>95. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nums</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span></span><br><span class="line">  (a &gt; b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li><li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li><li>C: <code>undefined</code> and <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>在JavaScript中，我们不必显式地编写分号(<code>;</code>)，但是JavaScript引擎仍然在语句之后自动添加分号。这称为<strong>自动分号插入</strong>。例如，一个语句可以是变量，或者像<code>throw</code>、<code>return</code>、<code>break</code>这样的关键字。</p><p>在这里，我们在新的一行上写了一个<code>return</code>语句和另一个值<code>a + b </code>。然而，由于它是一个新行，引擎并不知道它实际上是我们想要返回的值。相反，它会在<code>return</code>后面自动添加分号。你可以这样看:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><p>这意味着永远不会到达<code>a + b</code>，因为函数在<code>return</code>关键字之后停止运行。如果没有返回值，就像这里，函数返回<code>undefined</code>。注意，在<code>if/else</code>语句之后没有自动插入!</p></div></div><hr><h2 id="96-输出什么"><a href="#96-输出什么" class="headerlink" title="96. 输出什么?"></a>96. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> = <span class="keyword">class</span> <span class="title class_">AnotherPerson</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;Sarah&quot;</code></li><li>C: <code>Error: cannot redeclare Person</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们可以将类设置为等于其他类/函数构造函数。 在这种情况下，我们将<code>Person</code>设置为<code>AnotherPerson</code>。 这个构造函数的名字是<code>Sarah</code>，所以新的<code>Person</code>实例<code>member</code>上的name属性是<code>Sarah</code>。</p></div></div><hr><h2 id="97-输出什么"><a href="#97-输出什么" class="headerlink" title="97. 输出什么?"></a>97. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>)]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(info))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[&quot;&#123;Symbol(&#39;a&#39;)&quot;]</code></li><li>B: <code>&#123;&#125;</code> and <code>[]</code></li><li>C: <code>&#123; a: &quot;b&quot; &#125;</code> and <code>[&quot;a&quot;]</code></li><li>D: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>Symbol</code>类型是不可枚举的。<code>Object.keys</code>方法返回对象上的所有可枚举的键属性。<code>Symbol</code>类型是不可见的，并返回一个空数组。 记录整个对象时，所有属性都是可见的，甚至是不可枚举的属性。</p><p>这是<code>Symbol</code>的众多特性之一：除了表示完全唯一的值（防止对象意外名称冲突，例如当使用2个想要向同一对象添加属性的库时），您还可以<code>隐藏</code>这种方式对象的属性（尽管不完全。你仍然可以使用<code>Object.getOwnPropertySymbols()</code>方法访问 <code>Symbol</code>。</p></div></div><hr><h2 id="98-输出什么"><a href="#98-输出什么" class="headerlink" title="98. 输出什么?"></a>98. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params">[x, ...y]</span>) =&gt; [x, y]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUser</span> = user =&gt; &#123; <span class="attr">name</span>: user.<span class="property">name</span>, <span class="attr">age</span>: user.<span class="property">age</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getList</span>(list))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getUser</span>(user))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, [2, 3, 4]]</code> and <code>undefined</code></li><li>B: <code>[1, [2, 3, 4]]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>[1, 2, 3, 4]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>D: <code>Error</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>getList</code>函数接收一个数组作为其参数。 在<code>getList</code>函数的括号之间，我们立即解构这个数组。 您可以将其视为：</p><p> <code>[x, ...y] = [1, 2, 3, 4]</code></p><p>使用剩余的参数<code>... y</code>，我们将所有剩余参数放在一个数组中。 在这种情况下，其余的参数是<code>2</code>，<code>3</code>和<code>4</code>。 <code>y</code>的值是一个数组，包含所有其余参数。 在这种情况下，<code>x</code>的值等于<code>1</code>，所以当我们打印<code>[x，y]</code>时，会打印<code>[1，[2,3,4]]</code>。</p><p> <code>getUser</code>函数接收一个对象。对于箭头函数，如果只返回一个值，我们不必编写花括号。但是，如果您想从一个箭头函数返回一个对象，您必须在圆括号之间编写它，否则不会返回任何值!下面的函数将返回一个对象:</p><p><code>const getUser = user =&gt; ({ name: user.name, age: user.age })</code></p><p>由于在这种情况下不返回任何值，因此该函数返回<code>undefined</code>。</p></div></div><hr><h2 id="99-输出什么"><a href="#99-输出什么" class="headerlink" title="99. 输出什么?"></a>99. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">name</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>SyntaxError</code></li><li>B: <code>ReferenceError</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>变量<code>name</code>保存字符串的值，该字符串不是函数，因此无法调用。</p><p>当值不是预期类型时，会抛出<code>TypeErrors</code>。 JavaScript期望<code>name</code>是一个函数，因为我们试图调用它。 但它是一个字符串，因此抛出<code>TypeError</code>：<code>name is not a function</code></p><p>当你编写了一些非有效的JavaScript时，会抛出语法错误，例如当你把<code>return</code>这个词写成<code>retrun</code>时。<br>当JavaScript无法找到您尝试访问的值的引用时，抛出<code>ReferenceErrors</code>。</p></div></div><hr><h2 id="100-输出什么"><a href="#100-输出什么" class="headerlink" title="100. 输出什么?"></a>100. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🎉✨ This is my 100th question! ✨🎉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">`<span class="subst">$&#123;[] &amp;&amp; <span class="string">&#x27;Im&#x27;</span>&#125;</span>possible!</span></span><br><span class="line"><span class="string">You should<span class="subst">$&#123;<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="string">`n&#x27;t`</span>&#125;</span> see a therapist after so much JavaScript lol`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li><li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li><li>C: <code>possible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li><li>D: <code>Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p><code>[]</code>是一个真值。 使用<code>&amp;&amp;</code>运算符，如果左侧值是真值，则返回右侧值。 在这种情况下，左侧值<code>[]</code>是一个真值，所以返回<code>Im</code>。</p><p><code>&quot;&quot;</code>是一个假值。 如果左侧值是假的，则不返回任何内容。 <code>n&#39;t</code>不会被退回。</p></div></div><hr><h2 id="101-输出什么"><a href="#101-输出什么" class="headerlink" title="101.输出什么?"></a>101.输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> one = (<span class="literal">false</span> || &#123;&#125; || <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> two = (<span class="literal">null</span> || <span class="literal">false</span> || <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> three = ([] || <span class="number">0</span> || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one, two, three)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>null</code> <code>[]</code></li><li>B: <code>null</code> <code>&quot;&quot;</code> <code>true</code></li><li>C: <code>&#123;&#125;</code> <code>&quot;&quot;</code> <code>[]</code></li><li>D: <code>null</code> <code>null</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用<code>||</code>运算符，我们可以返回第一个真值。 如果所有值都是假值，则返回最后一个值。</p><p><code>（false || {} || null）</code>：空对象<code>{}</code>是一个真值。 这是第一个（也是唯一的）真值，它将被返回。<code>one</code>等于<code>{}</code>。</p><p><code>（null || false ||“”）</code>：所有值都是假值。 这意味着返回传递的值<code>&quot;&quot;</code>。 <code>two</code>等于<code>&quot;&quot;</code>。</p><p><code>（[] || 0 ||“”）</code>：空数组<code>[]</code>是一个真值。 这是第一个返回的真值。 <code>three</code>等于<code>[]</code>。</p></div></div><hr><h2 id="102-依次输出什么"><a href="#102-依次输出什么" class="headerlink" title="102. 依次输出什么?"></a>102. 依次输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myPromise</span> = (<span class="params"></span>) =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;I have resolved!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">myPromise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">secondFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">myPromise</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">firstFunction</span>()</span><br><span class="line"><span class="title function_">secondFunction</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li><li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li><li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li><li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>有了promise，我们通常会说：当我想要调用某个方法，但是由于它可能需要一段时间，因此暂时将它放在一边。只有当某个值被resolved/rejected，并且执行栈为空时才使用这个值。</p><p>我们可以在<code>async</code>函数中通过<code>.then</code>和<code>await</code>关键字获得该值。 尽管我们可以通过<code>.then</code>和<code>await</code>获得promise的价值，但是它们的工作方式有所不同。</p><p>在 <code>firstFunction</code>中，当运行到<code>myPromise</code>方法时我们将其放在一边，即promise进入微任务队列，其他后面的代码（<code>console.log(&#39;second&#39;)</code>）照常运行，因此<code>second</code>被打印出，<code>firstFunction</code>方法到此执行完毕，执行栈中宏任务队列被清空，此时开始执行微任务队列中的任务，<code>I have resolved</code>被打印出。</p><p>在<code>secondFunction</code>方法中，我们通过<code>await</code>关键字，暂停了后面代码的执行，直到异步函数的值被解析才开始后面代码的执行。这意味着，它会等着直到 <code>myPromise</code> 以值<code>I have resolved</code>被解决之后，下一行<code>second</code>才开始执行。</p></div></div><hr><h2 id="103-输出什么"><a href="#103-输出什么" class="headerlink" title="103. 输出什么?"></a>103. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&quot;Lydia&quot;</span>)</span><br><span class="line">set.<span class="title function_">add</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li><li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li><li>C: <code>3</code>, <code>Lydia2</code>, <code>[Object object]2</code></li><li>D: <code>&quot;12&quot;</code>, <code>Lydia2</code>, <code>[Object object]2</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>“+”运算符不仅用于添加数值，还可以使用它来连接字符串。 每当JavaScript引擎发现一个或多个值不是数字时，就会将数字强制为字符串。 </p><p>第一个是数字1。 1 + 2返回数字3。</p><p>但是，第二个是字符串“Lydia”。 “Lydia”是一个字符串，2是一个数字：2被强制转换为字符串。 “Lydia”和“2”被连接起来，产生字符串“Lydia2”。</p><p><code>{name：“ Lydia”}</code>是一个对象。 数字和对象都不是字符串，因此将二者都字符串化。 每当我们对常规对象进行字符串化时，它就会变成<code>[Object object]</code>。 与“2”串联的“ [Object object]”成为“[Object object]2”。</p></div></div><hr><h2 id="104-结果是什么"><a href="#104-结果是什么" class="headerlink" title="104. 结果是什么?"></a>104. 结果是什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>5</code></li><li>B: <code>Promise &#123;&lt;pending&gt;: 5&#125;</code></li><li>C: <code>Promise &#123;&lt;fulfilled&gt;: 5&#125;</code></li><li>D: <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们可以将我们想要的任何类型的值传递<code>Promise.resolve</code>，无论是否<code>promise</code>。 该方法本身返回带有已解析值的<code>Promise</code> (<code>&lt;fulfilled&gt;</code>)。 如果您传递常规函数，它将是具有常规值的已解决<code>promise</code>。 如果你通过了promise，它将是一个已经resolved的且带有传的值的promise。</p><p>上述情况，我们传了数字5，因此返回一个resolved状态的promise，resolve值为<code>5</code></p></div></div><h2 id="105-输出什么"><a href="#105-输出什么" class="headerlink" title="105. 输出什么?"></a>105. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareMembers</span>(<span class="params">person1, person2 = person</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person1 !== person2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Not the same!&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;They are the same!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compareMembers</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Not the same!</code></li><li>B: <code>They are the same!</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象通过引用传递。 当我们检查对象的严格相等性（===）时，我们正在比较它们的引用。</p><p>我们将“person2”的默认值设置为“person”对象，并将“person”对象作为“person1”的值传递。</p><p>这意味着两个值都引用内存中的同一位置，因此它们是相等的。</p><p>运行“ else”语句中的代码块，并记录<code>They are the same!</code> 。</p></div></div><hr><h2 id="106-输出什么"><a href="#106-输出什么" class="headerlink" title="106. 输出什么?"></a>106. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colorConfig = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">black</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">yellow</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorConfig.<span class="property">colors</span>[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li><li>C: <code>undefined</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在JavaScript中，我们有两种访问对象属性的方法：括号表示法或点表示法。 在此示例中，我们使用点表示法（<code>colorConfig.colors</code>）代替括号表示法（<code>colorConfig [“ colors”]</code>）。</p><p>使用点表示法，JavaScript会尝试使用该确切名称在对象上查找属性。 在此示例中，JavaScript尝试在colorconfig对象上找到名为colors的属性。 没有名为“colors”的属性，因此返回“undefined”。<br>然后，我们尝试使用<code>[1]</code>访问第一个元素的值。 我们无法对未定义的值执行此操作，因此会抛出<code>Cannot read property &#39;1&#39; of undefined</code>。</p><p>JavaScript解释（或取消装箱）语句。 当我们使用方括号表示法时，它会看到第一个左方括号<code>[</code>并一直进行下去，直到找到右方括号<code>]</code>。 只有这样，它才会评估该语句。 如果我们使用了colorConfig [colors [1]]，它将返回colorConfig对象上red属性的值。</p></div></div><hr><h2 id="107-输出什么"><a href="#107-输出什么" class="headerlink" title="107. 输出什么?"></a>107. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤️&#x27;</span> === <span class="string">&#x27;❤️&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>在内部，表情符号是unicode。 heat表情符号的unicode是<code>“ U + 2764 U + FE0F”</code>。 对于相同的表情符号，它们总是相同的，因此我们将两个相等的字符串相互比较，这将返回true。</p></div></div><hr><h2 id="108-哪些方法修改了原数组"><a href="#108-哪些方法修改了原数组" class="headerlink" title="108. 哪些方法修改了原数组?"></a>108. 哪些方法修改了原数组?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&#x27;✨&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;😍&#x27;</span>]</span><br><span class="line"></span><br><span class="line">emojis.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>) </span><br><span class="line">emojis.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>All of them</code></li><li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li><li>C: <code>map</code> <code>slice</code> <code>splice</code> </li><li>D: <code>splice</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>使用<code>splice</code>方法，我们通过删除，替换或添加元素来修改原始数组。 在这种情况下，我们从索引1中删除了2个元素（我们删除了<code>&#39;🥑&#39;</code>和<code>&#39;😍&#39;</code>），同时添加了✨emoji表情。</p><p><code>map</code>，<code>filter</code>和<code>slice</code>返回一个新数组，<code>find</code>返回一个元素，而<code>reduce</code>返回一个减小的值。</p></div></div><hr><h2 id="109-输出什么"><a href="#109-输出什么" class="headerlink" title="109. 输出什么?"></a><a name=20191009></a>109. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> food = [<span class="string">&#x27;🍕&#x27;</span>, <span class="string">&#x27;🍫&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;🍔&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">favoriteFood</span>: food[<span class="number">0</span>] &#125;</span><br><span class="line"></span><br><span class="line">info.<span class="property">favoriteFood</span> = <span class="string">&#x27;🍝&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>B: <code>[&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>C: <code>[&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code> </li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们将<code>info</code>对象上的<code>favoriteFood</code>属性的值设置为披萨表情符号“🍕”的字符串。字符串是原始数据类型。在JavaScript中，原始数据类型通过值起作用</p><p>在这种情况下，我们将<code>info</code>对象上的<code>favoriteFood</code>属性的值设置为等于<code>food</code>数组中的第一个元素的值，字符串为披萨表情符号（<code>&#39;🍕&#39;</code> ）。字符串是原始数据类型，并且通过值进行交互，我们更改<code>info</code>对象上<code>favoriteFood</code>属性的值。 food数组没有改变，因为favoriteFood的值只是该数组中第一个元素的值的复制，并且与该元素上的元素没有相同的内存引用食物<code>[0]</code>。当我们记录食物时，它仍然是原始数组<code>[&#39;🍕&#39;，&#39;🍫&#39;，&#39;🥑&#39;，&#39;🍔&#39;]</code>。</p></div></div><hr><h2 id="110-这个函数干了什么"><a href="#110-这个函数干了什么" class="headerlink" title="110. 这个函数干了什么?"></a>110. 这个函数干了什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Parses JSON to a JavaScript value</li><li>B: Parses a JavaScript object to JSON</li><li>C: Parses any JavaScript value to JSON</li><li>D: Parses JSON to a JavaScript object only</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用<code>JSON.parse()</code>方法，我们可以将JSON字符串解析为JavaScript值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数字字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonNumber = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="number">4</span>) <span class="comment">// &#x27;4&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonNumber) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组值字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// &#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonArray) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;) <span class="comment">// &#x27;&#123;&quot;name&quot;:&quot;Lydia&quot;&#125;&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonArray) <span class="comment">// &#123; name: &#x27;Lydia&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="111-输出什么"><a href="#111-输出什么" class="headerlink" title="111. 输出什么?"></a>111. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;Sarah&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Lydia</li><li>B: Sarah</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>每个函数都有其自己的执行上下文。 <code>getName</code>函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量<code>name</code>。 上述情况，<code>getName</code>函数包含其自己的<code>name</code>变量：我们用<code>let</code>关键字和<code>Sarah</code>的值声明变量<code>name</code>。</p><p>带有<code>let</code>关键字（和<code>const</code>）的变量被提升，但是与<code>var</code>不同，它不会被**<em>初始化**</em>。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出<code>ReferenceError: Cannot access &#39;name&#39; before initialization</code>。</p><p>如果我们不在<code>getName</code>函数中声明<code>name</code>变量，则javascript引擎会查看原型练。会找到其外部作用域有一个名为<code>name</code>的变量，其值为<code>Lydia</code>。 在这种情况下，它将打印<code>Lydia</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>() <span class="comment">// Lydia</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="112-输出什么？"><a href="#112-输出什么？" class="headerlink" title="112. 输出什么？"></a>112. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = <span class="title function_">generatorOne</span>()</span><br><span class="line"><span class="keyword">const</span> two = <span class="title function_">generatorTwo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>a</code> and <code>a</code></li><li>B: <code>a</code> and <code>undefined</code></li><li>C: <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> and <code>a</code></li><li>D: <code>a</code> and <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过 <code>yield</code> 关键字, 我们在 <code>Generator</code> 函数里执行<code>yield</code>表达式. 通过 <code>yield*</code> 关键字, 我们可以在一个<code>Generator</code> 函数里面执行（<code>yield</code>表达式）另一个 <code>Generator</code> 函数, 或可遍历的对象 (如数组).</p><p>在函数 <code>generatorOne</code> 中, 我们通过 <code>yield</code> 关键字 yield 了一个完整的数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>。函数<code>one</code>通过<code>next</code>方法返回的对象的<code>value</code> 属性的值 (<code>one.next().value</code>) 等价于数组 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在函数 <code>generatorTwo</code> 中, 我们使用 <code>yield*</code> 关键字。就相当于函数<code>two</code>第一个<code>yield</code>的值, 等价于在迭代器中第一个 <code>yield</code> 的值。数组<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>就是这个迭代器. 第一个 <code>yield</code> 的值就是 <code>a</code>, 所以我们第一次调用 <code>two.next().value</code>时, 就返回<code>a</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></div></div><hr><h2 id="113-输出什么？"><a href="#113-输出什么？" class="headerlink" title="113. 输出什么？"></a>113. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;(x =&gt; x)(<span class="string">&#x27;I love&#x27;</span>)&#125;</span> to program`</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>I love to program</code></li><li>B: <code>undefined to program</code></li><li>C: <code>$&#123;(x =&gt; x)(&#39;I love&#39;) to program</code></li><li>D: <code>TypeError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>带有模板字面量的表达式首先被执行。相当于字符串会包含表达式，这个立即执行函数 <code>(x =&gt; x)(&#39;I love&#39;)</code> 返回的值. 我们向箭头函数 <code>x =&gt; x</code> 传递 <code>&#39;I love&#39;</code> 作为参数。<code>x</code> 等价于返回的 <code>&#39;I love&#39;</code>。这就是结果 <code>I love to program</code>。</p></div></div><hr><h2 id="114-将会发生什么"><a href="#114-将会发生什么" class="headerlink" title="114. 将会发生什么?"></a>114. 将会发生什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">alert</span>: <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Alert!&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>setInterval</code> 的回调不会被调用</li><li>B: <code>setInterval</code> 的回调被调用一次</li><li>C: <code>setInterval</code> 的回调仍然会被每秒钟调用</li><li>D: 我们从没调用过 <code>config.alert()</code>, config 为 <code>null</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>一般情况下当我们将对象赋值为 <code>null</code>, 那些对象会被进行 <em>垃圾回收（garbage collected）</em> 因为已经没有对这些对象的引用了。然而，<code>setInterval</code>的参数是一个箭头函数（所以上下文绑定到对象 <code>config</code> 了），回调函数仍然保留着对 <code>config</code>的引用。只要存在引用，对象就不会被垃圾回收。因为没有被垃圾回收，<code>setInterval</code> 的回调每1000ms (1s)会被调用一次。</p></div></div><hr><h2 id="115-哪一个方法会返回-39-Hello-world-39-？"><a href="#115-哪一个方法会返回-39-Hello-world-39-？" class="headerlink" title="115. 哪一个方法会返回 &#39;Hello world!&#39; ？"></a>115. 哪一个方法会返回 <code>&#39;Hello world!&#39;</code> ？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;greeting&#x27;</span></span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">set</span>(myFunc, <span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&#x27;greeting&#x27;</span>)</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">myMap.<span class="title function_">get</span>(myFunc)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 2 and 3</li><li>D: All of them</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>当通过 <code>set</code> 方法添加一个键值对，一个传递给 <code>set</code>方法的参数将会是键名，第二个参数将会是值。在这个case里，键名为 <em>函数</em> <code>() =&gt; &#39;greeting&#39;</code>，值为<code>&#39;Hello world&#39;</code>。 <code>myMap</code> 现在就是 <code>{ () =&gt; &#39;greeting&#39; =&gt; &#39;Hello world!&#39; }</code>。</p><p>1 是错的，因为键名不是 <code>&#39;greeting&#39;</code> 而是 <code>() =&gt; &#39;greeting&#39;</code>。<br>3 是错的，因为我们给<code>get</code> 方法传递了一个新的函数。对象受 <em>引用</em> 影响。函数也是对象，因此两个函数严格上并不等价，尽管他们相同：他们有两个不同的内存引用地址。</p></div></div><hr><h2 id="116-输出什么？"><a href="#116-输出什么？" class="headerlink" title="116. 输出什么？"></a>116. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAge</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAgeAndName</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; &#123;</span><br><span class="line">  x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">  x.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeAge</span>(person)</span><br><span class="line"><span class="title function_">changeAgeAndName</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;name: &quot;Sarah&quot;, age: 22&#125;</code></li><li>B: <code>&#123;name: &quot;Sarah&quot;, age: 23&#125;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code></li><li>D: <code>&#123;name: &quot;Lydia&quot;, age: 23&#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>函数 <code>changeAge</code> 和函数 <code>changeAgeAndName</code> 有着不同的参数，定义一个 <em>新</em> 生成的对象 <code>{ ...person }</code>。这个对象有着所有 <code>person</code> 对象 中 k/v 值的副本。</p><p>首项, 我们调用 <code>changeAge</code> 函数并传递 <code>person</code> 对象作为它的参数。这个函数对 <code>age</code> 属性进行加一操作。<code>person</code> 现在是 <code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p><p>然后，我们调用函数 <code>changeAgeAndName</code> ，然而我们没有传递参数。取而代之，<code>x</code> 的值等价 <em>new</em> 生成的对象: <code>{ ...person }</code>。因为它是一个新生成的对象，它并不会对对象 <code>person</code> 造成任何副作用。<code>person</code> 仍然等价于 <code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p></div></div><hr><h2 id="117-下面那个选项将会返回-6"><a href="#117-下面那个选项将会返回-6" class="headerlink" title="117. 下面那个选项将会返回 6?"></a>117. 下面那个选项将会返回 <code>6</code>?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumValues</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sumValues([...1, 2, 3])</code></li><li>B: <code>sumValues([...[1, 2, 3]])</code></li><li>C: <code>sumValues(...[1, 2, 3])</code></li><li>D: <code>sumValues([1, 2, 3])</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过展开操作符 <code>...</code>，我们可以 <em>暂开</em> 单个可迭代的元素。函数 <code>sumValues</code> function 接收三个参数： <code>x</code>, <code>y</code> 和 <code>z</code>。<code>...[1, 2, 3]</code> 的执行结果为 <code>1, 2, 3</code>，将会传递给函数 <code>sumValues</code>。</p></div></div><hr><h2 id="118-输出什么？"><a href="#118-输出什么？" class="headerlink" title="118. 输出什么？"></a>118. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&quot;🥳&quot;</span>, <span class="string">&quot;🤠&quot;</span>, <span class="string">&quot;🥰&quot;</span>, <span class="string">&quot;🤪&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list[(num += <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><ul><li>A: <code>🤠</code></li><li>B: <code>🥰</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过 <code>+=</code> 操作符，我们对值 <code>num</code> 进行加 <code>1</code> 操作。 <code>num</code> 有初始值 <code>1</code>，因此 <code>1 + 1</code> 的执行结果为 <code>2</code>。数组 <code>list</code> 的第二项为 🥰，<code>console.log(list[2])</code> 输出 🥰.</p></div></div><hr><h2 id="119-输出什么？"><a href="#119-输出什么？" class="headerlink" title="119. 输出什么？"></a>119. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&quot;Hallie&quot;</span>,</span><br><span class="line"><span class="attr">pet</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span>,</span><br><span class="line"><span class="attr">breed</span>: <span class="string">&quot;Dutch Tulip Hound&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">family</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getFullName</span>?.());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">getLastName</span>?.());</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>undefined</code></li><li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li><li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过 ES10 或 TS3.7+<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE">可选链操作符 <code>?.</code></a>，我们不再需要显式检测更深层的嵌套值是否有效。如果我们尝试获取 <code>undefined</code> 或 <code>null</code> 的值 (<em>nullish</em>)，表达将会短路并返回 <code>undefined</code>.</p><p><code>person.pet?.name</code>： <code>person</code> 有一个名为 <code>pet</code> 的属性： <code>person.pet</code> 不是 nullish。它有个名为 <code>name</code> 的属性，并返回字符串 <code>Mara</code>。<br><code>person.pet?.family?.name</code>： <code>person</code> 有一个名为 <code>pet</code> 的属性： <code>person.pet</code> 不是 nullish. <code>pet</code> <em>并没有</em> 一个名为 <code>family</code> 的属性, <code>person.pet.family</code> 是 nullish。表达式返回 <code>undefined</code>。<br><code>person.getFullName?.()</code>： <code>person</code> 有一个名为 <code>getFullName</code> 的属性： <code>person.getFullName()</code> 不是 nullish 并可以被调用，返回字符串 <code>Lydia Hallie</code>。<br><code>member.getLastName?.()</code>: <code>member</code> is not defined: <code>member.getLastName()</code> is nullish. The expression returns <code>undefined</code>.</p></div></div><hr><h2 id="120-输出什么？"><a href="#120-输出什么？" class="headerlink" title="120. 输出什么？"></a>120. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> groceries = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;peanuts&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (groceries.<span class="title function_">indexOf</span>(<span class="string">&quot;banana&quot;</span>)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;We have to buy bananas!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`We don&#x27;t have to buy bananas!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: We have to buy bananas!</li><li>B: We don’t have to buy bananas</li><li>C: <code>undefined</code></li><li>D: <code>1</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们传递了一个状态 <code>groceries.indexOf(&quot;banana&quot;)</code> 给if条件语句。<code>groceries.indexOf(&quot;banana&quot;)</code> 返回 <code>0</code>， 一个 falsy 的值。因为if条件语句的状态为 falsy，<code>else</code> 块区内的代码执行，并且 <code>We don&#39;t have to buy bananas!</code> 被输出.</p></div></div><hr><h2 id="121-输出什么"><a href="#121-输出什么" class="headerlink" title="121. 输出什么?"></a>121. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">languages</span>: [],</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">language</span>(<span class="params">lang</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">languages</span>.<span class="title function_">push</span>(lang);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">language</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>function language(lang) &#123; this.languages.push(lang &#125;</code></li><li>B: <code>0</code></li><li>C: <code>[]</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>方法 <code>language</code> 是一个 <code>setter</code>。Setters 并不保存一个实际值，它们的使命在于 <em>修改</em> 属性。当调用方法 <code>setter</code>， 返回 <code>undefined</code>。</p></div></div><hr><h2 id="122-输出什么？"><a href="#122-输出什么？" class="headerlink" title="122. 输出什么？"></a>122. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;object&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;string&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code></li><li>B: <code>true</code> <code>false</code></li><li>C: <code>false</code> <code>false</code></li><li>D: <code>true</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p><code>typeof name</code> 返回 <code>&quot;string&quot;</code>。字符串 <code>&quot;string&quot;</code> 是一个 truthy 的值，因此 <code>!typeof name</code> 返回一个布尔值 <code>false</code>。 <code>false === &quot;object&quot;</code> 和 <code>false === &quot;string&quot;</code> 都返回 <code>false</code>。</p><p>（如果我们想检测一个值的类型，我们应该用 <code>!==</code> 而不是 <code>!typeof</code>）</p></div></div><hr><h2 id="123-输出什么"><a href="#123-输出什么" class="headerlink" title="123. 输出什么?"></a>123. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>4</code> <code>5</code> <code>6</code></li><li>B: <code>6</code> <code>5</code> <code>4</code></li><li>C: <code>4</code> <code>function</code> <code>function</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>函数 <code>add</code> 是一个返回 返回箭头函数的箭头函数 的箭头函数（still with me?）。第一个函数接收一个值为 <code>4</code> 的参数 <code>x</code>。我们调用第二个函数，它接收一个值为 <code>5</code> 的参数 <code>y</code>。然后我们调用第三个函数，它接收一个值为 <code>6</code> 的参数 <code>z</code>。当我们尝试在最后一个箭头函数中获取 <code>x</code>, <code>y</code> 和 <code>z</code> 的值，JS 引擎根据作用域链去找 <code>x</code> 和 <code>y</code> 的值。得到 <code>4</code> <code>5</code> <code>6</code>.</p></div></div><hr><h2 id="124-输出什么？"><a href="#124-输出什么？" class="headerlink" title="124. 输出什么？"></a>124. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">range</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> gen) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise &#123;1&#125;</code> <code>Promise &#123;2&#125;</code> <code>Promise &#123;3&#125;</code></li><li>B: <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>C: <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>我们给 函数range 传递： <code>Promise{1}</code>, <code>Promise{2}</code>, <code>Promise{3}</code>，Generator 函数 <code>range</code> 返回一个全是 async object promise 数组。我们将 async object 赋值给变量 <code>gen</code>，之后我们使用<code>for await ... of</code> 进行循环遍历。我们将返回的 Promise 实例赋值给 <code>item</code>： 第一个返回 <code>Promise{1}</code>， 第二个返回 <code>Promise{2}</code>，之后是 <code>Promise{3}</code>。因为我们正 <em>awaiting</em> <code>item</code> 的值，resolved 状态的 promsie，promise数组的resolved <em>值</em> 以此为： <code>1</code>，<code>2</code>，<code>3</code>.</p></div></div><hr><h2 id="125-输出什么？"><a href="#125-输出什么？" class="headerlink" title="125. 输出什么？"></a>125. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params">&#123; x, y, z &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> <code>3</code></li><li>B: <code>&#123;1: 1&#125;</code> <code>&#123;2: 2&#125;</code> <code>&#123;3: 3&#125;</code></li><li>C: <code>&#123; 1: undefined &#125;</code> <code>undefined</code> <code>undefined</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>myFunc</code> 期望接收一个包含 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象作为它的参数。因为我们仅仅传递三个单独的数字值 (1, 2, 3) 而不是一个含有 <code>x</code>, <code>y</code> 和 <code>z</code> 属性的对象 ({x: 1, y: 2, z: 3})， <code>x</code>, <code>y</code> 和 <code>z</code> 有着各自的默认值 <code>undefined</code>.</p></div></div><hr><h2 id="126-输出什么？"><a href="#126-输出什么？" class="headerlink" title="126. 输出什么？"></a>126. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFine</span>(<span class="params">speed, amount</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formattedSpeed = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;unit&#x27;</span>, <span class="attr">unit</span>: <span class="string">&#x27;mile-per-hour&#x27;</span> &#125;</span><br><span class="line">  &#125;).<span class="title function_">format</span>(speed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formattedAmount = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;USD&#x27;</span> &#125;</span><br><span class="line">  &#125;).<span class="title function_">format</span>(amount)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`The driver drove <span class="subst">$&#123;formattedSpeed&#125;</span> and has to pay <span class="subst">$&#123;formattedAmount&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFine</span>(<span class="number">130</span>, <span class="number">300</span>))</span><br></pre></td></tr></table></figure><ul><li>A: The driver drove 130 and has to pay 300</li><li>B: The driver drove 130 mph and has to pay $300.00</li><li>C: The driver drove undefined and has to pay undefined</li><li>D: The driver drove 130.00 and has to pay 300.00</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过方法 <code>Intl.NumberFormat</code>，我们可以格式化任意区域的数字值。我们对数字值 <code>130</code> 进行 <code>mile-per-hour</code> 作为 <code>unit</code> 的 <code>en-US</code> 区域 格式化，结果为 <code>130 mph</code>。对数字值 <code>300</code> 进行 <code>USD</code> 作为 <code>currentcy</code> 的 <code>en-US</code> 区域格式化，结果为 <code>$300.00</code>.</p></div></div><hr><h2 id="127-输出什么？"><a href="#127-输出什么？" class="headerlink" title="127. 输出什么？"></a>127. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spookyItems = [<span class="string">&quot;👻&quot;</span>, <span class="string">&quot;🎃&quot;</span>, <span class="string">&quot;🕸&quot;</span>];</span><br><span class="line">(&#123; <span class="attr">item</span>: spookyItems[<span class="number">3</span>] &#125; = &#123; <span class="attr">item</span>: <span class="string">&quot;💀&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spookyItems);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;]</code></li><li>B: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code></li><li>C: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &#123; item: &quot;💀&quot; &#125;]</code></li><li>D: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过解构对象们，我们可以从右手边的对象中拆出值，并且将拆出的值分配给左手边对象同名的属性。在这种情况下，我们将值 “💀” 分配给 <code>spookyItems[3]</code>。相当于我们正在篡改数组 <code>spookyItems</code>，我们给它添加了值 “💀”。当输出 <code>spookyItems</code> 时，结果为 <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code>。</p></div></div><hr><h2 id="128-输出什么？"><a href="#128-输出什么？" class="headerlink" title="128. 输出什么？"></a>128. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(age));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(age));</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li><li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>通过方法 <code>Number.isNaN</code>，你可以检测你传递的值是否为 <em>数字值</em> 并且是否等价于 <code>NaN</code>。<code>name</code> 不是一个数字值，因此 <code>Number.isNaN(name)</code> 返回 <code>false</code>。<code>age</code> 是一个数字值，但它不等价于 <code>NaN</code>，因此 <code>Number.isNaN(age)</code> 返回 <code>false</code>.</p><p>通过方法 <code>isNaN</code>， 你可以检测你传递的值是否一个 number。<code>name</code> 不是一个 <code>number</code>，因此 <code>isNaN(name)</code> 返回 <code>true</code>. <code>age</code> 是一个 <code>number</code> 因此 <code>isNaN(age)</code> 返回 <code>false</code>.</p></div></div><hr><h2 id="129-输出什么？"><a href="#129-输出什么？" class="headerlink" title="129. 输出什么？"></a>129. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomValue = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> randomValue);</span><br><span class="line"><span class="keyword">const</span> randomValue = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>通过 <code>const</code> 关键字声明的变量在被初始化之前不可被引用：这被称之为 _暂时性死区_。在函数 <code>getInfo</code> 中, 变量 <code>randomValue</code> 声明在<code>getInfo</code> 的作用域的此法环境中。在想要对 <code>typeof randomValue</code> 进行log之前，变量 <code>randomValue</code> 仍未被初始化： 错误<code>ReferenceError</code> 被抛出! JS引擎并不会根据作用域链网上寻找该变量，因为我们已经在 <code>getInfo</code> 函数中声明了 <code>randomValue</code> 变量。</p></div></div><hr><h2 id="130-输出什么？"><a href="#130-输出什么？" class="headerlink" title="130. 输出什么？"></a>130. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Woah some cool data&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> myPromise);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Oops didn&#x27;t work`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh finally!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Woah some cool data</code></li><li>B: <code>Oh finally!</code></li><li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li><li>D: <code>Oops didn&#39;t work</code> <code>Oh finally!</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在 <code>try</code> 块区，我们打印 <code>myPromise</code> 变量的 awaited 值： <code>&quot;Woah some cool data&quot;</code>。因为<code>try</code> 块区没有错误抛出，<code>catch</code> 块区的代码并不执行。<code>finally</code> 块区的代码 <em>总是</em> 执行，<code>&quot;Oh finally!&quot;</code> 被输出。</p></div></div><hr><h2 id="131-输出什么？"><a href="#131-输出什么？" class="headerlink" title="131. 输出什么？"></a>131. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🥑&quot;</span>, [<span class="string">&quot;✨&quot;</span>, <span class="string">&quot;✨&quot;</span>, [<span class="string">&quot;🍕&quot;</span>, <span class="string">&quot;🍕&quot;</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emojis.<span class="title function_">flat</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]]</code></li><li>B: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>C: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>D: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>通过方法 <code>flat</code>， 我们可以创建一个新的, 已被扁平化的数组。被扁平化的深度取决于我们传递的值。在这个case里，我们传递了值 <code>1</code> (并不必要，这是默认值)，相当于只有第一层的数组才会被连接。即这个 case 里的 <code>[&#39;🥑&#39;]</code> and <code>[&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>。连接这两个数组得到结果 <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>.</p></div></div><hr><h2 id="132-输出什么？"><a href="#132-输出什么？" class="headerlink" title="132. 输出什么？"></a><a name=20191224></a>132. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterOne = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterTwo = counterOne;</span><br><span class="line">counterTwo.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterOne.<span class="property">count</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>2</code></li><li>D: <code>3</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>counterOne</code> 是类 <code>Counter</code> 的一个实例。类 Counter 包含一个<code>count</code> 属性在它的构造函数里， 和一个 <code>increment</code> 方法。首先，我们通过 <code>counterOne.increment()</code> 调用方法 <code>increment</code> 两次。现在, <code>counterOne.count</code> 为 <code>2</code>.</p><img src="https://i.imgur.com/KxLlTm9.png" width="400"><p>然后，我们创建一个新的变量 <code>counterTwo</code> 并将 <code>counterOne</code> 的引用地址赋值给它。因为对象受引用地址的影响，我们刚刚创建了一个新的对象，其引用地址和 <code>counterOne</code> 的等价。因此它们指向同一块内存地址，任何对其的副作用都会影响 <code>counterTwo</code>。现在 <code>counterTwo.count</code> 为 <code>2</code>。</p><p>我们调用 <code>counterTwo.increment()</code> 将 <code>count</code> 的值设为 <code>3</code>。然后，我们打印 <code>counterOne</code> 里的count，结果为 <code>3</code>。</p><img src="https://i.imgur.com/BNBHXmc.png" width="400"></div></div><hr><h2 id="133-输出什么？"><a href="#133-输出什么？" class="headerlink" title="133. 输出什么？"></a>133. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Promise!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">funcTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> myPromise;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> res);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">funcOne</span>();</span><br><span class="line"><span class="title function_">funcTwo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise! Last line! Promise! Last line! Last line! Promise!</code></li><li>B: <code>Last line! Timeout! Promise! Last line! Timeout! Promise!</code></li><li>C: <code>Promise! Last line! Last line! Promise! Timeout! Timeout!</code></li><li>D: <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>首先，我们调用 <code>funcOne</code>。在函数 <code>funcOne</code> 的第一行，我们调用<code>myPromise</code> promise <em>异步操作_。当JS引擎在忙于执行 promise，它继续执行函数 <code>funcOne</code>。下一行 _异步操作</em> <code>setTimeout</code>，其回调函数被 Web API 调用。 (详情请参考我关于event loop的文章.)</p><p>promise 和 timeout 都是异步操作，函数继续执行当JS引擎忙于执行promise 和 处理 <code>setTimeout</code> 的回调。相当于 <code>Last line!</code> 首先被输出， 因为它不是异步操作。执行完 <code>funcOne</code> 的最后一行，promise 状态转变为 resolved，<code>Promise!</code> 被打印。然而，因为我们调用了 <code>funcTwo()</code>, 调用栈不为空，<code>setTimeout</code> 的回调仍不能入栈。</p><p>我们现在处于 <code>funcTwo</code>，先 <em>awaiting</em> myPromise。通过 <code>await</code> 关键字， 我们暂停了函数的执行直到 promise 状态变为 resolved (或 rejected)。然后，我们输出 <code>res</code> 的 awaited 值（因为 promise 本身返回一个 promise）。 接着输出 <code>Promise!</code>。</p><p>下一行就是 <em>异步操作</em> <code>setTimeout</code>，其回调函数被 Web API 调用。</p><p>我们执行到函数 <code>funcTwo</code> 的最后一行，输出 <code>Last line!</code>。现在，因为 <code>funcTwo</code> 出栈，调用栈为空。在事件队列中等待的回调函数（<code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcOne</code>, and <code>() =&gt; console.log(&quot;Timeout!&quot;)</code> from <code>funcTwo</code>）以此入栈。第一个回调输出 <code>Timeout!</code>，并出栈。然后，第二个回调输出 <code>Timeout!</code>，并出栈。得到结果 <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></p></div></div><hr><h2 id="134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？"><a href="#134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？" class="headerlink" title="134. 我们怎样才能在 index.js 中调用 sum.js? 中的 sum？"></a>134. 我们怎样才能在 <code>index.js</code> 中调用 <code>sum.js?</code> 中的 <code>sum</code>？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> sum <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sum(4)</code></li><li>B: <code>sum.sum(4)</code></li><li>C: <code>sum.default(4)</code></li><li>D: 默认导出不用 <code>*</code> 来导入，只能具名导出</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用符号 <code>*</code>，我们引入文件中的所有值，包括默认和具名。如果我们有以下文件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&quot;./info&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><p>将会输出以下内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;I love JavaScript&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 <code>sum</code> 为例，相当于以下形式引入值 <code>sum</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">default</span>: <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>) &#123; <span class="keyword">return</span> x + x &#125; &#125;</span><br></pre></td></tr></table></figure><p>我们可以通过调用 <code>sum.default</code> 来调用该函数</p></div></div><hr><h2 id="135-输出什么？"><a href="#135-输出什么？" class="headerlink" title="135. 输出什么？"></a>135. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line"><span class="attr">set</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Added a new property!&quot;</span>),</span><br><span class="line"><span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Accessed a property!&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">person.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>Added a new property!</code></li><li>B: <code>Accessed a property!</code></li><li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li><li>D: 没有任何输出</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用 Proxy 对象，我们可以给一个对象添加自定义行为。在这个 case，我们传递一个包含以下属性的对象 <code>handler</code> : <code>set</code> and <code>get</code>。每当我门 <em>设置</em> 属性值时 <code>set</code> 被调用，每当我们 <em>获取</em> 时 <code>get</code> 被调用。</p><p>第一个参数是一个空对象 <code>{}</code>，作为 <code>person</code> 的值。对于这个对象，自定义行为被定义在对象 <code>handler</code>。如果我们向对象 <code>person</code> 添加属性，<code>set</code> 将被调用。如果我们获取 <code>person</code> 的属性, <code>get</code> 将被调用。</p><p>首先，我们向 proxy 对象(<code>person.name = &quot;Lydia&quot;</code>)添加一个属性 <code>name</code>。<code>set</code> 被调用并输出 <code>&quot;Added a new property!&quot;</code>。</p><p>然后，我们获取 proxy 对象的一个属性，对象 handler 的属性 <code>get</code> 被调用。输出 <code>&quot;Accessed a property!&quot;</code>。</p></div></div><hr><h2 id="136-以下哪一项会对对象-person-有副作用？"><a href="#136-以下哪一项会对对象-person-有副作用？" class="headerlink" title="136. 以下哪一项会对对象 person 有副作用？"></a>136. 以下哪一项会对对象 <code>person</code> 有副作用？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>person.age = 21</code></li><li>C: <code>delete person.name</code></li><li>D: <code>Object.assign(person, &#123; age: 21 &#125;)</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>使用 <code>Object.seal</code> 我们可以防止新属性 <em>被添加_，或者存在属性 _被移除</em>.</p><p>然而，你仍然可以对存在属性进行更改。</p></div></div><hr><h2 id="137-以下哪一项会对对象-person-有副作用？"><a href="#137-以下哪一项会对对象-person-有副作用？" class="headerlink" title="137. 以下哪一项会对对象 person 有副作用？"></a>137. 以下哪一项会对对象 <code>person</code> 有副作用？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line"><span class="attr">street</span>: <span class="string">&quot;100 Main St&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>delete person.address</code></li><li>C: <code>person.address.street = &quot;101 Main St&quot;</code></li><li>D: <code>person.pet = &#123; name: &quot;Mara&quot; &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>使用方法 <code>Object.freeze</code> 对一个对象进行 _冻结_。不能对属性进行添加，修改，删除。</p><p>然而，它仅 对对象进行 <em>浅</em> 冻结，意味着只有 对象中的 <em>直接</em> 属性被冻结。如果属性是另一个 object，像案例中的 <code>address</code>，<code>address</code> 中的属性没有被冻结，仍然可以被修改。</p></div></div><hr><h2 id="138-输出什么？"><a href="#138-输出什么？" class="headerlink" title="138. 输出什么？"></a>138. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; x + x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">num = <span class="number">2</span>, value = add(num)</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li><li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li><li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li><li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>首先我们不传递任何参数调用 <code>myFunc()</code>。因为我们没有传递参数，<code>num</code> 和 <code>value</code> 获取它们各自的默认值：num 为 <code>2</code>, 而 <code>value</code> 为函数 <code>add</code> 的返回值。对于函数 <code>add</code>，我们传递值为2的 <code>num</code> 作为参数。函数 <code>add</code> 返回 <code>4</code> 作为 <code>value</code> 的值。</p><p>然后，我们调用 <code>myFunc(3)</code> 并传递值 <code>3</code> 参数 <code>num</code> 的值。我们没有给 <code>value</code> 传递值。因为我们没有给参数 <code>value</code> 传递值，它获取默认值：函数 <code>add</code> 的返回值。对于函数 <code>add</code>，我们传递值为3的 <code>num</code>给它。函数 <code>add</code> 返回 <code>6</code> 作为 <code>value</code> 的值。</p></div></div><hr><h2 id="139-输出什么？"><a href="#139-输出什么？" class="headerlink" title="139. 输出什么？"></a>139. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  #number = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#number++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>()</span><br><span class="line">counter.<span class="title function_">increment</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.#number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p>在 ES2020 中，通过 <code>#</code> 我们可以给 class 添加私有变量。在 class 的外部我们无法获取该值。当我们尝试输出 <code>counter.#number</code>，语法错误被抛出：我们无法在 class <code>Counter</code> 外部获取它!</p></div></div><hr><h2 id="140-选择哪一个？"><a href="#140-选择哪一个？" class="headerlink" title="140. 选择哪一个？"></a>140. 选择哪一个？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 1&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Paul&quot;</span>, <span class="string">&quot;Lisa&quot;</span>] &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 2&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Laura&quot;</span>, <span class="string">&quot;Tim&quot;</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getMembers</span>(<span class="params">members</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; members.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> members[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getTeams</span>(<span class="params">teams</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; teams.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// ✨ SOMETHING IS MISSING HERE ✨</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">getTeams</span>(teams);</span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Paul&quot;, done: false &#125;</span></span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Lisa&quot;, done: false &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>yield getMembers(teams[i].members)</code></li><li>B: <code>yield* getMembers(teams[i].members)</code></li><li>C: <code>return getMembers(teams[i].members)</code></li><li>D: <code>return yield getMembers(teams[i].members)</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>为了遍历 <code>teams</code> 数组中对象的属性 <code>members</code> 中的每一项，我们需要将 <code>teams[i].members</code> 传递给 Generator 函数 <code>getMembers</code>。Generator 函数返回一个 generator 对象。为了遍历这个 generator 对象中的每一项，我们需要使用 <code>yield*</code>.</p><p>如果我们没有写 <code>yield</code>，<code>return yield</code> 或者 <code>return</code>，整个 Generator 函数不会第一时间 return 当我们调用 <code>next</code> 方法.</p></div></div><hr><h2 id="141-输出什么？"><a href="#141-输出什么？" class="headerlink" title="141. 输出什么？"></a>141. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">hobbies</span>: [<span class="string">&quot;coding&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addHobby</span>(<span class="params">hobby, hobbies = person.hobbies</span>) &#123;</span><br><span class="line">hobbies.<span class="title function_">push</span>(hobby);</span><br><span class="line"><span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;running&quot;</span>, []);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;dancing&quot;</span>);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;baking&quot;</span>, person.<span class="property">hobbies</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hobbies</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;coding&quot;]</code></li><li>B: <code>[&quot;coding&quot;, &quot;dancing&quot;]</code></li><li>C: <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li><li>D: <code>[&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>函数 <code>addHobby</code> 接受两个参数，<code>hobby</code> 和有着对象 <code>person</code> 中数组 <code>hobbies</code> 默认值的 <code>hobbies</code>。</p><p>首相，我们调用函数 <code>addHobby</code>，并给 <code>hobby</code> 传递 <code>&quot;running&quot;</code> 以及给 <code>hobbies</code> 传递一个空数组。因为我们给 <code>hobbies</code> 传递了空数组，<code>&quot;running&quot;</code> 被添加到这个空数组。</p><p>然后，我们调用函数 <code>addHobby</code>，并给 <code>hobby</code> 传递 <code>&quot;dancing&quot;</code>。我们不向 <code>hobbies</code> 传递值，因此它获取其默认值 —— 对象 <code>person</code> 的 属性 <code>hobbies</code>。我们向数组 <code>person.hobbies</code> push <code>dancing</code>。</p><p>最后，我们调用函数 <code>addHobby</code>，并向 <code>hobby</code> 传递 值 <code>&quot;bdaking&quot;</code>，并且向 <code>hobbies</code> 传递 <code>person.hobbies</code>。我们向数组 <code>person.hobbies</code> push <code>dancing</code>。</p><p>pushing <code>dancing</code> 和 <code>baking</code> 之后，<code>person.hobbies</code> 的值为 <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></p></div></div><hr><h2 id="142-输出什么？"><a href="#142-输出什么？" class="headerlink" title="142. 输出什么？"></a>142. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m a bird. 🦢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flamingo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m pink. 🌸&quot;</span>);</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Flamingo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>I&#39;m pink. 🌸</code></li><li>B: <code>I&#39;m pink. 🌸</code> <code>I&#39;m a bird. 🦢</code></li><li>C: <code>I&#39;m a bird. 🦢</code> <code>I&#39;m pink. 🌸</code></li><li>D: Nothing, we didn’t call any method</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>我们创建了类 <code>Flamingo</code> 的实例 <code>pet</code>。当我们实例化这个实例，<code>Flamingo</code> 中的 <code>constructor</code> 被调用。首相，输出 <code>&quot;I&#39;m pink. 🌸&quot;</code>, 之后我们调用<code>super()</code>。<code>super()</code> 调用父类的构造函数，<code>Bird</code>。<code>Bird</code> 的构造函数被调用，并输出 <code>&quot;I&#39;m a bird. 🦢&quot;</code>。</p></div></div><hr><h2 id="143-哪一个选项会导致报错？"><a href="#143-哪一个选项会导致报错？" class="headerlink" title="143. 哪一个选项会导致报错？"></a>143. 哪一个选项会导致报错？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🎄&quot;</span>, <span class="string">&quot;🎅🏼&quot;</span>, <span class="string">&quot;🎁&quot;</span>, <span class="string">&quot;⭐&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span> emojis.<span class="title function_">push</span>(<span class="string">&quot;🦌&quot;</span>);</span><br><span class="line"><span class="comment">/* 2 */</span> emojis.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">/* 3 */</span> emojis = [...emojis, <span class="string">&quot;🥂&quot;</span>];</span><br><span class="line"><span class="comment">/* 4 */</span> emojis.<span class="property">length</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 1 and 2</li><li>C: 3 and 4</li><li>D: 3</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>const</code> 关键字意味着我们不能 <em>重定义</em> 变量中的值，它 _仅可读_。而然，值本身不可修改。数组 <code>emojis</code> 中的值可被修改，如 push 新的值, 拼接，又或者将数组的长度设置为0。</p></div></div><hr><h2 id="144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-quot-Lydia-Hallie-quot-21-的输出？"><a href="#144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-quot-Lydia-Hallie-quot-21-的输出？" class="headerlink" title="144. 我们需要向对象 person 添加什么，以致执行 [...person] 时获得形如 [&quot;Lydia Hallie&quot;, 21] 的输出？"></a>144. 我们需要向对象 <code>person</code> 添加什么，以致执行 <code>[...person]</code> 时获得形如 <code>[&quot;Lydia Hallie&quot;, 21]</code> 的输出？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...person] <span class="comment">// [&quot;Lydia Hallie&quot;, 21]</span></span><br></pre></td></tr></table></figure><ul><li>A: 不需要，对象默认就是可迭代的</li><li>B: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* this[x] &#125;</code></li><li>C: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* Object.values(this) &#125;</code></li><li>D: <code>*[Symbol.iterator]() &#123; for (let x in this) yield this &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>对象默认并不是可迭代的。如果迭代规则被定义，则一个对象是可迭代的（An iterable is an iterable if the iterator protocol is present）。我们可以通过添加迭代器symbol <code>[Symbol.iterator]</code> 来定义迭代规则，其返回一个 generator 对象，比如说构建一个 generator 函数 <code>*[Symbol.iterator]() {}</code>。如果我们想要返回数组 <code>[&quot;Lydia Hallie&quot;, 21]</code>: <code>yield* Object.values(this)</code>，这个 generator 函数一定要 yield 对象 <code>person</code> 的<code>Object.values</code>。</p></div></div><hr><h2 id="145-输出什么？"><a href="#145-输出什么？" class="headerlink" title="145. 输出什么？"></a>145. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num) count += <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4<div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>在 <code>forEach</code> 循环内部的 <code>if</code> 会判断 <code>num</code> 的值是truthy或者是falsy。因为 <code>nums</code> 数组的第一个数字是 <code>0</code>，一个falsy值， <code>if</code> 语句代码块不会被执行。<code>count</code> 仅仅在 <code>nums</code> 数组的其他3个数字 <code>1</code>，<code>2</code>，<code>3</code> 时加1。因为 <code>count</code> 执行了3次加 <code>1</code> 运算，所以 <code>count</code> 的值为 <code>3</code>。</p></div></div></li></ul><hr><h2 id="146-输出是什么？"><a href="#146-输出是什么？" class="headerlink" title="146. 输出是什么？"></a>146. 输出是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFruit</span>(<span class="params">fruits</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits?.[<span class="number">1</span>]?.[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>], [<span class="string">&#x27;🍍&#x27;</span>]])</span><br><span class="line"><span class="title function_">getFruit</span>()</span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍍&#x27;</span>], [<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>]])</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code>, <code>undefined</code>, 🍌</li><li>B: <code>[]</code>, <code>null</code>, 🍌</li><li>C: <code>[]</code>, <code>[]</code>, 🍌</li><li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p><code>?</code> 允许我们去选择性地访问对象内部更深层的嵌套属性。 我们尝试打印 <code>fruits</code> 数组索引值为 <code>1</code> 的子数组内部的索引值为 <code>1</code> 的元素。 如果在 <code>fruits</code> 数组索引值 为 <code>1</code> 的位置不存在元素，会直接返回 <code>undefined</code>。 如果 <code>fruits</code> 数组在索引值为 <code>1</code> 的位置存在元素，但是子数组在索引值为 <code>1</code> 的位置不存在元素，也会返回 <code>undefined</code>。</p><p>首先，我们尝试打印 <code>[[&#39;🍊&#39;, &#39;🍌&#39;], [&#39;🍍&#39;]]</code> 的子数组 <code>[&#39;🍍&#39;]</code> 的第2个元素。这个子数组只包含一个元素，也就意味着在索引值为 <code>1</code> 的位置不存在元素，所以返回的是 <code>undefined</code> 。</p><p>其次，我们在没有传入任何参数调用了 <code>getFruits</code> 函数，也就意味着形参 <code>fruits</code> 的默认值为<code>undefined</code>。因为我们选择性地链接了 <code>fruits</code> 在索引值为 <code>1</code> 的元素，因为在索引值为 <code>1</code> 的位置不存在元素，因此返回的是 <code>undefined</code> 。</p><p>最后，我们尝试打印 <code>[&#39;🍍&#39;], [&#39;🍊&#39;, &#39;🍌&#39;]</code> 的子数组 <code>[&#39;🍊&#39;, &#39;🍌&#39;]</code> 的第2个元素。子数组索引值为 <code>1</code>的位置为 <code>🍌</code> ，因此它被打印出了。</p></div></div><hr><h2 id="147-输出什么？"><a href="#147-输出什么？" class="headerlink" title="147. 输出什么？"></a>147. 输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calc</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Calc</span>().<span class="title function_">increase</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="property">count</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p>我们设置 <code>calc</code> 变量为 <code>Calc</code> 类的一个新实例。 然后，我们初始化一个 <code>Calc</code> 的新实例，而且调用了这个实例的 <code>increase</code> 方法。因为count属性是在 <code>Calc</code> class的constructor内部的，所以count属性不会在 <code>Calc</code> 的原型链上共享出去。这就意味着calc实例的count值不会被更新，count仍然是 <code>0</code>。</p></div></div><hr><h2 id="148-输出什么"><a href="#148-输出什么" class="headerlink" title="148. 输出什么?"></a>148. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;e@mail.com&quot;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateUser</span> = (<span class="params">&#123; email, password &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (email) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, &#123; email &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (password) &#123;</span><br><span class="line">user.<span class="property">password</span> = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updatedUser = <span class="title function_">updateUser</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;new@email.com&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(updatedUser === user)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code></li><li>B: <code>true</code></li><li>C: <code>TypeError</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p> <code>updateUser</code> 函数更新user的 <code>email</code> 和 <code>password</code> 属性的值， 如果它们的值传入函数， 函数返回的就是 <code>user</code> 对象。 <code>updateUser</code> 函数的返回值是 <code>user</code> 对象，意味着updatedUser的值与 <code>user</code> 指向的是同一个 <code>user</code> 对象。<code>updatedUser === user</code> 为 <code>true</code>.</p></div></div><hr><h2 id="149-输出什么"><a href="#149-输出什么" class="headerlink" title="149. 输出什么?"></a>149. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fruit.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.<span class="title function_">unshift</span>(<span class="string">&#x27;🍇&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruit)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>B: <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>C: <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>D: <code>[&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p>首先，我们在fruit数组上调用 <code>slice</code> 方法。 slice方法不会修改原始数组，但是会返回从数组切片下来的值：香蕉emoji。<br>其次，我们在fruit数组上调用 <code>splice</code> 方法。 splice方法会修改原始数组，也就意味着fruit数组此时为 <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code>。<br>最后，我们在fruit数组上调用 <code>unshift</code> 方法，通过添加一个值的方式改变了原始数组，添加的是’🍇’，它成为了数组的第一个元素。现在fruit数组的组成为 <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code>。</p></div></div><hr><h2 id="150-输出什么"><a href="#150-输出什么" class="headerlink" title="150. 输出什么?"></a>150. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐶&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> cat = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐈&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">animals[dog] = &#123; ...dog, <span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span> &#125;</span><br><span class="line">animals[cat] = &#123; ...cat, <span class="attr">name</span>: <span class="string">&quot;Sara&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals[dog])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; emoji: &quot;🐶&quot;, name: &quot;Mara&quot; &#125;</code></li><li>B: <code>&#123; emoji: &quot;🐈&quot;, name: &quot;Sara&quot; &#125;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p>对象的键会被转换为字符串。</p><p>因为  <code>dog</code> 的值是一个对象，   <code>animals[dog]</code> 实际上意味着我们创建了一个叫做 <code>&quot;object Object&quot;</code> 的属性来代表新的对象。  <code>animals[&quot;object Object&quot;]</code> 现在等于 <code>{ emoji: &quot;🐶&quot;, name: &quot;Mara&quot;}</code>。</p><p><code>cat</code> 也是一个对象，<code>animals[cat]</code> 实际上意味着我们在用新的cat的属性覆盖  <code>animals[``&quot;``object Object``&quot;``]</code> 的值。</p><p>打印  <code>animals[dog]</code>，实际上是<code>animals[&quot;object Object&quot;]</code>，这是因为转化<code>dog</code>对象为一个字符串结果 <code>&quot;object Object&quot;</code> ，所以返回 <code>{ emoji: &quot;🐈&quot;, name: &quot;Sara&quot; }</code>。</p></div></div><hr><h2 id="151-输出什么"><a href="#151-输出什么" class="headerlink" title="151. 输出什么?"></a>151. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span>,</span><br><span class="line"><span class="attr">updateEmail</span>: <span class="function"><span class="params">email</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">email</span> = email</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">updateEmail</span>(<span class="string">&quot;new@email.com&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">email</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>my@email.com</code></li><li>B: <code>new@email.com</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-A"><a href="#答案-A" class="headerlink" title="答案: A"></a>答案: A</h4><p><code>updateEmail</code> 函数是一个箭头函数，它没有和 <code>user</code> 对象绑定。这就意味着 <code>this</code> 关键字不会引用到 <code>user</code> 对象，但是会引用到全局对象。 <code>user</code> 对象内部的 <code>email</code> 的值不会更新。当打印 <code>user.email</code> 的时候， 原始值 <code>my@email.com</code> 被返回。</p></div></div><hr><h2 id="152-输出什么"><a href="#152-输出什么" class="headerlink" title="152. 输出什么?"></a>152. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Second&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise4 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Fourth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runPromises</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])</span><br><span class="line"><span class="keyword">const</span> res2  = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise3, promise4])</span><br><span class="line"><span class="keyword">return</span> [res1, res2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runPromises</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]]</code></li><li>B: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]]</code></li><li>C: <code>[[&#39;First&#39;, &#39;Second&#39;]]</code></li><li>D: <code>&#39;Third&#39;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-D"><a href="#答案-D" class="headerlink" title="答案: D"></a>答案: D</h4><p> <code>Promise.all</code> 方法可以并行式运行promise。如果其中一个promise失败了，<code>Promise.all</code> 方法会带上被reject的promise的值_rejects_。在这个例子中， <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 值reject。我们在调用 <code>runPromises</code> 时在 <code>runPromises</code> 函数内部的 <code>catch</code> 方法去捕获任意error从而捕获到被reject的值。因为 <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 被reject，所以只有 <code>&quot;Third&quot;</code> 打印。</p></div></div><hr><h2 id="153-哪个作为method的值可以打印-name-quot-Lydia-quot-age-22"><a href="#153-哪个作为method的值可以打印-name-quot-Lydia-quot-age-22" class="headerlink" title="153. 哪个作为method的值可以打印{ name: &quot;Lydia&quot;, age: 22 }?"></a>153. 哪个作为<code>method</code>的值可以打印<code>&#123; name: &quot;Lydia&quot;, age: 22 &#125;</code>?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">&quot;Lydia&quot;</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> method = <span class="comment">/* ?? */</span></span><br><span class="line"><span class="title class_">Object</span>[method](keys.<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [keys[i], values[i]]</span><br><span class="line">&#125;)) <span class="comment">// &#123; name: &quot;Lydia&quot;, age: 22 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>entries</code></li><li>B: <code>values</code></li><li>C: <code>fromEntries</code></li><li>D: <code>forEach</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p> <code>fromEntries</code> 方法可以将二维数组转换为对象。在每个子数组的第一个元素是key，在每个子数组的第二个元素是value。在这个例子中，我们映射了 <code>keys</code> 数组，它返回了一个数组，数组的第一个元素为keys数组当前索引的值，第二个元素为values数组当前索引的值。</p><p>这样就创建了一个包含正确keys和values的子数组的数组，因此结果为<code>{ name: &quot;Lydia&quot;, age: 22 }</code>。</p></div></div><hr><h2 id="154-输出什么"><a href="#154-输出什么" class="headerlink" title="154. 输出什么?"></a>154. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createMember</span> = (<span class="params">&#123; email, address = &#123;&#125;&#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> validEmail = <span class="regexp">/.+\@.+\..+/</span>.<span class="title function_">test</span>(email)</span><br><span class="line"><span class="keyword">if</span> (!validEmail) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Valid email pls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">email,</span><br><span class="line"><span class="attr">address</span>: address ? address : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="title function_">createMember</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; email: &quot;my@email.com&quot;, address: null &#125;</code></li><li>B: <code>&#123; email: &quot;my@email.com&quot; &#125;</code></li><li>C: <code>&#123; email: &quot;my@email.com&quot;, address: &#123;&#125; &#125;</code></li><li>D: <code>&#123; email: &quot;my@email.com&quot;, address: undefined &#125;</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-C"><a href="#答案-C" class="headerlink" title="答案: C"></a>答案: C</h4><p> <code>address</code> 的默认值是一个空对象 <code>{}</code>。当我们设置 <code>member</code> 变量为 <code>createMember</code> 函数返回的对象，我们没有为address参数传值，意味着address的值为默认的空对象 <code>{}</code>。一个空对象是一个truthy值，意味着 <code>address ? address : null</code> 条件会返回 <code>true</code>。address的值为空对象 <code>{}</code>。</p></div></div><hr><h2 id="155-输出什么"><a href="#155-输出什么" class="headerlink" title="155. 输出什么?"></a>155. 输出什么?</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> randomValue = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line">randomValue = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">typeof</span> randomValue === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It&#x27;s not a string!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Yay it&#x27;s a string!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>It&#39;s not a string!</code></li><li>B: <code>Yay it&#39;s a string!</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><div class="hide-content"><h4 id="答案-B"><a href="#答案-B" class="headerlink" title="答案: B"></a>答案: B</h4><p> <code>if</code> 语句的条件判断 <code>!typeof randomValue</code> 的值是否等于 <code>&quot;string&quot;</code>。 <code>!</code> 操作符将这个值转化为一个布尔值。如果值是truthy的话，返回值会是 <code>false</code>，如果值是falsy，返回值会是 <code>true</code>。在这里， <code>typeof randomValue</code> 的返回值是一个truthy值 <code>&quot;number&quot;</code>，意味着 <code>!typeof randomValue</code> 的值是一个布尔值 <code>false</code>。</p><p> <code>!typeof randomValue === &quot;string&quot;</code> 总是返回false，因为我们实际上是在执行 <code>false === &quot;string&quot;</code>。因为条件返回的是 <code>false</code>，所以 <code>else</code> 语句中的代码块会被运行，因此打印 <code>Yay it&#39;s a string!</code> 。</p></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop</title>
      <link href="/posts/2a798ab5.html"/>
      <url>/posts/2a798ab5.html</url>
      
        <content type="html"><![CDATA[<h2 id="调用栈（执行栈）"><a href="#调用栈（执行栈）" class="headerlink" title="调用栈（执行栈）"></a>调用栈（执行栈）</h2><ul><li>专门用来执行代码的栈</li><li>不是栈内存</li><li>LIFO: last in first out</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>异步任务排队的位置<ul><li>事件队列：Event Queue</li><li>微任务队列：Microsoft Queue<ul><li>Promise.then()</li></ul></li><li>宏任务队列：Macrosoft Queue<ul><li>整体代码</li><li>定时器</li></ul></li><li>FIFO: first in first out</li></ul></li></ul><p><a href="https://imgtu.com/i/gPRW3F"><img src="https://z3.ax1x.com/2021/04/28/gPRW3F.png" alt="gPRW3F.png"></a></p><h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><ul><li>提供异步机制的</li><li>分配任务到哪一个队列</li><li>会在每一次调用栈空的时候进行 计时 并 分配</li></ul><h2 id="事件轮询（客户端-事件循环）"><a href="#事件轮询（客户端-事件循环）" class="headerlink" title="事件轮询（客户端 事件循环）"></a>事件轮询（客户端 事件循环）</h2><ul><li>就是 JS 代码的同步异步执行机制</li><li>轮流询问 宏任务队列 和 微任务队列</li><li>从 宏任务 开始，一个宏任务，清空一次微任务队列<ul><li>再一个宏任务，清空一次微任务队列</li><li>直到微任务队列清空完毕，再次访问宏任务队列也没有任务的时候</li><li>Event Loop暂停</li></ul></li></ul><p><a href="https://imgtu.com/i/gPWTMQ"><img src="https://z3.ax1x.com/2021/04/28/gPWTMQ.png" alt="gPWTMQ.png"></a></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><a href="https://imgtu.com/i/gPRfc4"><img src="https://z3.ax1x.com/2021/04/28/gPRfc4.png" alt="gPRfc4.png"></a></p><p><a href="https://imgtu.com/i/gPRcNV"><img src="https://z3.ax1x.com/2021/04/28/gPRcNV.png" alt="gPRcNV.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模块化开发</title>
      <link href="/posts/b96efc28.html"/>
      <url>/posts/b96efc28.html</url>
      
        <content type="html"><![CDATA[<h1 id="没有模块化开发的时候"><a href="#没有模块化开发的时候" class="headerlink" title="没有模块化开发的时候"></a>没有模块化开发的时候</h1><ul><li>问题：<ol><li>没有办法维护</li><li>全局变量污染</li><li>依赖关系不清</li><li>必须按顺序引入文件</li></ol></li></ul><h1 id="IIFE-伪模块化标准-2003-2011"><a href="#IIFE-伪模块化标准-2003-2011" class="headerlink" title="IIFE 伪模块化标准(2003~2011)"></a>IIFE 伪模块化标准(2003~2011)</h1><ul><li>Immediaitely Invoked Function Expression </li><li>自执行函数<code>(function () &#123;&#125;)()</code></li><li>解决问题:<ol><li>依赖不清<ul><li>直接在自执行函数的参数位置，能看到依赖了哪些模块</li></ul></li><li>变量全局污染<ul><li>你后面的代码该用什么变量用什么</li></ul></li></ol></li><li>问题:<ol><li>文件顺序不能动</li><li>只能知道我依赖的几个模块，但是模块在哪个文件中不好说</li></ol></li></ul><h1 id="CommonJS-模块化标准"><a href="#CommonJS-模块化标准" class="headerlink" title="CommonJS 模块化标准"></a>CommonJS 模块化标准</h1><ul><li>2009 年，nodejs 出现了</li><li>使用JS去做服务端语言</li><li>伴生的是 CommonJS 模块化标准</li><li>缺点:只能在后端JS里面用</li></ul><h1 id="AMD-模块化标准-依赖前置"><a href="#AMD-模块化标准-依赖前置" class="headerlink" title="AMD 模块化标准 - 依赖前置"></a>AMD 模块化标准 - 依赖前置</h1><ul><li><p>Async Module Definition</p></li><li><p>2011出现的，社区里面发起的</p></li><li><p>因为非官方，没有关键字，大家书写了一套叫做 require.js 的第三方文件</p></li><li><p>来实现模块化标准</p></li><li><p>把每一个js文件独立出来了</p></li><li><p>使用了导入导出的语法来实现模块化</p></li><li><p>在JS文件里面引入另一个JS文件</p></li><li><p>页面只需要引入最后的整合文件就可以了</p></li><li><p>语法：</p><ul><li><p>定义模块(调用define 的方法)</p><ol><li><p>独立模块定义</p><ul><li>每一个模块文件开始执行define()</li><li>我不依赖其他文件，我就是一个单纯的模块</li><li>向外暴露的内容，直接return 出去就好了</li></ul></li><li><p>依赖其他模块的模块(我也是一个模块文件，但是我依赖的以他模块的内容)</p><ul><li>使用define() 定义</li><li>语法: <code>define([ 依赖文件1,依赖文件2, ... ], function (模块A,模块B) &#123;&#125;)</code></li></ul></li></ol></li><li><p>导入其他模块</p><ul><li>使用这个方法require()</li><li>语法: <code>require([ 依赖文件1,依赖文件2, ... ], function (模块1, 模块2)&#123;&#125;)</code></li></ul></li></ul></li><li><p>解决问题:</p><ol><li><p>依赖很清晰</p><ul><li>因为只有一个文件，那么所有的东西都在一个文件里面出现</li></ul></li><li><p>变量全局污染</p><ul><li>没有全局污染，都在私有作用域</li></ul></li></ol></li><li><p>问题:</p><ul><li>依赖前置<ul><li>不管多少行以后使用的东西，都会在打开页面的时候就加再进来</li><li>缺点：首屏加载时间长</li><li>优点：后期操作流畅</li></ul></li></ul></li></ul><h1 id="CMD-通用模块定义-即时依赖"><a href="#CMD-通用模块定义-即时依赖" class="headerlink" title="CMD 通用模块定义 - 即时依赖"></a>CMD 通用模块定义 - 即时依赖</h1><ul><li><p>Common Module Defineion</p></li><li><p>2011左右，社区里面出现的一个标准</p></li><li><p>淘宝”玉伯”，开发一了个CMD的模块化标准</p></li><li><p>依赖于一个叫做sea.js的文件来实现的模块化标准</p></li><li><p>使用:文件需要引入一个sea.js的文件</p><ol><li>独立模块定义<ul><li>define( function ( require, exports, module) { })<ul><li>require() 用来导入其他文件的</li><li>module.exports是为了本文件导出内容的</li><li>exports是module. exports的别名</li><li>var exports = module。exports</li></ul></li></ul></li><li>依赖其他模块的模块<ul><li>你需要依赖其他文件模块<ul><li>在define( function ( require, exports, module) {</li><li>在你需要的位置使用require() 方法来导入</li><li>var modA = require( ‘地址’)</li></ul></li></ul></li><li>资源整合<ul><li>使用seajs.use()</li><li>语法: seajs.use([‘你要 依赖的模块’]，function (模块A) {})</li></ul></li></ol></li><li><p>解决问题</p><ul><li>依赖前置</li><li>按需加载，在你需要的时候，在加载</li><li>也留下了依赖前置的接口</li></ul></li><li><p>问题:</p><ul><li>即时依赖<ul><li>首屏加载快</li><li>操作不够流畅</li></ul></li></ul></li></ul><h1 id="ES6-Module-依赖前置"><a href="#ES6-Module-依赖前置" class="headerlink" title="ES6 Module - 依赖前置"></a>ES6 Module - 依赖前置</h1><ul><li>2015年发布，ES6 语法里面自带了一个模块化标准</li><li>各大浏览器厂商并不买账</li><li>2016年开始，Vue出现了，人家出现了一个脚手架(开发的大框架直接给你搭建好)</li><li>搭建这个架子的时候，内置了ES6模块化标准</li><li>2018 年，各大浏览器厂商开始原生支持ES6模块化标准</li><li>2018 年中，Chrome 率先原生支持ES6模块化</li><li>变成了JS的语法，和关键字，不需要任何第三方文件的引入<ul><li>特点:页面必须在服务器上打开<ul><li>live server 插件</li><li>如果你想使用模块化语法，script 标签要加一个属性type=” module”</li></ul></li></ul></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>每一个文件都可以作为独立模块，页都可以作为整合文件</li><li>导出语法<ol><li>export default 导出的内容</li><li>export var num = 200</li></ol></li><li>导入语法<ol><li>接收export default 导出<ul><li><code>import 变量 from&#39;哪一个JS文件&#39;</code></li></ul></li><li>接收export导出的那个<ul><li><code>import &#123;接收变量&#125; from&#39; 哪-一个JS文件&#39;</code></li></ul></li></ol></li></ol><h1 id="ES2020-发布新标准"><a href="#ES2020-发布新标准" class="headerlink" title="ES2020 发布新标准"></a>ES2020 发布新标准</h1><ul><li>多了一个按需加载的模块化</li><li>语法: <code>import(你要加载的文件).then(function(res)&#123;&#125;)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>art-template前端模板引擎</title>
      <link href="/posts/3762f4c.html"/>
      <url>/posts/3762f4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h2 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><pre><code>+ 帮助我们快速渲染页面+ 三体分离(结构 样式 行为)+ 一般都是第三方文件引入使用</code></pre><h3 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h3><pre><code>+ art-template 前后端都能用+ underscroll 后端js不能用+ e.js 后端js不能用+ template 后端js不能用</code></pre><h2 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h2><pre><code>+ 特点  1. html 和 js 代码分离  2. 有自己独立的语法，但也可以使用原生js 语法+ 安装  - 方法1、npm安装(require(&#39;art-template&#39;))    + 在要使用的项目文件夹下安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install art-template</span><br></pre></td></tr></table></figure>  - 方法2、浏览器实时编译(引入外部文件template-web.js)    + 从github下载放在lib文件夹里面的template-web.js    ``` html        &lt;link rel=&quot;stylesheet&quot; href=&quot;template-web.js&quot;&gt;    ```  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> art-template </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
